//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// AuthInput
/// </summary>
[JsonConverter(typeof(AuthInputJsonConverter))]
public partial class AuthInput : AbstractSchema
{
  /// <summary>
  /// Initializes a new instance of the AuthInput class
  /// with a AuthOAuth
  /// </summary>
  /// <param name="actualInstance">An instance of AuthOAuth.</param>
  public AuthInput(AuthOAuth actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the AuthInput class
  /// with a AuthGoogleServiceAccount
  /// </summary>
  /// <param name="actualInstance">An instance of AuthGoogleServiceAccount.</param>
  public AuthInput(AuthGoogleServiceAccount actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the AuthInput class
  /// with a AuthBasic
  /// </summary>
  /// <param name="actualInstance">An instance of AuthBasic.</param>
  public AuthInput(AuthBasic actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the AuthInput class
  /// with a AuthAPIKey
  /// </summary>
  /// <param name="actualInstance">An instance of AuthAPIKey.</param>
  public AuthInput(AuthAPIKey actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the AuthInput class
  /// with a AuthAlgolia
  /// </summary>
  /// <param name="actualInstance">An instance of AuthAlgolia.</param>
  public AuthInput(AuthAlgolia actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the AuthInput class
  /// with a AuthAlgoliaInsights
  /// </summary>
  /// <param name="actualInstance">An instance of AuthAlgoliaInsights.</param>
  public AuthInput(AuthAlgoliaInsights actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the AuthInput class
  /// with a Dictionary{string, string}
  /// </summary>
  /// <param name="actualInstance">An instance of Dictionary<string, string>.</param>
  public AuthInput(Dictionary<string, string> actualInstance)
  {
    ActualInstance = actualInstance;
  }

  /// <summary>
  /// Gets or Sets ActualInstance
  /// </summary>
  public sealed override object ActualInstance { get; set; }

  /// <summary>
  /// Get the actual instance of `AuthOAuth`. If the actual instance is not `AuthOAuth`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of AuthOAuth</returns>
  public AuthOAuth AsAuthOAuth()
  {
    return (AuthOAuth)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `AuthGoogleServiceAccount`. If the actual instance is not `AuthGoogleServiceAccount`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of AuthGoogleServiceAccount</returns>
  public AuthGoogleServiceAccount AsAuthGoogleServiceAccount()
  {
    return (AuthGoogleServiceAccount)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `AuthBasic`. If the actual instance is not `AuthBasic`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of AuthBasic</returns>
  public AuthBasic AsAuthBasic()
  {
    return (AuthBasic)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `AuthAPIKey`. If the actual instance is not `AuthAPIKey`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of AuthAPIKey</returns>
  public AuthAPIKey AsAuthAPIKey()
  {
    return (AuthAPIKey)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `AuthAlgolia`. If the actual instance is not `AuthAlgolia`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of AuthAlgolia</returns>
  public AuthAlgolia AsAuthAlgolia()
  {
    return (AuthAlgolia)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `AuthAlgoliaInsights`. If the actual instance is not `AuthAlgoliaInsights`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of AuthAlgoliaInsights</returns>
  public AuthAlgoliaInsights AsAuthAlgoliaInsights()
  {
    return (AuthAlgoliaInsights)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `Dictionary{string, string}`. If the actual instance is not `Dictionary{string, string}`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of Dictionary&lt;string, string&gt;</returns>
  public Dictionary<string, string> AsDictionaryString()
  {
    return (Dictionary<string, string>)ActualInstance;
  }

  /// <summary>
  /// Check if the actual instance is of `AuthOAuth` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsAuthOAuth()
  {
    return ActualInstance.GetType() == typeof(AuthOAuth);
  }

  /// <summary>
  /// Check if the actual instance is of `AuthGoogleServiceAccount` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsAuthGoogleServiceAccount()
  {
    return ActualInstance.GetType() == typeof(AuthGoogleServiceAccount);
  }

  /// <summary>
  /// Check if the actual instance is of `AuthBasic` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsAuthBasic()
  {
    return ActualInstance.GetType() == typeof(AuthBasic);
  }

  /// <summary>
  /// Check if the actual instance is of `AuthAPIKey` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsAuthAPIKey()
  {
    return ActualInstance.GetType() == typeof(AuthAPIKey);
  }

  /// <summary>
  /// Check if the actual instance is of `AuthAlgolia` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsAuthAlgolia()
  {
    return ActualInstance.GetType() == typeof(AuthAlgolia);
  }

  /// <summary>
  /// Check if the actual instance is of `AuthAlgoliaInsights` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsAuthAlgoliaInsights()
  {
    return ActualInstance.GetType() == typeof(AuthAlgoliaInsights);
  }

  /// <summary>
  /// Check if the actual instance is of `Dictionary{string, string}` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsDictionaryString()
  {
    return ActualInstance.GetType() == typeof(Dictionary<string, string>);
  }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    var sb = new StringBuilder();
    sb.Append("class AuthInput {\n");
    sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public override string ToJson()
  {
    return JsonSerializer.Serialize(ActualInstance, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not AuthInput input)
    {
      return false;
    }

    return ActualInstance.Equals(input.ActualInstance);
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ActualInstance != null)
        hashCode = hashCode * 59 + ActualInstance.GetHashCode();
      return hashCode;
    }
  }
}

/// <summary>
/// Custom JSON converter for AuthInput
/// </summary>
public class AuthInputJsonConverter : JsonConverter<AuthInput>
{
  /// <summary>
  /// Check if the object can be converted
  /// </summary>
  /// <param name="objectType">Object type</param>
  /// <returns>True if the object can be converted</returns>
  public override bool CanConvert(Type objectType)
  {
    return objectType == typeof(AuthInput);
  }

  /// <summary>
  /// To convert a JSON string into an object
  /// </summary>
  /// <param name="reader">JSON reader</param>
  /// <param name="typeToConvert">Object type</param>
  /// <param name="options">Serializer options</param>
  /// <returns>The object converted from the JSON string</returns>
  public override AuthInput Read(
    ref Utf8JsonReader reader,
    Type typeToConvert,
    JsonSerializerOptions options
  )
  {
    var jsonDocument = JsonDocument.ParseValue(ref reader);
    var root = jsonDocument.RootElement;
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("url", out _)
      && root.TryGetProperty("client_id", out _)
      && root.TryGetProperty("client_secret", out _)
    )
    {
      try
      {
        return new AuthInput(jsonDocument.Deserialize<AuthOAuth>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into AuthOAuth: {exception}");
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("clientEmail", out _)
      && root.TryGetProperty("privateKey", out _)
    )
    {
      try
      {
        return new AuthInput(
          jsonDocument.Deserialize<AuthGoogleServiceAccount>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into AuthGoogleServiceAccount: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("username", out _)
      && root.TryGetProperty("password", out _)
    )
    {
      try
      {
        return new AuthInput(jsonDocument.Deserialize<AuthBasic>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into AuthBasic: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object && root.TryGetProperty("key", out _))
    {
      try
      {
        return new AuthInput(jsonDocument.Deserialize<AuthAPIKey>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into AuthAPIKey: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new AuthInput(jsonDocument.Deserialize<AuthAlgolia>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into AuthAlgolia: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new AuthInput(jsonDocument.Deserialize<AuthAlgoliaInsights>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into AuthAlgoliaInsights: {exception}"
        );
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new AuthInput(
          jsonDocument.Deserialize<Dictionary<string, string>>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into Dictionary<string, string>: {exception}"
        );
      }
    }
    throw new InvalidDataException(
      $"The JSON string cannot be deserialized into any schema defined."
    );
  }

  /// <summary>
  /// To write the JSON string
  /// </summary>
  /// <param name="writer">JSON writer</param>
  /// <param name="value">AuthInput to be converted into a JSON string</param>
  /// <param name="options">JSON Serializer options</param>
  public override void Write(Utf8JsonWriter writer, AuthInput value, JsonSerializerOptions options)
  {
    writer.WriteRawValue(value.ToJson());
  }
}
