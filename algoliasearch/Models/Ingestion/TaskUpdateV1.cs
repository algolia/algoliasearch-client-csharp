//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// API request body for updating a task using the V1 shape, please use methods and types that don't contain the V1 suffix.
/// </summary>
public partial class TaskUpdateV1
{
  /// <summary>
  /// Initializes a new instance of the TaskUpdateV1 class.
  /// </summary>
  public TaskUpdateV1() { }

  /// <summary>
  /// Universally unique identifier (UUID) of a destination resource.
  /// </summary>
  /// <value>Universally unique identifier (UUID) of a destination resource.</value>
  [JsonPropertyName("destinationID")]
  public string DestinationID { get; set; }

  /// <summary>
  /// Gets or Sets Trigger
  /// </summary>
  [JsonPropertyName("trigger")]
  public TriggerUpdateInput Trigger { get; set; }

  /// <summary>
  /// Gets or Sets Input
  /// </summary>
  [JsonPropertyName("input")]
  public TaskInput Input { get; set; }

  /// <summary>
  /// Whether the task is enabled.
  /// </summary>
  /// <value>Whether the task is enabled.</value>
  [JsonPropertyName("enabled")]
  public bool? Enabled { get; set; }

  /// <summary>
  /// Maximum accepted percentage of failures for a task run to finish successfully.
  /// </summary>
  /// <value>Maximum accepted percentage of failures for a task run to finish successfully.</value>
  [JsonPropertyName("failureThreshold")]
  public int? FailureThreshold { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class TaskUpdateV1 {\n");
    sb.Append("  DestinationID: ").Append(DestinationID).Append("\n");
    sb.Append("  Trigger: ").Append(Trigger).Append("\n");
    sb.Append("  Input: ").Append(Input).Append("\n");
    sb.Append("  Enabled: ").Append(Enabled).Append("\n");
    sb.Append("  FailureThreshold: ").Append(FailureThreshold).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not TaskUpdateV1 input)
    {
      return false;
    }

    return (
        DestinationID == input.DestinationID
        || (DestinationID != null && DestinationID.Equals(input.DestinationID))
      )
      && (Trigger == input.Trigger || (Trigger != null && Trigger.Equals(input.Trigger)))
      && (Input == input.Input || (Input != null && Input.Equals(input.Input)))
      && (Enabled == input.Enabled || Enabled.Equals(input.Enabled))
      && (
        FailureThreshold == input.FailureThreshold
        || FailureThreshold.Equals(input.FailureThreshold)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (DestinationID != null)
      {
        hashCode = (hashCode * 59) + DestinationID.GetHashCode();
      }
      if (Trigger != null)
      {
        hashCode = (hashCode * 59) + Trigger.GetHashCode();
      }
      if (Input != null)
      {
        hashCode = (hashCode * 59) + Input.GetHashCode();
      }
      hashCode = (hashCode * 59) + Enabled.GetHashCode();
      hashCode = (hashCode * 59) + FailureThreshold.GetHashCode();
      return hashCode;
    }
  }
}
