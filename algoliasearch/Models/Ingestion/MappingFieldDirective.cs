//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// Describes how a field should be resolved by applying a set of directives.
/// </summary>
public partial class MappingFieldDirective
{
  /// <summary>
  /// Initializes a new instance of the MappingFieldDirective class.
  /// </summary>
  [JsonConstructor]
  public MappingFieldDirective() { }

  /// <summary>
  /// Initializes a new instance of the MappingFieldDirective class.
  /// </summary>
  /// <param name="fieldKey">Destination field key. (required).</param>
  /// <param name="value">How the destination field should be resolved from the source. (required).</param>
  public MappingFieldDirective(string fieldKey, Dictionary<string, object> value)
  {
    FieldKey = fieldKey ?? throw new ArgumentNullException(nameof(fieldKey));
    Value = value ?? throw new ArgumentNullException(nameof(value));
  }

  /// <summary>
  /// Destination field key.
  /// </summary>
  /// <value>Destination field key.</value>
  [JsonPropertyName("fieldKey")]
  public string FieldKey { get; set; }

  /// <summary>
  /// How the destination field should be resolved from the source.
  /// </summary>
  /// <value>How the destination field should be resolved from the source.</value>
  [JsonPropertyName("value")]
  public Dictionary<string, object> Value { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class MappingFieldDirective {\n");
    sb.Append("  FieldKey: ").Append(FieldKey).Append("\n");
    sb.Append("  Value: ").Append(Value).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not MappingFieldDirective input)
    {
      return false;
    }

    return (FieldKey == input.FieldKey || (FieldKey != null && FieldKey.Equals(input.FieldKey)))
      && (
        Value == input.Value
        || Value != null && input.Value != null && Value.SequenceEqual(input.Value)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (FieldKey != null)
      {
        hashCode = (hashCode * 59) + FieldKey.GetHashCode();
      }
      if (Value != null)
      {
        hashCode = (hashCode * 59) + Value.GetHashCode();
      }
      return hashCode;
    }
  }
}
