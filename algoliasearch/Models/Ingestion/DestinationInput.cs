//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// DestinationInput
/// </summary>
public partial class DestinationInput
{
  /// <summary>
  /// Gets or Sets RecordType
  /// </summary>
  [JsonPropertyName("recordType")]
  public RecordType? RecordType { get; set; }

  /// <summary>
  /// Initializes a new instance of the DestinationInput class.
  /// </summary>
  [JsonConstructor]
  public DestinationInput() { }

  /// <summary>
  /// Initializes a new instance of the DestinationInput class.
  /// </summary>
  /// <param name="indexName">Algolia index name (case-sensitive). (required).</param>
  public DestinationInput(string indexName)
  {
    IndexName = indexName ?? throw new ArgumentNullException(nameof(indexName));
  }

  /// <summary>
  /// Algolia index name (case-sensitive).
  /// </summary>
  /// <value>Algolia index name (case-sensitive).</value>
  [JsonPropertyName("indexName")]
  public string IndexName { get; set; }

  /// <summary>
  /// Attributes from your source to exclude from Algolia records.  Not all your data attributes will be useful for searching. Keeping your Algolia records small increases indexing and search performance.  - Exclude nested attributes with `.` notation. For example, `foo.bar` indexes the `foo` attribute and all its children **except** the `bar` attribute. - Exclude attributes from arrays with `[i]`, where `i` is the index of the array element.   For example, `foo.[0].bar` only excludes the `bar` attribute from the first element of the `foo` array, but indexes the complete `foo` attribute for all other elements.   Use `*` as wildcard: `foo.[*].bar` excludes `bar` from all elements of the `foo` array.
  /// </summary>
  /// <value>Attributes from your source to exclude from Algolia records.  Not all your data attributes will be useful for searching. Keeping your Algolia records small increases indexing and search performance.  - Exclude nested attributes with `.` notation. For example, `foo.bar` indexes the `foo` attribute and all its children **except** the `bar` attribute. - Exclude attributes from arrays with `[i]`, where `i` is the index of the array element.   For example, `foo.[0].bar` only excludes the `bar` attribute from the first element of the `foo` array, but indexes the complete `foo` attribute for all other elements.   Use `*` as wildcard: `foo.[*].bar` excludes `bar` from all elements of the `foo` array. </value>
  [JsonPropertyName("attributesToExclude")]
  public List<string> AttributesToExclude { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class DestinationInput {\n");
    sb.Append("  IndexName: ").Append(IndexName).Append("\n");
    sb.Append("  RecordType: ").Append(RecordType).Append("\n");
    sb.Append("  AttributesToExclude: ").Append(AttributesToExclude).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not DestinationInput input)
    {
      return false;
    }

    return (
        IndexName == input.IndexName || (IndexName != null && IndexName.Equals(input.IndexName))
      )
      && (RecordType == input.RecordType || RecordType.Equals(input.RecordType))
      && (
        AttributesToExclude == input.AttributesToExclude
        || AttributesToExclude != null
          && input.AttributesToExclude != null
          && AttributesToExclude.SequenceEqual(input.AttributesToExclude)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (IndexName != null)
      {
        hashCode = (hashCode * 59) + IndexName.GetHashCode();
      }
      hashCode = (hashCode * 59) + RecordType.GetHashCode();
      if (AttributesToExclude != null)
      {
        hashCode = (hashCode * 59) + AttributesToExclude.GetHashCode();
      }
      return hashCode;
    }
  }
}
