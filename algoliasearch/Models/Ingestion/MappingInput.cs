//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// Transformations to apply to the source, serialized as a JSON string.
/// </summary>
public partial class MappingInput
{
  /// <summary>
  /// Gets or Sets Format
  /// </summary>
  [JsonPropertyName("format")]
  public MappingFormatSchema? Format { get; set; }

  /// <summary>
  /// Initializes a new instance of the MappingInput class.
  /// </summary>
  [JsonConstructor]
  public MappingInput() { }

  /// <summary>
  /// Initializes a new instance of the MappingInput class.
  /// </summary>
  /// <param name="format">format (required).</param>
  /// <param name="actions">actions (required).</param>
  public MappingInput(MappingFormatSchema? format, List<MappingKitAction> actions)
  {
    Format = format;
    Actions = actions ?? throw new ArgumentNullException(nameof(actions));
  }

  /// <summary>
  /// Gets or Sets Actions
  /// </summary>
  [JsonPropertyName("actions")]
  public List<MappingKitAction> Actions { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class MappingInput {\n");
    sb.Append("  Format: ").Append(Format).Append("\n");
    sb.Append("  Actions: ").Append(Actions).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not MappingInput input)
    {
      return false;
    }

    return (Format == input.Format || Format.Equals(input.Format))
      && (
        Actions == input.Actions
        || Actions != null && input.Actions != null && Actions.SequenceEqual(input.Actions)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + Format.GetHashCode();
      if (Actions != null)
      {
        hashCode = (hashCode * 59) + Actions.GetHashCode();
      }
      return hashCode;
    }
  }
}
