//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// SourceGA4BigQueryExport
/// </summary>
public partial class SourceGA4BigQueryExport
{
  /// <summary>
  /// Initializes a new instance of the SourceGA4BigQueryExport class.
  /// </summary>
  [JsonConstructor]
  public SourceGA4BigQueryExport() { }

  /// <summary>
  /// Initializes a new instance of the SourceGA4BigQueryExport class.
  /// </summary>
  /// <param name="projectID">GCP project ID that the BigQuery export writes to. (required).</param>
  /// <param name="datasetID">BigQuery dataset ID that the BigQuery export writes to. (required).</param>
  /// <param name="tablePrefix">Prefix of the tables that the BigQuery Export writes to. (required).</param>
  public SourceGA4BigQueryExport(string projectID, string datasetID, string tablePrefix)
  {
    ProjectID = projectID ?? throw new ArgumentNullException(nameof(projectID));
    DatasetID = datasetID ?? throw new ArgumentNullException(nameof(datasetID));
    TablePrefix = tablePrefix ?? throw new ArgumentNullException(nameof(tablePrefix));
  }

  /// <summary>
  /// GCP project ID that the BigQuery export writes to.
  /// </summary>
  /// <value>GCP project ID that the BigQuery export writes to.</value>
  [JsonPropertyName("projectID")]
  public string ProjectID { get; set; }

  /// <summary>
  /// BigQuery dataset ID that the BigQuery export writes to.
  /// </summary>
  /// <value>BigQuery dataset ID that the BigQuery export writes to.</value>
  [JsonPropertyName("datasetID")]
  public string DatasetID { get; set; }

  /// <summary>
  /// Prefix of the tables that the BigQuery Export writes to.
  /// </summary>
  /// <value>Prefix of the tables that the BigQuery Export writes to.</value>
  [JsonPropertyName("tablePrefix")]
  public string TablePrefix { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SourceGA4BigQueryExport {\n");
    sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
    sb.Append("  DatasetID: ").Append(DatasetID).Append("\n");
    sb.Append("  TablePrefix: ").Append(TablePrefix).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SourceGA4BigQueryExport input)
    {
      return false;
    }

    return (
        ProjectID == input.ProjectID || (ProjectID != null && ProjectID.Equals(input.ProjectID))
      )
      && (DatasetID == input.DatasetID || (DatasetID != null && DatasetID.Equals(input.DatasetID)))
      && (
        TablePrefix == input.TablePrefix
        || (TablePrefix != null && TablePrefix.Equals(input.TablePrefix))
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ProjectID != null)
      {
        hashCode = (hashCode * 59) + ProjectID.GetHashCode();
      }
      if (DatasetID != null)
      {
        hashCode = (hashCode * 59) + DatasetID.GetHashCode();
      }
      if (TablePrefix != null)
      {
        hashCode = (hashCode * 59) + TablePrefix.GetHashCode();
      }
      return hashCode;
    }
  }
}
