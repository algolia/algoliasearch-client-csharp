//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;
using System.IO;
using System.Reflection;
using Algolia.Search.Models.Common;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// SourceInput
/// </summary>
[JsonConverter(typeof(SourceInputJsonConverter))]
public partial class SourceInput : AbstractSchema
{
  /// <summary>
  /// Initializes a new instance of the SourceInput class
  /// with a SourceGA4BigQueryExport
  /// </summary>
  /// <param name="actualInstance">An instance of SourceGA4BigQueryExport.</param>
  public SourceInput(SourceGA4BigQueryExport actualInstance)
  {
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceInput class
  /// with a SourceDocker
  /// </summary>
  /// <param name="actualInstance">An instance of SourceDocker.</param>
  public SourceInput(SourceDocker actualInstance)
  {
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceInput class
  /// with a SourceCommercetools
  /// </summary>
  /// <param name="actualInstance">An instance of SourceCommercetools.</param>
  public SourceInput(SourceCommercetools actualInstance)
  {
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceInput class
  /// with a SourceBigCommerce
  /// </summary>
  /// <param name="actualInstance">An instance of SourceBigCommerce.</param>
  public SourceInput(SourceBigCommerce actualInstance)
  {
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceInput class
  /// with a SourceBigQuery
  /// </summary>
  /// <param name="actualInstance">An instance of SourceBigQuery.</param>
  public SourceInput(SourceBigQuery actualInstance)
  {
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceInput class
  /// with a SourceShopify
  /// </summary>
  /// <param name="actualInstance">An instance of SourceShopify.</param>
  public SourceInput(SourceShopify actualInstance)
  {
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceInput class
  /// with a SourceJSON
  /// </summary>
  /// <param name="actualInstance">An instance of SourceJSON.</param>
  public SourceInput(SourceJSON actualInstance)
  {
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceInput class
  /// with a SourceCSV
  /// </summary>
  /// <param name="actualInstance">An instance of SourceCSV.</param>
  public SourceInput(SourceCSV actualInstance)
  {
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }


  /// <summary>
  /// Gets or Sets ActualInstance
  /// </summary>
  public sealed override object ActualInstance { get; set; }

  /// <summary>
  /// Get the actual instance of `SourceGA4BigQueryExport`. If the actual instance is not `SourceGA4BigQueryExport`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceGA4BigQueryExport</returns>
  public SourceGA4BigQueryExport AsSourceGA4BigQueryExport()
  {
    return (SourceGA4BigQueryExport)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceDocker`. If the actual instance is not `SourceDocker`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceDocker</returns>
  public SourceDocker AsSourceDocker()
  {
    return (SourceDocker)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceCommercetools`. If the actual instance is not `SourceCommercetools`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceCommercetools</returns>
  public SourceCommercetools AsSourceCommercetools()
  {
    return (SourceCommercetools)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceBigCommerce`. If the actual instance is not `SourceBigCommerce`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceBigCommerce</returns>
  public SourceBigCommerce AsSourceBigCommerce()
  {
    return (SourceBigCommerce)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceBigQuery`. If the actual instance is not `SourceBigQuery`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceBigQuery</returns>
  public SourceBigQuery AsSourceBigQuery()
  {
    return (SourceBigQuery)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceShopify`. If the actual instance is not `SourceShopify`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceShopify</returns>
  public SourceShopify AsSourceShopify()
  {
    return (SourceShopify)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceJSON`. If the actual instance is not `SourceJSON`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceJSON</returns>
  public SourceJSON AsSourceJSON()
  {
    return (SourceJSON)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceCSV`. If the actual instance is not `SourceCSV`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceCSV</returns>
  public SourceCSV AsSourceCSV()
  {
    return (SourceCSV)ActualInstance;
  }


  /// <summary>
  /// Check if the actual instance is of `SourceGA4BigQueryExport` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceGA4BigQueryExport()
  {
    return ActualInstance.GetType() == typeof(SourceGA4BigQueryExport);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceDocker` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceDocker()
  {
    return ActualInstance.GetType() == typeof(SourceDocker);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceCommercetools` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceCommercetools()
  {
    return ActualInstance.GetType() == typeof(SourceCommercetools);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceBigCommerce` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceBigCommerce()
  {
    return ActualInstance.GetType() == typeof(SourceBigCommerce);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceBigQuery` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceBigQuery()
  {
    return ActualInstance.GetType() == typeof(SourceBigQuery);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceShopify` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceShopify()
  {
    return ActualInstance.GetType() == typeof(SourceShopify);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceJSON` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceJSON()
  {
    return ActualInstance.GetType() == typeof(SourceJSON);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceCSV` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceCSV()
  {
    return ActualInstance.GetType() == typeof(SourceCSV);
  }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    var sb = new StringBuilder();
    sb.Append("class SourceInput {\n");
    sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public override string ToJson()
  {
    return JsonSerializer.Serialize(ActualInstance, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SourceInput input)
    {
      return false;
    }

    return ActualInstance.Equals(input.ActualInstance);
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ActualInstance != null)
        hashCode = hashCode * 59 + ActualInstance.GetHashCode();
      return hashCode;
    }
  }
}





/// <summary>
/// Custom JSON converter for SourceInput
/// </summary>
public class SourceInputJsonConverter : JsonConverter<SourceInput>
{

  /// <summary>
  /// Check if the object can be converted
  /// </summary>
  /// <param name="objectType">Object type</param>
  /// <returns>True if the object can be converted</returns>
  public override bool CanConvert(Type objectType)
  {
    return objectType == typeof(SourceInput);
  }

  /// <summary>
  /// To convert a JSON string into an object
  /// </summary>
  /// <param name="reader">JSON reader</param>
  /// <param name="typeToConvert">Object type</param>
  /// <param name="options">Serializer options</param>
  /// <returns>The object converted from the JSON string</returns>
  public override SourceInput Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
  {
    var jsonDocument = JsonDocument.ParseValue(ref reader);
    var root = jsonDocument.RootElement;
    if (root.ValueKind == JsonValueKind.Object && root.TryGetProperty("projectID", out _) && root.TryGetProperty("datasetID", out _) && root.TryGetProperty("tablePrefix", out _))
    {
      try
      {
        return new SourceInput(jsonDocument.Deserialize<SourceGA4BigQueryExport>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into SourceGA4BigQueryExport: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object && root.TryGetProperty("image", out _) && root.TryGetProperty("configuration", out _))
    {
      try
      {
        return new SourceInput(jsonDocument.Deserialize<SourceDocker>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into SourceDocker: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object && root.TryGetProperty("projectKey", out _))
    {
      try
      {
        return new SourceInput(jsonDocument.Deserialize<SourceCommercetools>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into SourceCommercetools: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object && root.TryGetProperty("storeHash", out _))
    {
      try
      {
        return new SourceInput(jsonDocument.Deserialize<SourceBigCommerce>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into SourceBigCommerce: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object && root.TryGetProperty("projectID", out _))
    {
      try
      {
        return new SourceInput(jsonDocument.Deserialize<SourceBigQuery>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into SourceBigQuery: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object && root.TryGetProperty("shopURL", out _))
    {
      try
      {
        return new SourceInput(jsonDocument.Deserialize<SourceShopify>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into SourceShopify: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new SourceInput(jsonDocument.Deserialize<SourceJSON>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into SourceJSON: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new SourceInput(jsonDocument.Deserialize<SourceCSV>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into SourceCSV: {exception}");
      }
    }
    throw new InvalidDataException($"The JSON string cannot be deserialized into any schema defined.");
  }

  /// <summary>
  /// To write the JSON string
  /// </summary>
  /// <param name="writer">JSON writer</param>
  /// <param name="value">SourceInput to be converted into a JSON string</param>
  /// <param name="options">JSON Serializer options</param>
  public override void Write(Utf8JsonWriter writer, SourceInput value, JsonSerializerOptions options)
  {
    writer.WriteRawValue(value.ToJson());
  }
}

