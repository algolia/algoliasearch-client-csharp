//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// RunSourcePayload
/// </summary>
public partial class RunSourcePayload
{
  /// <summary>
  /// Gets or Sets EntityType
  /// </summary>
  [JsonPropertyName("entityType")]
  public EntityType? EntityType { get; set; }

  /// <summary>
  /// Initializes a new instance of the RunSourcePayload class.
  /// </summary>
  public RunSourcePayload() { }

  /// <summary>
  /// List of index names to include in reindex/update.
  /// </summary>
  /// <value>List of index names to include in reindex/update.</value>
  [JsonPropertyName("indexToInclude")]
  public List<string> IndexToInclude { get; set; }

  /// <summary>
  /// List of index names to exclude in reindex/update.
  /// </summary>
  /// <value>List of index names to exclude in reindex/update.</value>
  [JsonPropertyName("indexToExclude")]
  public List<string> IndexToExclude { get; set; }

  /// <summary>
  /// List of entityIDs to update.
  /// </summary>
  /// <value>List of entityIDs to update.</value>
  [JsonPropertyName("entityIDs")]
  public List<string> EntityIDs { get; set; }

  /// <summary>
  /// Additional information that will be passed to the created runs.
  /// </summary>
  /// <value>Additional information that will be passed to the created runs.</value>
  [JsonPropertyName("runMetadata")]
  public Dictionary<string, object> RunMetadata { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class RunSourcePayload {\n");
    sb.Append("  IndexToInclude: ").Append(IndexToInclude).Append("\n");
    sb.Append("  IndexToExclude: ").Append(IndexToExclude).Append("\n");
    sb.Append("  EntityIDs: ").Append(EntityIDs).Append("\n");
    sb.Append("  EntityType: ").Append(EntityType).Append("\n");
    sb.Append("  RunMetadata: ").Append(RunMetadata).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not RunSourcePayload input)
    {
      return false;
    }

    return (
        IndexToInclude == input.IndexToInclude
        || IndexToInclude != null
          && input.IndexToInclude != null
          && IndexToInclude.SequenceEqual(input.IndexToInclude)
      )
      && (
        IndexToExclude == input.IndexToExclude
        || IndexToExclude != null
          && input.IndexToExclude != null
          && IndexToExclude.SequenceEqual(input.IndexToExclude)
      )
      && (
        EntityIDs == input.EntityIDs
        || EntityIDs != null && input.EntityIDs != null && EntityIDs.SequenceEqual(input.EntityIDs)
      )
      && (EntityType == input.EntityType || EntityType.Equals(input.EntityType))
      && (
        RunMetadata == input.RunMetadata
        || RunMetadata != null
          && input.RunMetadata != null
          && RunMetadata.SequenceEqual(input.RunMetadata)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (IndexToInclude != null)
      {
        hashCode = (hashCode * 59) + IndexToInclude.GetHashCode();
      }
      if (IndexToExclude != null)
      {
        hashCode = (hashCode * 59) + IndexToExclude.GetHashCode();
      }
      if (EntityIDs != null)
      {
        hashCode = (hashCode * 59) + EntityIDs.GetHashCode();
      }
      hashCode = (hashCode * 59) + EntityType.GetHashCode();
      if (RunMetadata != null)
      {
        hashCode = (hashCode * 59) + RunMetadata.GetHashCode();
      }
      return hashCode;
    }
  }
}
