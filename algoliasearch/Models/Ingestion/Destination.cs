//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// Destinations are Algolia resources like indices or event streams.
/// </summary>
public partial class Destination
{

  /// <summary>
  /// Gets or Sets Type
  /// </summary>
  [JsonPropertyName("type")]
  public DestinationType? Type { get; set; }
  /// <summary>
  /// Initializes a new instance of the Destination class.
  /// </summary>
  [JsonConstructor]
  public Destination() { }
  /// <summary>
  /// Initializes a new instance of the Destination class.
  /// </summary>
  /// <param name="destinationID">Universally unique identifier (UUID) of a destination resource. (required).</param>
  /// <param name="type">type (required).</param>
  /// <param name="name">Descriptive name for the resource. (required).</param>
  /// <param name="input">input (required).</param>
  /// <param name="createdAt">Date of creation in RFC 3339 format. (required).</param>
  public Destination(string destinationID, DestinationType? type, string name, DestinationInput input, string createdAt)
  {
    DestinationID = destinationID ?? throw new ArgumentNullException(nameof(destinationID));
    Type = type;
    Name = name ?? throw new ArgumentNullException(nameof(name));
    Input = input ?? throw new ArgumentNullException(nameof(input));
    CreatedAt = createdAt ?? throw new ArgumentNullException(nameof(createdAt));
  }

  /// <summary>
  /// Universally unique identifier (UUID) of a destination resource.
  /// </summary>
  /// <value>Universally unique identifier (UUID) of a destination resource.</value>
  [JsonPropertyName("destinationID")]
  public string DestinationID { get; set; }

  /// <summary>
  /// Descriptive name for the resource.
  /// </summary>
  /// <value>Descriptive name for the resource.</value>
  [JsonPropertyName("name")]
  public string Name { get; set; }

  /// <summary>
  /// Owner of the resource.
  /// </summary>
  /// <value>Owner of the resource.</value>
  [JsonPropertyName("owner")]
  public string Owner { get; set; }

  /// <summary>
  /// Gets or Sets Input
  /// </summary>
  [JsonPropertyName("input")]
  public DestinationInput Input { get; set; }

  /// <summary>
  /// Date of creation in RFC 3339 format.
  /// </summary>
  /// <value>Date of creation in RFC 3339 format.</value>
  [JsonPropertyName("createdAt")]
  public string CreatedAt { get; set; }

  /// <summary>
  /// Date of last update in RFC 3339 format.
  /// </summary>
  /// <value>Date of last update in RFC 3339 format.</value>
  [JsonPropertyName("updatedAt")]
  public string UpdatedAt { get; set; }

  /// <summary>
  /// Universally unique identifier (UUID) of an authentication resource.
  /// </summary>
  /// <value>Universally unique identifier (UUID) of an authentication resource.</value>
  [JsonPropertyName("authenticationID")]
  public string AuthenticationID { get; set; }

  /// <summary>
  /// Gets or Sets TransformationIDs
  /// </summary>
  [JsonPropertyName("transformationIDs")]
  public List<string> TransformationIDs { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Destination {\n");
    sb.Append("  DestinationID: ").Append(DestinationID).Append("\n");
    sb.Append("  Type: ").Append(Type).Append("\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  Owner: ").Append(Owner).Append("\n");
    sb.Append("  Input: ").Append(Input).Append("\n");
    sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
    sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
    sb.Append("  AuthenticationID: ").Append(AuthenticationID).Append("\n");
    sb.Append("  TransformationIDs: ").Append(TransformationIDs).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Destination input)
    {
      return false;
    }

    return
        (DestinationID == input.DestinationID || (DestinationID != null && DestinationID.Equals(input.DestinationID))) &&
        (Type == input.Type || Type.Equals(input.Type)) &&
        (Name == input.Name || (Name != null && Name.Equals(input.Name))) &&
        (Owner == input.Owner || (Owner != null && Owner.Equals(input.Owner))) &&
        (Input == input.Input || (Input != null && Input.Equals(input.Input))) &&
        (CreatedAt == input.CreatedAt || (CreatedAt != null && CreatedAt.Equals(input.CreatedAt))) &&
        (UpdatedAt == input.UpdatedAt || (UpdatedAt != null && UpdatedAt.Equals(input.UpdatedAt))) &&
        (AuthenticationID == input.AuthenticationID || (AuthenticationID != null && AuthenticationID.Equals(input.AuthenticationID))) &&
        (TransformationIDs == input.TransformationIDs || TransformationIDs != null && input.TransformationIDs != null && TransformationIDs.SequenceEqual(input.TransformationIDs));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (DestinationID != null)
      {
        hashCode = (hashCode * 59) + DestinationID.GetHashCode();
      }
      hashCode = (hashCode * 59) + Type.GetHashCode();
      if (Name != null)
      {
        hashCode = (hashCode * 59) + Name.GetHashCode();
      }
      if (Owner != null)
      {
        hashCode = (hashCode * 59) + Owner.GetHashCode();
      }
      if (Input != null)
      {
        hashCode = (hashCode * 59) + Input.GetHashCode();
      }
      if (CreatedAt != null)
      {
        hashCode = (hashCode * 59) + CreatedAt.GetHashCode();
      }
      if (UpdatedAt != null)
      {
        hashCode = (hashCode * 59) + UpdatedAt.GetHashCode();
      }
      if (AuthenticationID != null)
      {
        hashCode = (hashCode * 59) + AuthenticationID.GetHashCode();
      }
      if (TransformationIDs != null)
      {
        hashCode = (hashCode * 59) + TransformationIDs.GetHashCode();
      }
      return hashCode;
    }
  }

}

