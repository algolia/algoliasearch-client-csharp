//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// Transformation
/// </summary>
public partial class Transformation
{
  /// <summary>
  /// Initializes a new instance of the Transformation class.
  /// </summary>
  [JsonConstructor]
  public Transformation() { }
  /// <summary>
  /// Initializes a new instance of the Transformation class.
  /// </summary>
  /// <param name="transformationID">Universally unique identifier (UUID) of a transformation. (required).</param>
  /// <param name="code">The source code of the transformation. (required).</param>
  /// <param name="name">The uniquely identified name of your transformation. (required).</param>
  /// <param name="createdAt">Date of creation in RFC 3339 format. (required).</param>
  public Transformation(string transformationID, string code, string name, string createdAt)
  {
    TransformationID = transformationID ?? throw new ArgumentNullException(nameof(transformationID));
    Code = code ?? throw new ArgumentNullException(nameof(code));
    Name = name ?? throw new ArgumentNullException(nameof(name));
    CreatedAt = createdAt ?? throw new ArgumentNullException(nameof(createdAt));
  }

  /// <summary>
  /// Universally unique identifier (UUID) of a transformation.
  /// </summary>
  /// <value>Universally unique identifier (UUID) of a transformation.</value>
  [JsonPropertyName("transformationID")]
  public string TransformationID { get; set; }

  /// <summary>
  /// The authentications associated with the current transformation.
  /// </summary>
  /// <value>The authentications associated with the current transformation.</value>
  [JsonPropertyName("authenticationIDs")]
  public List<string> AuthenticationIDs { get; set; }

  /// <summary>
  /// The source code of the transformation.
  /// </summary>
  /// <value>The source code of the transformation.</value>
  [JsonPropertyName("code")]
  public string Code { get; set; }

  /// <summary>
  /// The uniquely identified name of your transformation.
  /// </summary>
  /// <value>The uniquely identified name of your transformation.</value>
  [JsonPropertyName("name")]
  public string Name { get; set; }

  /// <summary>
  /// A descriptive name for your transformation of what it does.
  /// </summary>
  /// <value>A descriptive name for your transformation of what it does.</value>
  [JsonPropertyName("description")]
  public string Description { get; set; }

  /// <summary>
  /// Owner of the resource.
  /// </summary>
  /// <value>Owner of the resource.</value>
  [JsonPropertyName("owner")]
  public string Owner { get; set; }

  /// <summary>
  /// Date of creation in RFC 3339 format.
  /// </summary>
  /// <value>Date of creation in RFC 3339 format.</value>
  [JsonPropertyName("createdAt")]
  public string CreatedAt { get; set; }

  /// <summary>
  /// Date of last update in RFC 3339 format.
  /// </summary>
  /// <value>Date of last update in RFC 3339 format.</value>
  [JsonPropertyName("updatedAt")]
  public string UpdatedAt { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Transformation {\n");
    sb.Append("  TransformationID: ").Append(TransformationID).Append("\n");
    sb.Append("  AuthenticationIDs: ").Append(AuthenticationIDs).Append("\n");
    sb.Append("  Code: ").Append(Code).Append("\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  Description: ").Append(Description).Append("\n");
    sb.Append("  Owner: ").Append(Owner).Append("\n");
    sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
    sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Transformation input)
    {
      return false;
    }

    return
        (TransformationID == input.TransformationID || (TransformationID != null && TransformationID.Equals(input.TransformationID))) &&
        (AuthenticationIDs == input.AuthenticationIDs || AuthenticationIDs != null && input.AuthenticationIDs != null && AuthenticationIDs.SequenceEqual(input.AuthenticationIDs)) &&
        (Code == input.Code || (Code != null && Code.Equals(input.Code))) &&
        (Name == input.Name || (Name != null && Name.Equals(input.Name))) &&
        (Description == input.Description || (Description != null && Description.Equals(input.Description))) &&
        (Owner == input.Owner || (Owner != null && Owner.Equals(input.Owner))) &&
        (CreatedAt == input.CreatedAt || (CreatedAt != null && CreatedAt.Equals(input.CreatedAt))) &&
        (UpdatedAt == input.UpdatedAt || (UpdatedAt != null && UpdatedAt.Equals(input.UpdatedAt)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (TransformationID != null)
      {
        hashCode = (hashCode * 59) + TransformationID.GetHashCode();
      }
      if (AuthenticationIDs != null)
      {
        hashCode = (hashCode * 59) + AuthenticationIDs.GetHashCode();
      }
      if (Code != null)
      {
        hashCode = (hashCode * 59) + Code.GetHashCode();
      }
      if (Name != null)
      {
        hashCode = (hashCode * 59) + Name.GetHashCode();
      }
      if (Description != null)
      {
        hashCode = (hashCode * 59) + Description.GetHashCode();
      }
      if (Owner != null)
      {
        hashCode = (hashCode * 59) + Owner.GetHashCode();
      }
      if (CreatedAt != null)
      {
        hashCode = (hashCode * 59) + CreatedAt.GetHashCode();
      }
      if (UpdatedAt != null)
      {
        hashCode = (hashCode * 59) + UpdatedAt.GetHashCode();
      }
      return hashCode;
    }
  }

}

