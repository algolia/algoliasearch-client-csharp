//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// SourceCommercetools
/// </summary>
public partial class SourceCommercetools
{
  /// <summary>
  /// Initializes a new instance of the SourceCommercetools class.
  /// </summary>
  [JsonConstructor]
  public SourceCommercetools() { }
  /// <summary>
  /// Initializes a new instance of the SourceCommercetools class.
  /// </summary>
  /// <param name="url">url (required).</param>
  /// <param name="projectKey">projectKey (required).</param>
  public SourceCommercetools(string url, string projectKey)
  {
    Url = url ?? throw new ArgumentNullException(nameof(url));
    ProjectKey = projectKey ?? throw new ArgumentNullException(nameof(projectKey));
  }

  /// <summary>
  /// Gets or Sets StoreKeys
  /// </summary>
  [JsonPropertyName("storeKeys")]
  public List<string> StoreKeys { get; set; }

  /// <summary>
  /// Locales for your commercetools stores.
  /// </summary>
  /// <value>Locales for your commercetools stores.</value>
  [JsonPropertyName("locales")]
  public List<string> Locales { get; set; }

  /// <summary>
  /// Gets or Sets Url
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }

  /// <summary>
  /// Gets or Sets ProjectKey
  /// </summary>
  [JsonPropertyName("projectKey")]
  public string ProjectKey { get; set; }

  /// <summary>
  /// Whether a fallback value is stored in the Algolia record if there's no inventory information about the product. 
  /// </summary>
  /// <value>Whether a fallback value is stored in the Algolia record if there's no inventory information about the product. </value>
  [JsonPropertyName("fallbackIsInStockValue")]
  public bool? FallbackIsInStockValue { get; set; }

  /// <summary>
  /// Predicate to filter out specific products when indexing. For more information, see [Query Predicate](https://docs.commercetools.com/api/predicates/query). 
  /// </summary>
  /// <value>Predicate to filter out specific products when indexing. For more information, see [Query Predicate](https://docs.commercetools.com/api/predicates/query). </value>
  [JsonPropertyName("productQueryPredicate")]
  public string ProductQueryPredicate { get; set; }

  /// <summary>
  /// Gets or Sets CustomFields
  /// </summary>
  [JsonPropertyName("customFields")]
  public CommercetoolsCustomFields CustomFields { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SourceCommercetools {\n");
    sb.Append("  StoreKeys: ").Append(StoreKeys).Append("\n");
    sb.Append("  Locales: ").Append(Locales).Append("\n");
    sb.Append("  Url: ").Append(Url).Append("\n");
    sb.Append("  ProjectKey: ").Append(ProjectKey).Append("\n");
    sb.Append("  FallbackIsInStockValue: ").Append(FallbackIsInStockValue).Append("\n");
    sb.Append("  ProductQueryPredicate: ").Append(ProductQueryPredicate).Append("\n");
    sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SourceCommercetools input)
    {
      return false;
    }

    return
        (StoreKeys == input.StoreKeys || StoreKeys != null && input.StoreKeys != null && StoreKeys.SequenceEqual(input.StoreKeys)) &&
        (Locales == input.Locales || Locales != null && input.Locales != null && Locales.SequenceEqual(input.Locales)) &&
        (Url == input.Url || (Url != null && Url.Equals(input.Url))) &&
        (ProjectKey == input.ProjectKey || (ProjectKey != null && ProjectKey.Equals(input.ProjectKey))) &&
        (FallbackIsInStockValue == input.FallbackIsInStockValue || FallbackIsInStockValue.Equals(input.FallbackIsInStockValue)) &&
        (ProductQueryPredicate == input.ProductQueryPredicate || (ProductQueryPredicate != null && ProductQueryPredicate.Equals(input.ProductQueryPredicate))) &&
        (CustomFields == input.CustomFields || (CustomFields != null && CustomFields.Equals(input.CustomFields)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (StoreKeys != null)
      {
        hashCode = (hashCode * 59) + StoreKeys.GetHashCode();
      }
      if (Locales != null)
      {
        hashCode = (hashCode * 59) + Locales.GetHashCode();
      }
      if (Url != null)
      {
        hashCode = (hashCode * 59) + Url.GetHashCode();
      }
      if (ProjectKey != null)
      {
        hashCode = (hashCode * 59) + ProjectKey.GetHashCode();
      }
      hashCode = (hashCode * 59) + FallbackIsInStockValue.GetHashCode();
      if (ProductQueryPredicate != null)
      {
        hashCode = (hashCode * 59) + ProductQueryPredicate.GetHashCode();
      }
      if (CustomFields != null)
      {
        hashCode = (hashCode * 59) + CustomFields.GetHashCode();
      }
      return hashCode;
    }
  }

}

