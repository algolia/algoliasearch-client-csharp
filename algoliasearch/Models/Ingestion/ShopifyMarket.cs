//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// Represents a market in Shopify.
/// </summary>
public partial class ShopifyMarket
{
  /// <summary>
  /// Initializes a new instance of the ShopifyMarket class.
  /// </summary>
  [JsonConstructor]
  public ShopifyMarket() { }

  /// <summary>
  /// Initializes a new instance of the ShopifyMarket class.
  /// </summary>
  /// <param name="countries">countries (required).</param>
  /// <param name="currencies">currencies (required).</param>
  /// <param name="locales">locales (required).</param>
  public ShopifyMarket(List<string> countries, List<string> currencies, List<string> locales)
  {
    Countries = countries ?? throw new ArgumentNullException(nameof(countries));
    Currencies = currencies ?? throw new ArgumentNullException(nameof(currencies));
    Locales = locales ?? throw new ArgumentNullException(nameof(locales));
  }

  /// <summary>
  /// Gets or Sets Countries
  /// </summary>
  [JsonPropertyName("countries")]
  public List<string> Countries { get; set; }

  /// <summary>
  /// Gets or Sets Currencies
  /// </summary>
  [JsonPropertyName("currencies")]
  public List<string> Currencies { get; set; }

  /// <summary>
  /// Gets or Sets Locales
  /// </summary>
  [JsonPropertyName("locales")]
  public List<string> Locales { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class ShopifyMarket {\n");
    sb.Append("  Countries: ").Append(Countries).Append("\n");
    sb.Append("  Currencies: ").Append(Currencies).Append("\n");
    sb.Append("  Locales: ").Append(Locales).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not ShopifyMarket input)
    {
      return false;
    }

    return (
        Countries == input.Countries
        || Countries != null && input.Countries != null && Countries.SequenceEqual(input.Countries)
      )
      && (
        Currencies == input.Currencies
        || Currencies != null
          && input.Currencies != null
          && Currencies.SequenceEqual(input.Currencies)
      )
      && (
        Locales == input.Locales
        || Locales != null && input.Locales != null && Locales.SequenceEqual(input.Locales)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Countries != null)
      {
        hashCode = (hashCode * 59) + Countries.GetHashCode();
      }
      if (Currencies != null)
      {
        hashCode = (hashCode * 59) + Currencies.GetHashCode();
      }
      if (Locales != null)
      {
        hashCode = (hashCode * 59) + Locales.GetHashCode();
      }
      return hashCode;
    }
  }
}
