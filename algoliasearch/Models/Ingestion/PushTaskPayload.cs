//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// PushTaskPayload
/// </summary>
public partial class PushTaskPayload
{
  /// <summary>
  /// Gets or Sets Action
  /// </summary>
  [JsonPropertyName("action")]
  public Action? Action { get; set; }

  /// <summary>
  /// Initializes a new instance of the PushTaskPayload class.
  /// </summary>
  [JsonConstructor]
  public PushTaskPayload() { }

  /// <summary>
  /// Initializes a new instance of the PushTaskPayload class.
  /// </summary>
  /// <param name="action">action (required).</param>
  /// <param name="records">records (required).</param>
  public PushTaskPayload(Action? action, List<PushTaskRecords> records)
  {
    Action = action;
    Records = records ?? throw new ArgumentNullException(nameof(records));
  }

  /// <summary>
  /// Gets or Sets Records
  /// </summary>
  [JsonPropertyName("records")]
  public List<PushTaskRecords> Records { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class PushTaskPayload {\n");
    sb.Append("  Action: ").Append(Action).Append("\n");
    sb.Append("  Records: ").Append(Records).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not PushTaskPayload input)
    {
      return false;
    }

    return (Action == input.Action || Action.Equals(input.Action))
      && (
        Records == input.Records
        || Records != null && input.Records != null && Records.SequenceEqual(input.Records)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + Action.GetHashCode();
      if (Records != null)
      {
        hashCode = (hashCode * 59) + Records.GetHashCode();
      }
      return hashCode;
    }
  }
}
