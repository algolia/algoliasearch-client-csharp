//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// API request body for creating a transformation.
/// </summary>
public partial class TransformationCreate
{
  /// <summary>
  /// Gets or Sets Type
  /// </summary>
  [JsonPropertyName("type")]
  public TransformationType? Type { get; set; }

  /// <summary>
  /// Initializes a new instance of the TransformationCreate class.
  /// </summary>
  [JsonConstructor]
  public TransformationCreate() { }

  /// <summary>
  /// Initializes a new instance of the TransformationCreate class.
  /// </summary>
  /// <param name="name">The uniquely identified name of your transformation. (required).</param>
  public TransformationCreate(string name)
  {
    Name = name ?? throw new ArgumentNullException(nameof(name));
  }

  /// <summary>
  /// It is deprecated. Use the `input` field with proper `type` instead to specify the transformation code.
  /// </summary>
  /// <value>It is deprecated. Use the `input` field with proper `type` instead to specify the transformation code.</value>
  [JsonPropertyName("code")]
  [Obsolete]
  public string Code { get; set; }

  /// <summary>
  /// The uniquely identified name of your transformation.
  /// </summary>
  /// <value>The uniquely identified name of your transformation.</value>
  [JsonPropertyName("name")]
  public string Name { get; set; }

  /// <summary>
  /// Gets or Sets Input
  /// </summary>
  [JsonPropertyName("input")]
  public TransformationInput Input { get; set; }

  /// <summary>
  /// A descriptive name for your transformation of what it does.
  /// </summary>
  /// <value>A descriptive name for your transformation of what it does.</value>
  [JsonPropertyName("description")]
  public string Description { get; set; }

  /// <summary>
  /// The authentications associated with the current transformation.
  /// </summary>
  /// <value>The authentications associated with the current transformation.</value>
  [JsonPropertyName("authenticationIDs")]
  public List<string> AuthenticationIDs { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class TransformationCreate {\n");
    sb.Append("  Code: ").Append(Code).Append("\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  Type: ").Append(Type).Append("\n");
    sb.Append("  Input: ").Append(Input).Append("\n");
    sb.Append("  Description: ").Append(Description).Append("\n");
    sb.Append("  AuthenticationIDs: ").Append(AuthenticationIDs).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not TransformationCreate input)
    {
      return false;
    }

    return (Code == input.Code || (Code != null && Code.Equals(input.Code)))
      && (Name == input.Name || (Name != null && Name.Equals(input.Name)))
      && (Type == input.Type || Type.Equals(input.Type))
      && (Input == input.Input || (Input != null && Input.Equals(input.Input)))
      && (
        Description == input.Description
        || (Description != null && Description.Equals(input.Description))
      )
      && (
        AuthenticationIDs == input.AuthenticationIDs
        || AuthenticationIDs != null
          && input.AuthenticationIDs != null
          && AuthenticationIDs.SequenceEqual(input.AuthenticationIDs)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Code != null)
      {
        hashCode = (hashCode * 59) + Code.GetHashCode();
      }
      if (Name != null)
      {
        hashCode = (hashCode * 59) + Name.GetHashCode();
      }
      hashCode = (hashCode * 59) + Type.GetHashCode();
      if (Input != null)
      {
        hashCode = (hashCode * 59) + Input.GetHashCode();
      }
      if (Description != null)
      {
        hashCode = (hashCode * 59) + Description.GetHashCode();
      }
      if (AuthenticationIDs != null)
      {
        hashCode = (hashCode * 59) + AuthenticationIDs.GetHashCode();
      }
      return hashCode;
    }
  }
}
