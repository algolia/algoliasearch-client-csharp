//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// API request body for updating a task.
/// </summary>
public partial class TaskUpdate
{

  /// <summary>
  /// Gets or Sets SubscriptionAction
  /// </summary>
  [JsonPropertyName("subscriptionAction")]
  public ActionType? SubscriptionAction { get; set; }
  /// <summary>
  /// Initializes a new instance of the TaskUpdate class.
  /// </summary>
  public TaskUpdate()
  {
  }

  /// <summary>
  /// Universally unique identifier (UUID) of a destination resource.
  /// </summary>
  /// <value>Universally unique identifier (UUID) of a destination resource.</value>
  [JsonPropertyName("destinationID")]
  public string DestinationID { get; set; }

  /// <summary>
  /// Cron expression for the task's schedule.
  /// </summary>
  /// <value>Cron expression for the task's schedule.</value>
  [JsonPropertyName("cron")]
  public string Cron { get; set; }

  /// <summary>
  /// Gets or Sets Input
  /// </summary>
  [JsonPropertyName("input")]
  public TaskInput Input { get; set; }

  /// <summary>
  /// Whether the task is enabled.
  /// </summary>
  /// <value>Whether the task is enabled.</value>
  [JsonPropertyName("enabled")]
  public bool? Enabled { get; set; }

  /// <summary>
  /// Maximum accepted percentage of failures for a task run to finish successfully.
  /// </summary>
  /// <value>Maximum accepted percentage of failures for a task run to finish successfully.</value>
  [JsonPropertyName("failureThreshold")]
  public int? FailureThreshold { get; set; }

  /// <summary>
  /// Gets or Sets Notifications
  /// </summary>
  [JsonPropertyName("notifications")]
  public Notifications Notifications { get; set; }

  /// <summary>
  /// Gets or Sets Policies
  /// </summary>
  [JsonPropertyName("policies")]
  public Policies Policies { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class TaskUpdate {\n");
    sb.Append("  DestinationID: ").Append(DestinationID).Append("\n");
    sb.Append("  Cron: ").Append(Cron).Append("\n");
    sb.Append("  Input: ").Append(Input).Append("\n");
    sb.Append("  Enabled: ").Append(Enabled).Append("\n");
    sb.Append("  SubscriptionAction: ").Append(SubscriptionAction).Append("\n");
    sb.Append("  FailureThreshold: ").Append(FailureThreshold).Append("\n");
    sb.Append("  Notifications: ").Append(Notifications).Append("\n");
    sb.Append("  Policies: ").Append(Policies).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not TaskUpdate input)
    {
      return false;
    }

    return
        (DestinationID == input.DestinationID || (DestinationID != null && DestinationID.Equals(input.DestinationID))) &&
        (Cron == input.Cron || (Cron != null && Cron.Equals(input.Cron))) &&
        (Input == input.Input || (Input != null && Input.Equals(input.Input))) &&
        (Enabled == input.Enabled || Enabled.Equals(input.Enabled)) &&
        (SubscriptionAction == input.SubscriptionAction || SubscriptionAction.Equals(input.SubscriptionAction)) &&
        (FailureThreshold == input.FailureThreshold || FailureThreshold.Equals(input.FailureThreshold)) &&
        (Notifications == input.Notifications || (Notifications != null && Notifications.Equals(input.Notifications))) &&
        (Policies == input.Policies || (Policies != null && Policies.Equals(input.Policies)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (DestinationID != null)
      {
        hashCode = (hashCode * 59) + DestinationID.GetHashCode();
      }
      if (Cron != null)
      {
        hashCode = (hashCode * 59) + Cron.GetHashCode();
      }
      if (Input != null)
      {
        hashCode = (hashCode * 59) + Input.GetHashCode();
      }
      hashCode = (hashCode * 59) + Enabled.GetHashCode();
      hashCode = (hashCode * 59) + SubscriptionAction.GetHashCode();
      hashCode = (hashCode * 59) + FailureThreshold.GetHashCode();
      if (Notifications != null)
      {
        hashCode = (hashCode * 59) + Notifications.GetHashCode();
      }
      if (Policies != null)
      {
        hashCode = (hashCode * 59) + Policies.GetHashCode();
      }
      return hashCode;
    }
  }

}

