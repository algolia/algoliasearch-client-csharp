//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// TransformationTry
/// </summary>
public partial class TransformationTry
{
  /// <summary>
  /// Initializes a new instance of the TransformationTry class.
  /// </summary>
  [JsonConstructor]
  public TransformationTry() { }

  /// <summary>
  /// Initializes a new instance of the TransformationTry class.
  /// </summary>
  /// <param name="code">It is deprecated. Use the `input` field with proper `type` instead to specify the transformation code. (required).</param>
  /// <param name="sampleRecord">The record to apply the given code to. (required).</param>
  public TransformationTry(string code, object sampleRecord)
  {
    Code = code ?? throw new ArgumentNullException(nameof(code));
    SampleRecord = sampleRecord ?? throw new ArgumentNullException(nameof(sampleRecord));
  }

  /// <summary>
  /// It is deprecated. Use the `input` field with proper `type` instead to specify the transformation code.
  /// </summary>
  /// <value>It is deprecated. Use the `input` field with proper `type` instead to specify the transformation code.</value>
  [JsonPropertyName("code")]
  [Obsolete]
  public string Code { get; set; }

  /// <summary>
  /// The record to apply the given code to.
  /// </summary>
  /// <value>The record to apply the given code to.</value>
  [JsonPropertyName("sampleRecord")]
  public object SampleRecord { get; set; }

  /// <summary>
  /// Gets or Sets Authentications
  /// </summary>
  [JsonPropertyName("authentications")]
  public List<AuthenticationCreate> Authentications { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class TransformationTry {\n");
    sb.Append("  Code: ").Append(Code).Append("\n");
    sb.Append("  SampleRecord: ").Append(SampleRecord).Append("\n");
    sb.Append("  Authentications: ").Append(Authentications).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not TransformationTry input)
    {
      return false;
    }

    return (Code == input.Code || (Code != null && Code.Equals(input.Code)))
      && (
        SampleRecord == input.SampleRecord
        || (SampleRecord != null && SampleRecord.Equals(input.SampleRecord))
      )
      && (
        Authentications == input.Authentications
        || Authentications != null
          && input.Authentications != null
          && Authentications.SequenceEqual(input.Authentications)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Code != null)
      {
        hashCode = (hashCode * 59) + Code.GetHashCode();
      }
      if (SampleRecord != null)
      {
        hashCode = (hashCode * 59) + SampleRecord.GetHashCode();
      }
      if (Authentications != null)
      {
        hashCode = (hashCode * 59) + Authentications.GetHashCode();
      }
      return hashCode;
    }
  }
}
