//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// SourceBigCommerce
/// </summary>
public partial class SourceBigCommerce
{
  /// <summary>
  /// Initializes a new instance of the SourceBigCommerce class.
  /// </summary>
  [JsonConstructor]
  public SourceBigCommerce() { }

  /// <summary>
  /// Initializes a new instance of the SourceBigCommerce class.
  /// </summary>
  /// <param name="storeHash">Store hash identifying your BigCommerce store. (required).</param>
  public SourceBigCommerce(string storeHash)
  {
    StoreHash = storeHash ?? throw new ArgumentNullException(nameof(storeHash));
  }

  /// <summary>
  /// Store hash identifying your BigCommerce store.
  /// </summary>
  /// <value>Store hash identifying your BigCommerce store.</value>
  [JsonPropertyName("storeHash")]
  public string StoreHash { get; set; }

  /// <summary>
  /// Gets or Sets Channel
  /// </summary>
  [JsonPropertyName("channel")]
  public BigCommerceChannel Channel { get; set; }

  /// <summary>
  /// Gets or Sets CustomFields
  /// </summary>
  [JsonPropertyName("customFields")]
  public List<string> CustomFields { get; set; }

  /// <summary>
  /// Gets or Sets ProductMetafields
  /// </summary>
  [JsonPropertyName("productMetafields")]
  public List<BigCommerceMetafield> ProductMetafields { get; set; }

  /// <summary>
  /// Gets or Sets VariantMetafields
  /// </summary>
  [JsonPropertyName("variantMetafields")]
  public List<BigCommerceMetafield> VariantMetafields { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SourceBigCommerce {\n");
    sb.Append("  StoreHash: ").Append(StoreHash).Append("\n");
    sb.Append("  Channel: ").Append(Channel).Append("\n");
    sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
    sb.Append("  ProductMetafields: ").Append(ProductMetafields).Append("\n");
    sb.Append("  VariantMetafields: ").Append(VariantMetafields).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SourceBigCommerce input)
    {
      return false;
    }

    return (
        StoreHash == input.StoreHash || (StoreHash != null && StoreHash.Equals(input.StoreHash))
      )
      && (Channel == input.Channel || (Channel != null && Channel.Equals(input.Channel)))
      && (
        CustomFields == input.CustomFields
        || CustomFields != null
          && input.CustomFields != null
          && CustomFields.SequenceEqual(input.CustomFields)
      )
      && (
        ProductMetafields == input.ProductMetafields
        || ProductMetafields != null
          && input.ProductMetafields != null
          && ProductMetafields.SequenceEqual(input.ProductMetafields)
      )
      && (
        VariantMetafields == input.VariantMetafields
        || VariantMetafields != null
          && input.VariantMetafields != null
          && VariantMetafields.SequenceEqual(input.VariantMetafields)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (StoreHash != null)
      {
        hashCode = (hashCode * 59) + StoreHash.GetHashCode();
      }
      if (Channel != null)
      {
        hashCode = (hashCode * 59) + Channel.GetHashCode();
      }
      if (CustomFields != null)
      {
        hashCode = (hashCode * 59) + CustomFields.GetHashCode();
      }
      if (ProductMetafields != null)
      {
        hashCode = (hashCode * 59) + ProductMetafields.GetHashCode();
      }
      if (VariantMetafields != null)
      {
        hashCode = (hashCode * 59) + VariantMetafields.GetHashCode();
      }
      return hashCode;
    }
  }
}
