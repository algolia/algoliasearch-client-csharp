//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Monitoring;

/// <summary>
/// Metrics
/// </summary>
public partial class Metrics
{
  /// <summary>
  /// Initializes a new instance of the Metrics class.
  /// </summary>
  public Metrics() { }

  /// <summary>
  /// CPU idleness in %.
  /// </summary>
  /// <value>CPU idleness in %.</value>
  [JsonPropertyName("cpu_usage")]
  public Dictionary<string, List<ProbesMetric>> CpuUsage { get; set; }

  /// <summary>
  /// RAM used for indexing in MB.
  /// </summary>
  /// <value>RAM used for indexing in MB.</value>
  [JsonPropertyName("ram_indexing_usage")]
  public Dictionary<string, List<ProbesMetric>> RamIndexingUsage { get; set; }

  /// <summary>
  /// RAM used for search in MB.
  /// </summary>
  /// <value>RAM used for search in MB.</value>
  [JsonPropertyName("ram_search_usage")]
  public Dictionary<string, List<ProbesMetric>> RamSearchUsage { get; set; }

  /// <summary>
  /// Solid-state disk (SSD) usage expressed as % of RAM.  0% means no SSD usage. A value of 50% indicates 32&nbsp;GB SSD usage for a machine with 64&nbsp;RAM.
  /// </summary>
  /// <value>Solid-state disk (SSD) usage expressed as % of RAM.  0% means no SSD usage. A value of 50% indicates 32&nbsp;GB SSD usage for a machine with 64&nbsp;RAM. </value>
  [JsonPropertyName("ssd_usage")]
  public Dictionary<string, List<ProbesMetric>> SsdUsage { get; set; }

  /// <summary>
  /// Average build time of the indices in seconds.
  /// </summary>
  /// <value>Average build time of the indices in seconds.</value>
  [JsonPropertyName("avg_build_time")]
  public Dictionary<string, List<ProbesMetric>> AvgBuildTime { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Metrics {\n");
    sb.Append("  CpuUsage: ").Append(CpuUsage).Append("\n");
    sb.Append("  RamIndexingUsage: ").Append(RamIndexingUsage).Append("\n");
    sb.Append("  RamSearchUsage: ").Append(RamSearchUsage).Append("\n");
    sb.Append("  SsdUsage: ").Append(SsdUsage).Append("\n");
    sb.Append("  AvgBuildTime: ").Append(AvgBuildTime).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Metrics input)
    {
      return false;
    }

    return (
        CpuUsage == input.CpuUsage
        || CpuUsage != null && input.CpuUsage != null && CpuUsage.SequenceEqual(input.CpuUsage)
      )
      && (
        RamIndexingUsage == input.RamIndexingUsage
        || RamIndexingUsage != null
          && input.RamIndexingUsage != null
          && RamIndexingUsage.SequenceEqual(input.RamIndexingUsage)
      )
      && (
        RamSearchUsage == input.RamSearchUsage
        || RamSearchUsage != null
          && input.RamSearchUsage != null
          && RamSearchUsage.SequenceEqual(input.RamSearchUsage)
      )
      && (
        SsdUsage == input.SsdUsage
        || SsdUsage != null && input.SsdUsage != null && SsdUsage.SequenceEqual(input.SsdUsage)
      )
      && (
        AvgBuildTime == input.AvgBuildTime
        || AvgBuildTime != null
          && input.AvgBuildTime != null
          && AvgBuildTime.SequenceEqual(input.AvgBuildTime)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (CpuUsage != null)
      {
        hashCode = (hashCode * 59) + CpuUsage.GetHashCode();
      }
      if (RamIndexingUsage != null)
      {
        hashCode = (hashCode * 59) + RamIndexingUsage.GetHashCode();
      }
      if (RamSearchUsage != null)
      {
        hashCode = (hashCode * 59) + RamSearchUsage.GetHashCode();
      }
      if (SsdUsage != null)
      {
        hashCode = (hashCode * 59) + SsdUsage.GetHashCode();
      }
      if (AvgBuildTime != null)
      {
        hashCode = (hashCode * 59) + AvgBuildTime.GetHashCode();
      }
      return hashCode;
    }
  }
}
