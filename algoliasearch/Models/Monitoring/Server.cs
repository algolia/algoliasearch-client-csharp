//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Monitoring;

/// <summary>
/// Server
/// </summary>
public partial class Server
{
  /// <summary>
  /// Gets or Sets Region
  /// </summary>
  [JsonPropertyName("region")]
  public Region? Region { get; set; }

  /// <summary>
  /// Gets or Sets Status
  /// </summary>
  [JsonPropertyName("status")]
  public ServerStatus? Status { get; set; }

  /// <summary>
  /// Gets or Sets Type
  /// </summary>
  [JsonPropertyName("type")]
  public Type? Type { get; set; }

  /// <summary>
  /// Initializes a new instance of the Server class.
  /// </summary>
  public Server() { }

  /// <summary>
  /// Server name.
  /// </summary>
  /// <value>Server name.</value>
  [JsonPropertyName("name")]
  public string Name { get; set; }

  /// <summary>
  /// Included to support legacy applications. Use `is_replica` instead.
  /// </summary>
  /// <value>Included to support legacy applications. Use `is_replica` instead. </value>
  [JsonPropertyName("is_slave")]
  [Obsolete]
  public bool? IsSlave { get; set; }

  /// <summary>
  /// Whether this server is a replica of another server.
  /// </summary>
  /// <value>Whether this server is a replica of another server.</value>
  [JsonPropertyName("is_replica")]
  public bool? IsReplica { get; set; }

  /// <summary>
  /// Name of the cluster to which this server belongs.
  /// </summary>
  /// <value>Name of the cluster to which this server belongs.</value>
  [JsonPropertyName("cluster")]
  public string Cluster { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Server {\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  Region: ").Append(Region).Append("\n");
    sb.Append("  IsSlave: ").Append(IsSlave).Append("\n");
    sb.Append("  IsReplica: ").Append(IsReplica).Append("\n");
    sb.Append("  Cluster: ").Append(Cluster).Append("\n");
    sb.Append("  Status: ").Append(Status).Append("\n");
    sb.Append("  Type: ").Append(Type).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Server input)
    {
      return false;
    }

    return (Name == input.Name || (Name != null && Name.Equals(input.Name)))
      && (Region == input.Region || Region.Equals(input.Region))
      && (IsSlave == input.IsSlave || IsSlave.Equals(input.IsSlave))
      && (IsReplica == input.IsReplica || IsReplica.Equals(input.IsReplica))
      && (Cluster == input.Cluster || (Cluster != null && Cluster.Equals(input.Cluster)))
      && (Status == input.Status || Status.Equals(input.Status))
      && (Type == input.Type || Type.Equals(input.Type));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Name != null)
      {
        hashCode = (hashCode * 59) + Name.GetHashCode();
      }
      hashCode = (hashCode * 59) + Region.GetHashCode();
      hashCode = (hashCode * 59) + IsSlave.GetHashCode();
      hashCode = (hashCode * 59) + IsReplica.GetHashCode();
      if (Cluster != null)
      {
        hashCode = (hashCode * 59) + Cluster.GetHashCode();
      }
      hashCode = (hashCode * 59) + Status.GetHashCode();
      hashCode = (hashCode * 59) + Type.GetHashCode();
      return hashCode;
    }
  }
}
