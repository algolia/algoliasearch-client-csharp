//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.QuerySuggestions;

/// <summary>
/// Query Suggestions configuration.
/// </summary>
public partial class ConfigurationWithIndex
{
  /// <summary>
  /// Initializes a new instance of the ConfigurationWithIndex class.
  /// </summary>
  [JsonConstructor]
  public ConfigurationWithIndex() { }

  /// <summary>
  /// Initializes a new instance of the ConfigurationWithIndex class.
  /// </summary>
  /// <param name="sourceIndices">Algolia indices from which to get the popular searches for query suggestions. (required).</param>
  /// <param name="indexName">Name of the Query Suggestions index (case-sensitive). (required).</param>
  public ConfigurationWithIndex(List<SourceIndex> sourceIndices, string indexName)
  {
    SourceIndices = sourceIndices ?? throw new ArgumentNullException(nameof(sourceIndices));
    IndexName = indexName ?? throw new ArgumentNullException(nameof(indexName));
  }

  /// <summary>
  /// Algolia indices from which to get the popular searches for query suggestions.
  /// </summary>
  /// <value>Algolia indices from which to get the popular searches for query suggestions.</value>
  [JsonPropertyName("sourceIndices")]
  public List<SourceIndex> SourceIndices { get; set; }

  /// <summary>
  /// Gets or Sets Languages
  /// </summary>
  [JsonPropertyName("languages")]
  public Languages Languages { get; set; }

  /// <summary>
  /// Gets or Sets Exclude
  /// </summary>
  [JsonPropertyName("exclude")]
  public List<string> Exclude { get; set; }

  /// <summary>
  /// Whether to turn on personalized query suggestions.
  /// </summary>
  /// <value>Whether to turn on personalized query suggestions.</value>
  [JsonPropertyName("enablePersonalization")]
  public bool? EnablePersonalization { get; set; }

  /// <summary>
  /// Whether to include suggestions with special characters.
  /// </summary>
  /// <value>Whether to include suggestions with special characters.</value>
  [JsonPropertyName("allowSpecialCharacters")]
  public bool? AllowSpecialCharacters { get; set; }

  /// <summary>
  /// Name of the Query Suggestions index (case-sensitive).
  /// </summary>
  /// <value>Name of the Query Suggestions index (case-sensitive).</value>
  [JsonPropertyName("indexName")]
  public string IndexName { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class ConfigurationWithIndex {\n");
    sb.Append("  SourceIndices: ").Append(SourceIndices).Append("\n");
    sb.Append("  Languages: ").Append(Languages).Append("\n");
    sb.Append("  Exclude: ").Append(Exclude).Append("\n");
    sb.Append("  EnablePersonalization: ").Append(EnablePersonalization).Append("\n");
    sb.Append("  AllowSpecialCharacters: ").Append(AllowSpecialCharacters).Append("\n");
    sb.Append("  IndexName: ").Append(IndexName).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not ConfigurationWithIndex input)
    {
      return false;
    }

    return (
        SourceIndices == input.SourceIndices
        || SourceIndices != null
          && input.SourceIndices != null
          && SourceIndices.SequenceEqual(input.SourceIndices)
      )
      && (Languages == input.Languages || (Languages != null && Languages.Equals(input.Languages)))
      && (
        Exclude == input.Exclude
        || Exclude != null && input.Exclude != null && Exclude.SequenceEqual(input.Exclude)
      )
      && (
        EnablePersonalization == input.EnablePersonalization
        || EnablePersonalization.Equals(input.EnablePersonalization)
      )
      && (
        AllowSpecialCharacters == input.AllowSpecialCharacters
        || AllowSpecialCharacters.Equals(input.AllowSpecialCharacters)
      )
      && (IndexName == input.IndexName || (IndexName != null && IndexName.Equals(input.IndexName)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (SourceIndices != null)
      {
        hashCode = (hashCode * 59) + SourceIndices.GetHashCode();
      }
      if (Languages != null)
      {
        hashCode = (hashCode * 59) + Languages.GetHashCode();
      }
      if (Exclude != null)
      {
        hashCode = (hashCode * 59) + Exclude.GetHashCode();
      }
      hashCode = (hashCode * 59) + EnablePersonalization.GetHashCode();
      hashCode = (hashCode * 59) + AllowSpecialCharacters.GetHashCode();
      if (IndexName != null)
      {
        hashCode = (hashCode * 59) + IndexName.GetHashCode();
      }
      return hashCode;
    }
  }
}
