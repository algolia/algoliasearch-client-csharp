//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.QuerySuggestions;

/// <summary>
/// ConfigStatus
/// </summary>
public partial class ConfigStatus
{
  /// <summary>
  /// Initializes a new instance of the ConfigStatus class.
  /// </summary>
  public ConfigStatus() { }

  /// <summary>
  /// Name of the Query Suggestions index (case-sensitive).
  /// </summary>
  /// <value>Name of the Query Suggestions index (case-sensitive).</value>
  [JsonPropertyName("indexName")]
  public string IndexName { get; set; }

  /// <summary>
  /// Whether the creation or update of the Query Suggestions index is in progress.
  /// </summary>
  /// <value>Whether the creation or update of the Query Suggestions index is in progress.</value>
  [JsonPropertyName("isRunning")]
  public bool? IsRunning { get; set; }

  /// <summary>
  /// Date and time when the Query Suggestions index was last built, in RFC 3339 format.
  /// </summary>
  /// <value>Date and time when the Query Suggestions index was last built, in RFC 3339 format.</value>
  [JsonPropertyName("lastBuiltAt")]
  public string LastBuiltAt { get; set; }

  /// <summary>
  /// Date and time when the Query Suggestions index was last updated successfully.
  /// </summary>
  /// <value>Date and time when the Query Suggestions index was last updated successfully.</value>
  [JsonPropertyName("lastSuccessfulBuiltAt")]
  public string LastSuccessfulBuiltAt { get; set; }

  /// <summary>
  /// Duration of the last successful build in seconds.
  /// </summary>
  /// <value>Duration of the last successful build in seconds.</value>
  [JsonPropertyName("lastSuccessfulBuildDuration")]
  public string LastSuccessfulBuildDuration { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class ConfigStatus {\n");
    sb.Append("  IndexName: ").Append(IndexName).Append("\n");
    sb.Append("  IsRunning: ").Append(IsRunning).Append("\n");
    sb.Append("  LastBuiltAt: ").Append(LastBuiltAt).Append("\n");
    sb.Append("  LastSuccessfulBuiltAt: ").Append(LastSuccessfulBuiltAt).Append("\n");
    sb.Append("  LastSuccessfulBuildDuration: ").Append(LastSuccessfulBuildDuration).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not ConfigStatus input)
    {
      return false;
    }

    return (
        IndexName == input.IndexName || (IndexName != null && IndexName.Equals(input.IndexName))
      )
      && (IsRunning == input.IsRunning || IsRunning.Equals(input.IsRunning))
      && (
        LastBuiltAt == input.LastBuiltAt
        || (LastBuiltAt != null && LastBuiltAt.Equals(input.LastBuiltAt))
      )
      && (
        LastSuccessfulBuiltAt == input.LastSuccessfulBuiltAt
        || (
          LastSuccessfulBuiltAt != null && LastSuccessfulBuiltAt.Equals(input.LastSuccessfulBuiltAt)
        )
      )
      && (
        LastSuccessfulBuildDuration == input.LastSuccessfulBuildDuration
        || (
          LastSuccessfulBuildDuration != null
          && LastSuccessfulBuildDuration.Equals(input.LastSuccessfulBuildDuration)
        )
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (IndexName != null)
      {
        hashCode = (hashCode * 59) + IndexName.GetHashCode();
      }
      hashCode = (hashCode * 59) + IsRunning.GetHashCode();
      if (LastBuiltAt != null)
      {
        hashCode = (hashCode * 59) + LastBuiltAt.GetHashCode();
      }
      if (LastSuccessfulBuiltAt != null)
      {
        hashCode = (hashCode * 59) + LastSuccessfulBuiltAt.GetHashCode();
      }
      if (LastSuccessfulBuildDuration != null)
      {
        hashCode = (hashCode * 59) + LastSuccessfulBuildDuration.GetHashCode();
      }
      return hashCode;
    }
  }
}
