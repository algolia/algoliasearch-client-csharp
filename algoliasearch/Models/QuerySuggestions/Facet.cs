//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.QuerySuggestions;

/// <summary>
/// Facet to use as category.
/// </summary>
public partial class Facet
{
  /// <summary>
  /// Initializes a new instance of the Facet class.
  /// </summary>
  public Facet() { }

  /// <summary>
  /// Facet name.
  /// </summary>
  /// <value>Facet name.</value>
  [JsonPropertyName("attribute")]
  public string Attribute { get; set; }

  /// <summary>
  /// Number of suggestions.
  /// </summary>
  /// <value>Number of suggestions.</value>
  [JsonPropertyName("amount")]
  public int? Amount { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Facet {\n");
    sb.Append("  Attribute: ").Append(Attribute).Append("\n");
    sb.Append("  Amount: ").Append(Amount).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Facet input)
    {
      return false;
    }

    return (
        Attribute == input.Attribute || (Attribute != null && Attribute.Equals(input.Attribute))
      ) && (Amount == input.Amount || Amount.Equals(input.Amount));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Attribute != null)
      {
        hashCode = (hashCode * 59) + Attribute.GetHashCode();
      }
      hashCode = (hashCode * 59) + Amount.GetHashCode();
      return hashCode;
    }
  }
}
