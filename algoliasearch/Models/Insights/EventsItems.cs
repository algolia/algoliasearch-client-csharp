//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Insights;

/// <summary>
/// EventsItems
/// </summary>
[JsonConverter(typeof(EventsItemsJsonConverter))]
public partial class EventsItems : AbstractSchema
{
  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a AddedToCartObjectIDsAfterSearch
  /// </summary>
  /// <param name="actualInstance">An instance of AddedToCartObjectIDsAfterSearch.</param>
  public EventsItems(AddedToCartObjectIDsAfterSearch actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a PurchasedObjectIDsAfterSearch
  /// </summary>
  /// <param name="actualInstance">An instance of PurchasedObjectIDsAfterSearch.</param>
  public EventsItems(PurchasedObjectIDsAfterSearch actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a ClickedObjectIDsAfterSearch
  /// </summary>
  /// <param name="actualInstance">An instance of ClickedObjectIDsAfterSearch.</param>
  public EventsItems(ClickedObjectIDsAfterSearch actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a PurchasedObjectIDs
  /// </summary>
  /// <param name="actualInstance">An instance of PurchasedObjectIDs.</param>
  public EventsItems(PurchasedObjectIDs actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a AddedToCartObjectIDs
  /// </summary>
  /// <param name="actualInstance">An instance of AddedToCartObjectIDs.</param>
  public EventsItems(AddedToCartObjectIDs actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a ConvertedObjectIDsAfterSearch
  /// </summary>
  /// <param name="actualInstance">An instance of ConvertedObjectIDsAfterSearch.</param>
  public EventsItems(ConvertedObjectIDsAfterSearch actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a ClickedObjectIDs
  /// </summary>
  /// <param name="actualInstance">An instance of ClickedObjectIDs.</param>
  public EventsItems(ClickedObjectIDs actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a ConvertedObjectIDs
  /// </summary>
  /// <param name="actualInstance">An instance of ConvertedObjectIDs.</param>
  public EventsItems(ConvertedObjectIDs actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a ClickedFilters
  /// </summary>
  /// <param name="actualInstance">An instance of ClickedFilters.</param>
  public EventsItems(ClickedFilters actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a ConvertedFilters
  /// </summary>
  /// <param name="actualInstance">An instance of ConvertedFilters.</param>
  public EventsItems(ConvertedFilters actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a ViewedObjectIDs
  /// </summary>
  /// <param name="actualInstance">An instance of ViewedObjectIDs.</param>
  public EventsItems(ViewedObjectIDs actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the EventsItems class
  /// with a ViewedFilters
  /// </summary>
  /// <param name="actualInstance">An instance of ViewedFilters.</param>
  public EventsItems(ViewedFilters actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Gets or Sets ActualInstance
  /// </summary>
  public sealed override object ActualInstance { get; set; }

  /// <summary>
  /// Get the actual instance of `AddedToCartObjectIDsAfterSearch`. If the actual instance is not `AddedToCartObjectIDsAfterSearch`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of AddedToCartObjectIDsAfterSearch</returns>
  public AddedToCartObjectIDsAfterSearch AsAddedToCartObjectIDsAfterSearch()
  {
    return (AddedToCartObjectIDsAfterSearch)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `PurchasedObjectIDsAfterSearch`. If the actual instance is not `PurchasedObjectIDsAfterSearch`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of PurchasedObjectIDsAfterSearch</returns>
  public PurchasedObjectIDsAfterSearch AsPurchasedObjectIDsAfterSearch()
  {
    return (PurchasedObjectIDsAfterSearch)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `ClickedObjectIDsAfterSearch`. If the actual instance is not `ClickedObjectIDsAfterSearch`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of ClickedObjectIDsAfterSearch</returns>
  public ClickedObjectIDsAfterSearch AsClickedObjectIDsAfterSearch()
  {
    return (ClickedObjectIDsAfterSearch)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `PurchasedObjectIDs`. If the actual instance is not `PurchasedObjectIDs`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of PurchasedObjectIDs</returns>
  public PurchasedObjectIDs AsPurchasedObjectIDs()
  {
    return (PurchasedObjectIDs)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `AddedToCartObjectIDs`. If the actual instance is not `AddedToCartObjectIDs`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of AddedToCartObjectIDs</returns>
  public AddedToCartObjectIDs AsAddedToCartObjectIDs()
  {
    return (AddedToCartObjectIDs)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `ConvertedObjectIDsAfterSearch`. If the actual instance is not `ConvertedObjectIDsAfterSearch`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of ConvertedObjectIDsAfterSearch</returns>
  public ConvertedObjectIDsAfterSearch AsConvertedObjectIDsAfterSearch()
  {
    return (ConvertedObjectIDsAfterSearch)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `ClickedObjectIDs`. If the actual instance is not `ClickedObjectIDs`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of ClickedObjectIDs</returns>
  public ClickedObjectIDs AsClickedObjectIDs()
  {
    return (ClickedObjectIDs)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `ConvertedObjectIDs`. If the actual instance is not `ConvertedObjectIDs`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of ConvertedObjectIDs</returns>
  public ConvertedObjectIDs AsConvertedObjectIDs()
  {
    return (ConvertedObjectIDs)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `ClickedFilters`. If the actual instance is not `ClickedFilters`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of ClickedFilters</returns>
  public ClickedFilters AsClickedFilters()
  {
    return (ClickedFilters)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `ConvertedFilters`. If the actual instance is not `ConvertedFilters`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of ConvertedFilters</returns>
  public ConvertedFilters AsConvertedFilters()
  {
    return (ConvertedFilters)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `ViewedObjectIDs`. If the actual instance is not `ViewedObjectIDs`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of ViewedObjectIDs</returns>
  public ViewedObjectIDs AsViewedObjectIDs()
  {
    return (ViewedObjectIDs)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `ViewedFilters`. If the actual instance is not `ViewedFilters`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of ViewedFilters</returns>
  public ViewedFilters AsViewedFilters()
  {
    return (ViewedFilters)ActualInstance;
  }

  /// <summary>
  /// Check if the actual instance is of `AddedToCartObjectIDsAfterSearch` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsAddedToCartObjectIDsAfterSearch()
  {
    return ActualInstance.GetType() == typeof(AddedToCartObjectIDsAfterSearch);
  }

  /// <summary>
  /// Check if the actual instance is of `PurchasedObjectIDsAfterSearch` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsPurchasedObjectIDsAfterSearch()
  {
    return ActualInstance.GetType() == typeof(PurchasedObjectIDsAfterSearch);
  }

  /// <summary>
  /// Check if the actual instance is of `ClickedObjectIDsAfterSearch` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsClickedObjectIDsAfterSearch()
  {
    return ActualInstance.GetType() == typeof(ClickedObjectIDsAfterSearch);
  }

  /// <summary>
  /// Check if the actual instance is of `PurchasedObjectIDs` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsPurchasedObjectIDs()
  {
    return ActualInstance.GetType() == typeof(PurchasedObjectIDs);
  }

  /// <summary>
  /// Check if the actual instance is of `AddedToCartObjectIDs` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsAddedToCartObjectIDs()
  {
    return ActualInstance.GetType() == typeof(AddedToCartObjectIDs);
  }

  /// <summary>
  /// Check if the actual instance is of `ConvertedObjectIDsAfterSearch` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsConvertedObjectIDsAfterSearch()
  {
    return ActualInstance.GetType() == typeof(ConvertedObjectIDsAfterSearch);
  }

  /// <summary>
  /// Check if the actual instance is of `ClickedObjectIDs` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsClickedObjectIDs()
  {
    return ActualInstance.GetType() == typeof(ClickedObjectIDs);
  }

  /// <summary>
  /// Check if the actual instance is of `ConvertedObjectIDs` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsConvertedObjectIDs()
  {
    return ActualInstance.GetType() == typeof(ConvertedObjectIDs);
  }

  /// <summary>
  /// Check if the actual instance is of `ClickedFilters` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsClickedFilters()
  {
    return ActualInstance.GetType() == typeof(ClickedFilters);
  }

  /// <summary>
  /// Check if the actual instance is of `ConvertedFilters` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsConvertedFilters()
  {
    return ActualInstance.GetType() == typeof(ConvertedFilters);
  }

  /// <summary>
  /// Check if the actual instance is of `ViewedObjectIDs` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsViewedObjectIDs()
  {
    return ActualInstance.GetType() == typeof(ViewedObjectIDs);
  }

  /// <summary>
  /// Check if the actual instance is of `ViewedFilters` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsViewedFilters()
  {
    return ActualInstance.GetType() == typeof(ViewedFilters);
  }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    var sb = new StringBuilder();
    sb.Append("class EventsItems {\n");
    sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public override string ToJson()
  {
    return JsonSerializer.Serialize(ActualInstance, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not EventsItems input)
    {
      return false;
    }

    return ActualInstance.Equals(input.ActualInstance);
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ActualInstance != null)
        hashCode = hashCode * 59 + ActualInstance.GetHashCode();
      return hashCode;
    }
  }
}

/// <summary>
/// Custom JSON converter for EventsItems
/// </summary>
public class EventsItemsJsonConverter : JsonConverter<EventsItems>
{
  /// <summary>
  /// Check if the object can be converted
  /// </summary>
  /// <param name="objectType">Object type</param>
  /// <returns>True if the object can be converted</returns>
  public override bool CanConvert(Type objectType)
  {
    return objectType == typeof(EventsItems);
  }

  /// <summary>
  /// To convert a JSON string into an object
  /// </summary>
  /// <param name="reader">JSON reader</param>
  /// <param name="typeToConvert">Object type</param>
  /// <param name="options">Serializer options</param>
  /// <returns>The object converted from the JSON string</returns>
  public override EventsItems Read(
    ref Utf8JsonReader reader,
    Type typeToConvert,
    JsonSerializerOptions options
  )
  {
    var jsonDocument = JsonDocument.ParseValue(ref reader);
    var root = jsonDocument.RootElement;
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("eventSubtype", out _)
      && root.TryGetProperty("queryID", out _)
      && root.TryGetProperty("objectIDs", out _)
    )
    {
      try
      {
        return new EventsItems(
          jsonDocument.Deserialize<AddedToCartObjectIDsAfterSearch>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into AddedToCartObjectIDsAfterSearch: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("eventSubtype", out _)
      && root.TryGetProperty("objectIDs", out _)
      && root.TryGetProperty("objectData", out _)
    )
    {
      try
      {
        return new EventsItems(
          jsonDocument.Deserialize<PurchasedObjectIDsAfterSearch>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into PurchasedObjectIDsAfterSearch: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("positions", out _)
      && root.TryGetProperty("queryID", out _)
      && root.TryGetProperty("eventType", out _)
    )
    {
      try
      {
        return new EventsItems(
          jsonDocument.Deserialize<ClickedObjectIDsAfterSearch>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into ClickedObjectIDsAfterSearch: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("eventSubtype", out _)
      && root.TryGetProperty("objectIDs", out _)
    )
    {
      try
      {
        return new EventsItems(jsonDocument.Deserialize<PurchasedObjectIDs>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into PurchasedObjectIDs: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("eventSubtype", out _)
      && root.TryGetProperty("objectIDs", out _)
    )
    {
      try
      {
        return new EventsItems(jsonDocument.Deserialize<AddedToCartObjectIDs>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into AddedToCartObjectIDs: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("queryID", out _)
      && root.TryGetProperty("eventType", out _)
    )
    {
      try
      {
        return new EventsItems(
          jsonDocument.Deserialize<ConvertedObjectIDsAfterSearch>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into ConvertedObjectIDsAfterSearch: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("objectIDs", out _)
    )
    {
      try
      {
        return new EventsItems(jsonDocument.Deserialize<ClickedObjectIDs>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into ClickedObjectIDs: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("objectIDs", out _)
    )
    {
      try
      {
        return new EventsItems(jsonDocument.Deserialize<ConvertedObjectIDs>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into ConvertedObjectIDs: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("filters", out _)
    )
    {
      try
      {
        return new EventsItems(jsonDocument.Deserialize<ClickedFilters>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into ClickedFilters: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("filters", out _)
    )
    {
      try
      {
        return new EventsItems(jsonDocument.Deserialize<ConvertedFilters>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into ConvertedFilters: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("objectIDs", out _)
    )
    {
      try
      {
        return new EventsItems(jsonDocument.Deserialize<ViewedObjectIDs>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into ViewedObjectIDs: {exception}"
        );
      }
    }
    if (
      root.ValueKind == JsonValueKind.Object
      && root.TryGetProperty("eventType", out _)
      && root.TryGetProperty("filters", out _)
    )
    {
      try
      {
        return new EventsItems(jsonDocument.Deserialize<ViewedFilters>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into ViewedFilters: {exception}"
        );
      }
    }
    throw new InvalidDataException(
      $"The JSON string cannot be deserialized into any schema defined."
    );
  }

  /// <summary>
  /// To write the JSON string
  /// </summary>
  /// <param name="writer">JSON writer</param>
  /// <param name="value">EventsItems to be converted into a JSON string</param>
  /// <param name="options">JSON Serializer options</param>
  public override void Write(
    Utf8JsonWriter writer,
    EventsItems value,
    JsonSerializerOptions options
  )
  {
    writer.WriteRawValue(value.ToJson());
  }
}
