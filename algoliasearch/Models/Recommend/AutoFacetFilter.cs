//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Recommend;

/// <summary>
/// Facet attribute. Only recommendations with the same value (or only recommendations with a different value) as the original viewed item are included.
/// </summary>
public partial class AutoFacetFilter
{
  /// <summary>
  /// Initializes a new instance of the AutoFacetFilter class.
  /// </summary>
  public AutoFacetFilter() { }

  /// <summary>
  /// Facet attribute.
  /// </summary>
  /// <value>Facet attribute.</value>
  [JsonPropertyName("facet")]
  public string Facet { get; set; }

  /// <summary>
  /// Whether the filter is negative. If true, recommendations must not have the same value for the `facet` attribute. If false, recommendations must have the same value for the `facet` attribute.
  /// </summary>
  /// <value>Whether the filter is negative. If true, recommendations must not have the same value for the `facet` attribute. If false, recommendations must have the same value for the `facet` attribute. </value>
  [JsonPropertyName("negative")]
  public bool? Negative { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class AutoFacetFilter {\n");
    sb.Append("  Facet: ").Append(Facet).Append("\n");
    sb.Append("  Negative: ").Append(Negative).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not AutoFacetFilter input)
    {
      return false;
    }

    return (Facet == input.Facet || (Facet != null && Facet.Equals(input.Facet)))
      && (Negative == input.Negative || Negative.Equals(input.Negative));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Facet != null)
      {
        hashCode = (hashCode * 59) + Facet.GetHashCode();
      }
      hashCode = (hashCode * 59) + Negative.GetHashCode();
      return hashCode;
    }
  }
}
