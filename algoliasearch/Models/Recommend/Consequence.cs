//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Recommend;

/// <summary>
/// Effect of the rule.
/// </summary>
public partial class Consequence
{
  /// <summary>
  /// Initializes a new instance of the Consequence class.
  /// </summary>
  public Consequence() { }

  /// <summary>
  /// Exclude items from recommendations.
  /// </summary>
  /// <value>Exclude items from recommendations.</value>
  [JsonPropertyName("hide")]
  public List<HideConsequenceObject> Hide { get; set; }

  /// <summary>
  /// Place items at specific positions in the list of recommendations.
  /// </summary>
  /// <value>Place items at specific positions in the list of recommendations.</value>
  [JsonPropertyName("promote")]
  public List<PromoteConsequenceObject> Promote { get; set; }

  /// <summary>
  /// Gets or Sets Params
  /// </summary>
  [JsonPropertyName("params")]
  public ParamsConsequence Params { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Consequence {\n");
    sb.Append("  Hide: ").Append(Hide).Append("\n");
    sb.Append("  Promote: ").Append(Promote).Append("\n");
    sb.Append("  Params: ").Append(Params).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Consequence input)
    {
      return false;
    }

    return (
        Hide == input.Hide || Hide != null && input.Hide != null && Hide.SequenceEqual(input.Hide)
      )
      && (
        Promote == input.Promote
        || Promote != null && input.Promote != null && Promote.SequenceEqual(input.Promote)
      )
      && (Params == input.Params || (Params != null && Params.Equals(input.Params)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Hide != null)
      {
        hashCode = (hashCode * 59) + Hide.GetHashCode();
      }
      if (Promote != null)
      {
        hashCode = (hashCode * 59) + Promote.GetHashCode();
      }
      if (Params != null)
      {
        hashCode = (hashCode * 59) + Params.GetHashCode();
      }
      return hashCode;
    }
  }
}
