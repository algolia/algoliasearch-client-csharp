//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Recommend;

/// <summary>
/// BoughtTogetherQuery
/// </summary>
public partial class BoughtTogetherQuery
{
  /// <summary>
  /// Gets or Sets Model
  /// </summary>
  [JsonPropertyName("model")]
  public FbtModel? Model { get; set; }

  /// <summary>
  /// Initializes a new instance of the BoughtTogetherQuery class.
  /// </summary>
  [JsonConstructor]
  public BoughtTogetherQuery() { }

  /// <summary>
  /// Initializes a new instance of the BoughtTogetherQuery class.
  /// </summary>
  /// <param name="indexName">Index name (case-sensitive). (required).</param>
  /// <param name="threshold">Minimum score a recommendation must have to be included in the response. (required).</param>
  /// <param name="model">model (required).</param>
  /// <param name="objectID">Unique record identifier. (required).</param>
  public BoughtTogetherQuery(string indexName, double threshold, FbtModel? model, string objectID)
  {
    IndexName = indexName ?? throw new ArgumentNullException(nameof(indexName));
    Threshold = threshold;
    Model = model;
    ObjectID = objectID ?? throw new ArgumentNullException(nameof(objectID));
  }

  /// <summary>
  /// Index name (case-sensitive).
  /// </summary>
  /// <value>Index name (case-sensitive).</value>
  [JsonPropertyName("indexName")]
  public string IndexName { get; set; }

  /// <summary>
  /// Minimum score a recommendation must have to be included in the response.
  /// </summary>
  /// <value>Minimum score a recommendation must have to be included in the response.</value>
  [JsonPropertyName("threshold")]
  public double Threshold { get; set; }

  /// <summary>
  /// Maximum number of recommendations to retrieve. By default, all recommendations are returned and no fallback request is made. Depending on the available recommendations and the other request parameters, the actual number of recommendations may be lower than this value.
  /// </summary>
  /// <value>Maximum number of recommendations to retrieve. By default, all recommendations are returned and no fallback request is made. Depending on the available recommendations and the other request parameters, the actual number of recommendations may be lower than this value. </value>
  [JsonPropertyName("maxRecommendations")]
  public int? MaxRecommendations { get; set; }

  /// <summary>
  /// Gets or Sets QueryParameters
  /// </summary>
  [JsonPropertyName("queryParameters")]
  public RecommendSearchParams QueryParameters { get; set; }

  /// <summary>
  /// Unique record identifier.
  /// </summary>
  /// <value>Unique record identifier.</value>
  [JsonPropertyName("objectID")]
  public string ObjectID { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class BoughtTogetherQuery {\n");
    sb.Append("  IndexName: ").Append(IndexName).Append("\n");
    sb.Append("  Threshold: ").Append(Threshold).Append("\n");
    sb.Append("  MaxRecommendations: ").Append(MaxRecommendations).Append("\n");
    sb.Append("  QueryParameters: ").Append(QueryParameters).Append("\n");
    sb.Append("  Model: ").Append(Model).Append("\n");
    sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not BoughtTogetherQuery input)
    {
      return false;
    }

    return (
        IndexName == input.IndexName || (IndexName != null && IndexName.Equals(input.IndexName))
      )
      && (Threshold == input.Threshold || Threshold.Equals(input.Threshold))
      && (
        MaxRecommendations == input.MaxRecommendations
        || MaxRecommendations.Equals(input.MaxRecommendations)
      )
      && (
        QueryParameters == input.QueryParameters
        || (QueryParameters != null && QueryParameters.Equals(input.QueryParameters))
      )
      && (Model == input.Model || Model.Equals(input.Model))
      && (ObjectID == input.ObjectID || (ObjectID != null && ObjectID.Equals(input.ObjectID)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (IndexName != null)
      {
        hashCode = (hashCode * 59) + IndexName.GetHashCode();
      }
      hashCode = (hashCode * 59) + Threshold.GetHashCode();
      hashCode = (hashCode * 59) + MaxRecommendations.GetHashCode();
      if (QueryParameters != null)
      {
        hashCode = (hashCode * 59) + QueryParameters.GetHashCode();
      }
      hashCode = (hashCode * 59) + Model.GetHashCode();
      if (ObjectID != null)
      {
        hashCode = (hashCode * 59) + ObjectID.GetHashCode();
      }
      return hashCode;
    }
  }
}
