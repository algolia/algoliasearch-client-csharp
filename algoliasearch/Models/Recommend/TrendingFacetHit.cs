//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Recommend;

/// <summary>
/// Trending facet hit.
/// </summary>
public partial class TrendingFacetHit
{
  /// <summary>
  /// Initializes a new instance of the TrendingFacetHit class.
  /// </summary>
  [JsonConstructor]
  public TrendingFacetHit() { }

  /// <summary>
  /// Initializes a new instance of the TrendingFacetHit class.
  /// </summary>
  /// <param name="facetName">Facet attribute. To be used in combination with `facetValue`. If specified, only recommendations matching the facet filter will be returned.  (required).</param>
  /// <param name="facetValue">Facet value. To be used in combination with `facetName`. If specified, only recommendations matching the facet filter will be returned.  (required).</param>
  public TrendingFacetHit(string facetName, string facetValue)
  {
    FacetName = facetName ?? throw new ArgumentNullException(nameof(facetName));
    FacetValue = facetValue ?? throw new ArgumentNullException(nameof(facetValue));
  }

  /// <summary>
  /// Recommendation score.
  /// </summary>
  /// <value>Recommendation score.</value>
  [JsonPropertyName("_score")]
  public double? Score { get; set; }

  /// <summary>
  /// Facet attribute. To be used in combination with `facetValue`. If specified, only recommendations matching the facet filter will be returned.
  /// </summary>
  /// <value>Facet attribute. To be used in combination with `facetValue`. If specified, only recommendations matching the facet filter will be returned. </value>
  [JsonPropertyName("facetName")]
  public string FacetName { get; set; }

  /// <summary>
  /// Facet value. To be used in combination with `facetName`. If specified, only recommendations matching the facet filter will be returned.
  /// </summary>
  /// <value>Facet value. To be used in combination with `facetName`. If specified, only recommendations matching the facet filter will be returned. </value>
  [JsonPropertyName("facetValue")]
  public string FacetValue { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class TrendingFacetHit {\n");
    sb.Append("  Score: ").Append(Score).Append("\n");
    sb.Append("  FacetName: ").Append(FacetName).Append("\n");
    sb.Append("  FacetValue: ").Append(FacetValue).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not TrendingFacetHit input)
    {
      return false;
    }

    return (Score == input.Score || Score.Equals(input.Score))
      && (FacetName == input.FacetName || (FacetName != null && FacetName.Equals(input.FacetName)))
      && (
        FacetValue == input.FacetValue
        || (FacetValue != null && FacetValue.Equals(input.FacetValue))
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + Score.GetHashCode();
      if (FacetName != null)
      {
        hashCode = (hashCode * 59) + FacetName.GetHashCode();
      }
      if (FacetValue != null)
      {
        hashCode = (hashCode * 59) + FacetValue.GetHashCode();
      }
      return hashCode;
    }
  }
}
