//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Recommend;

/// <summary>
/// RecommendationsRequest
/// </summary>
[JsonConverter(typeof(RecommendationsRequestJsonConverter))]
public partial class RecommendationsRequest : AbstractSchema
{
  /// <summary>
  /// Initializes a new instance of the RecommendationsRequest class
  /// with a BoughtTogetherQuery
  /// </summary>
  /// <param name="actualInstance">An instance of BoughtTogetherQuery.</param>
  public RecommendationsRequest(BoughtTogetherQuery actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the RecommendationsRequest class
  /// with a RelatedQuery
  /// </summary>
  /// <param name="actualInstance">An instance of RelatedQuery.</param>
  public RecommendationsRequest(RelatedQuery actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the RecommendationsRequest class
  /// with a TrendingItemsQuery
  /// </summary>
  /// <param name="actualInstance">An instance of TrendingItemsQuery.</param>
  public RecommendationsRequest(TrendingItemsQuery actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the RecommendationsRequest class
  /// with a TrendingFacetsQuery
  /// </summary>
  /// <param name="actualInstance">An instance of TrendingFacetsQuery.</param>
  public RecommendationsRequest(TrendingFacetsQuery actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the RecommendationsRequest class
  /// with a LookingSimilarQuery
  /// </summary>
  /// <param name="actualInstance">An instance of LookingSimilarQuery.</param>
  public RecommendationsRequest(LookingSimilarQuery actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Gets or Sets ActualInstance
  /// </summary>
  public sealed override object ActualInstance { get; set; }

  /// <summary>
  /// Get the actual instance of `BoughtTogetherQuery`. If the actual instance is not `BoughtTogetherQuery`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of BoughtTogetherQuery</returns>
  public BoughtTogetherQuery AsBoughtTogetherQuery()
  {
    return (BoughtTogetherQuery)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `RelatedQuery`. If the actual instance is not `RelatedQuery`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of RelatedQuery</returns>
  public RelatedQuery AsRelatedQuery()
  {
    return (RelatedQuery)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `TrendingItemsQuery`. If the actual instance is not `TrendingItemsQuery`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of TrendingItemsQuery</returns>
  public TrendingItemsQuery AsTrendingItemsQuery()
  {
    return (TrendingItemsQuery)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `TrendingFacetsQuery`. If the actual instance is not `TrendingFacetsQuery`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of TrendingFacetsQuery</returns>
  public TrendingFacetsQuery AsTrendingFacetsQuery()
  {
    return (TrendingFacetsQuery)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `LookingSimilarQuery`. If the actual instance is not `LookingSimilarQuery`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of LookingSimilarQuery</returns>
  public LookingSimilarQuery AsLookingSimilarQuery()
  {
    return (LookingSimilarQuery)ActualInstance;
  }

  /// <summary>
  /// Check if the actual instance is of `BoughtTogetherQuery` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsBoughtTogetherQuery()
  {
    return ActualInstance.GetType() == typeof(BoughtTogetherQuery);
  }

  /// <summary>
  /// Check if the actual instance is of `RelatedQuery` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsRelatedQuery()
  {
    return ActualInstance.GetType() == typeof(RelatedQuery);
  }

  /// <summary>
  /// Check if the actual instance is of `TrendingItemsQuery` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsTrendingItemsQuery()
  {
    return ActualInstance.GetType() == typeof(TrendingItemsQuery);
  }

  /// <summary>
  /// Check if the actual instance is of `TrendingFacetsQuery` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsTrendingFacetsQuery()
  {
    return ActualInstance.GetType() == typeof(TrendingFacetsQuery);
  }

  /// <summary>
  /// Check if the actual instance is of `LookingSimilarQuery` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsLookingSimilarQuery()
  {
    return ActualInstance.GetType() == typeof(LookingSimilarQuery);
  }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    var sb = new StringBuilder();
    sb.Append("class RecommendationsRequest {\n");
    sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public override string ToJson()
  {
    return JsonSerializer.Serialize(ActualInstance, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not RecommendationsRequest input)
    {
      return false;
    }

    return ActualInstance.Equals(input.ActualInstance);
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ActualInstance != null)
        hashCode = hashCode * 59 + ActualInstance.GetHashCode();
      return hashCode;
    }
  }
}

/// <summary>
/// Custom JSON converter for RecommendationsRequest
/// </summary>
public class RecommendationsRequestJsonConverter : JsonConverter<RecommendationsRequest>
{
  /// <summary>
  /// Check if the object can be converted
  /// </summary>
  /// <param name="objectType">Object type</param>
  /// <returns>True if the object can be converted</returns>
  public override bool CanConvert(Type objectType)
  {
    return objectType == typeof(RecommendationsRequest);
  }

  /// <summary>
  /// To convert a JSON string into an object
  /// </summary>
  /// <param name="reader">JSON reader</param>
  /// <param name="typeToConvert">Object type</param>
  /// <param name="options">Serializer options</param>
  /// <returns>The object converted from the JSON string</returns>
  public override RecommendationsRequest Read(
    ref Utf8JsonReader reader,
    Type typeToConvert,
    JsonSerializerOptions options
  )
  {
    var jsonDocument = JsonDocument.ParseValue(ref reader);
    var root = jsonDocument.RootElement;
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new RecommendationsRequest(
          jsonDocument.Deserialize<BoughtTogetherQuery>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into BoughtTogetherQuery: {exception}"
        );
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new RecommendationsRequest(
          jsonDocument.Deserialize<RelatedQuery>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into RelatedQuery: {exception}");
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new RecommendationsRequest(
          jsonDocument.Deserialize<TrendingItemsQuery>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into TrendingItemsQuery: {exception}"
        );
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new RecommendationsRequest(
          jsonDocument.Deserialize<TrendingFacetsQuery>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into TrendingFacetsQuery: {exception}"
        );
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new RecommendationsRequest(
          jsonDocument.Deserialize<LookingSimilarQuery>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into LookingSimilarQuery: {exception}"
        );
      }
    }
    throw new InvalidDataException(
      $"The JSON string cannot be deserialized into any schema defined."
    );
  }

  /// <summary>
  /// To write the JSON string
  /// </summary>
  /// <param name="writer">JSON writer</param>
  /// <param name="value">RecommendationsRequest to be converted into a JSON string</param>
  /// <param name="options">JSON Serializer options</param>
  public override void Write(
    Utf8JsonWriter writer,
    RecommendationsRequest value,
    JsonSerializerOptions options
  )
  {
    writer.WriteRawValue(value.ToJson());
  }
}
