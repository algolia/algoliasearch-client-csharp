//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Personalization;

/// <summary>
/// EventsScoring
/// </summary>
public partial class EventsScoring
{

  /// <summary>
  /// Gets or Sets EventType
  /// </summary>
  [JsonPropertyName("eventType")]
  public EventType? EventType { get; set; }
  /// <summary>
  /// Initializes a new instance of the EventsScoring class.
  /// </summary>
  [JsonConstructor]
  public EventsScoring() { }
  /// <summary>
  /// Initializes a new instance of the EventsScoring class.
  /// </summary>
  /// <param name="score">Event score. (required).</param>
  /// <param name="eventName">Event name. (required).</param>
  /// <param name="eventType">eventType (required).</param>
  public EventsScoring(int score, string eventName, EventType? eventType)
  {
    Score = score;
    EventName = eventName ?? throw new ArgumentNullException(nameof(eventName));
    EventType = eventType;
  }

  /// <summary>
  /// Event score.
  /// </summary>
  /// <value>Event score.</value>
  [JsonPropertyName("score")]
  public int Score { get; set; }

  /// <summary>
  /// Event name.
  /// </summary>
  /// <value>Event name.</value>
  [JsonPropertyName("eventName")]
  public string EventName { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class EventsScoring {\n");
    sb.Append("  Score: ").Append(Score).Append("\n");
    sb.Append("  EventName: ").Append(EventName).Append("\n");
    sb.Append("  EventType: ").Append(EventType).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not EventsScoring input)
    {
      return false;
    }

    return
        (Score == input.Score || Score.Equals(input.Score)) &&
        (EventName == input.EventName || (EventName != null && EventName.Equals(input.EventName))) &&
        (EventType == input.EventType || EventType.Equals(input.EventType));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + Score.GetHashCode();
      if (EventName != null)
      {
        hashCode = (hashCode * 59) + EventName.GetHashCode();
      }
      hashCode = (hashCode * 59) + EventType.GetHashCode();
      return hashCode;
    }
  }

}

