//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Personalization;

/// <summary>
/// DeleteUserProfileResponse
/// </summary>
public partial class DeleteUserProfileResponse
{
  /// <summary>
  /// Initializes a new instance of the DeleteUserProfileResponse class.
  /// </summary>
  [JsonConstructor]
  public DeleteUserProfileResponse() { }

  /// <summary>
  /// Initializes a new instance of the DeleteUserProfileResponse class.
  /// </summary>
  /// <param name="userToken">Unique pseudonymous or anonymous user identifier.  This helps with analytics and click and conversion events. For more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).  (required).</param>
  /// <param name="deletedUntil">Date and time when the user profile can be safely considered to be deleted. Any events received after the `deletedUntil` date start a new user profile.  (required).</param>
  public DeleteUserProfileResponse(string userToken, string deletedUntil)
  {
    UserToken = userToken ?? throw new ArgumentNullException(nameof(userToken));
    DeletedUntil = deletedUntil ?? throw new ArgumentNullException(nameof(deletedUntil));
  }

  /// <summary>
  /// Unique pseudonymous or anonymous user identifier.  This helps with analytics and click and conversion events. For more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).
  /// </summary>
  /// <value>Unique pseudonymous or anonymous user identifier.  This helps with analytics and click and conversion events. For more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/). </value>
  [JsonPropertyName("userToken")]
  public string UserToken { get; set; }

  /// <summary>
  /// Date and time when the user profile can be safely considered to be deleted. Any events received after the `deletedUntil` date start a new user profile.
  /// </summary>
  /// <value>Date and time when the user profile can be safely considered to be deleted. Any events received after the `deletedUntil` date start a new user profile. </value>
  [JsonPropertyName("deletedUntil")]
  public string DeletedUntil { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class DeleteUserProfileResponse {\n");
    sb.Append("  UserToken: ").Append(UserToken).Append("\n");
    sb.Append("  DeletedUntil: ").Append(DeletedUntil).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not DeleteUserProfileResponse input)
    {
      return false;
    }

    return (
        UserToken == input.UserToken || (UserToken != null && UserToken.Equals(input.UserToken))
      )
      && (
        DeletedUntil == input.DeletedUntil
        || (DeletedUntil != null && DeletedUntil.Equals(input.DeletedUntil))
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (UserToken != null)
      {
        hashCode = (hashCode * 59) + UserToken.GetHashCode();
      }
      if (DeletedUntil != null)
      {
        hashCode = (hashCode * 59) + DeletedUntil.GetHashCode();
      }
      return hashCode;
    }
  }
}
