//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.AbtestingV3;

/// <summary>
/// Boolean filter applied to the A/B test population. Each filter targets a boolean metric and decides whether to include (true) or exclude (false) matching records.
/// </summary>
public partial class MetricsFilter
{
  /// <summary>
  /// Initializes a new instance of the MetricsFilter class.
  /// </summary>
  [JsonConstructor]
  public MetricsFilter() { }

  /// <summary>
  /// Initializes a new instance of the MetricsFilter class.
  /// </summary>
  /// <param name="domain">Metric domain (for example `abtesting`, `personalization`). (required).</param>
  /// <param name="name">Public metric name. (required).</param>
  public MetricsFilter(string domain, string name)
  {
    Domain = domain ?? throw new ArgumentNullException(nameof(domain));
    Name = name ?? throw new ArgumentNullException(nameof(name));
  }

  /// <summary>
  /// Metric domain (for example `abtesting`, `personalization`).
  /// </summary>
  /// <value>Metric domain (for example `abtesting`, `personalization`).</value>
  [JsonPropertyName("domain")]
  public string Domain { get; set; }

  /// <summary>
  /// Public metric name.
  /// </summary>
  /// <value>Public metric name.</value>
  [JsonPropertyName("name")]
  public string Name { get; set; }

  /// <summary>
  /// Whether the experiment should record the effects of this filter.
  /// </summary>
  /// <value>Whether the experiment should record the effects of this filter.</value>
  [JsonPropertyName("trackEffects")]
  public bool? TrackEffects { get; set; }

  /// <summary>
  /// If true, keep items that match the filter; if false, exclude them.
  /// </summary>
  /// <value>If true, keep items that match the filter; if false, exclude them.</value>
  [JsonPropertyName("includes")]
  public bool? Includes { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class MetricsFilter {\n");
    sb.Append("  Domain: ").Append(Domain).Append("\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  TrackEffects: ").Append(TrackEffects).Append("\n");
    sb.Append("  Includes: ").Append(Includes).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not MetricsFilter input)
    {
      return false;
    }

    return (Domain == input.Domain || (Domain != null && Domain.Equals(input.Domain)))
      && (Name == input.Name || (Name != null && Name.Equals(input.Name)))
      && (TrackEffects == input.TrackEffects || TrackEffects.Equals(input.TrackEffects))
      && (Includes == input.Includes || Includes.Equals(input.Includes));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Domain != null)
      {
        hashCode = (hashCode * 59) + Domain.GetHashCode();
      }
      if (Name != null)
      {
        hashCode = (hashCode * 59) + Name.GetHashCode();
      }
      hashCode = (hashCode * 59) + TrackEffects.GetHashCode();
      hashCode = (hashCode * 59) + Includes.GetHashCode();
      return hashCode;
    }
  }
}
