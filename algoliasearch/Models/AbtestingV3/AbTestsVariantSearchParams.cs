//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.AbtestingV3;

/// <summary>
/// AbTestsVariantSearchParams
/// </summary>
public partial class AbTestsVariantSearchParams
{
  /// <summary>
  /// Initializes a new instance of the AbTestsVariantSearchParams class.
  /// </summary>
  [JsonConstructor]
  public AbTestsVariantSearchParams() { }

  /// <summary>
  /// Initializes a new instance of the AbTestsVariantSearchParams class.
  /// </summary>
  /// <param name="index">Index name of the A/B test variant (case-sensitive). (required).</param>
  /// <param name="trafficPercentage">Percentage of search requests each variant receives. (required).</param>
  /// <param name="customSearchParameters">customSearchParameters (required).</param>
  public AbTestsVariantSearchParams(
    string index,
    int trafficPercentage,
    object customSearchParameters
  )
  {
    Index = index ?? throw new ArgumentNullException(nameof(index));
    TrafficPercentage = trafficPercentage;
    CustomSearchParameters =
      customSearchParameters ?? throw new ArgumentNullException(nameof(customSearchParameters));
  }

  /// <summary>
  /// Index name of the A/B test variant (case-sensitive).
  /// </summary>
  /// <value>Index name of the A/B test variant (case-sensitive).</value>
  [JsonPropertyName("index")]
  public string Index { get; set; }

  /// <summary>
  /// Percentage of search requests each variant receives.
  /// </summary>
  /// <value>Percentage of search requests each variant receives.</value>
  [JsonPropertyName("trafficPercentage")]
  public int TrafficPercentage { get; set; }

  /// <summary>
  /// Description for this variant.
  /// </summary>
  /// <value>Description for this variant.</value>
  [JsonPropertyName("description")]
  public string Description { get; set; }

  /// <summary>
  /// Gets or Sets CustomSearchParameters
  /// </summary>
  [JsonPropertyName("customSearchParameters")]
  public object CustomSearchParameters { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class AbTestsVariantSearchParams {\n");
    sb.Append("  Index: ").Append(Index).Append("\n");
    sb.Append("  TrafficPercentage: ").Append(TrafficPercentage).Append("\n");
    sb.Append("  Description: ").Append(Description).Append("\n");
    sb.Append("  CustomSearchParameters: ").Append(CustomSearchParameters).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not AbTestsVariantSearchParams input)
    {
      return false;
    }

    return (Index == input.Index || (Index != null && Index.Equals(input.Index)))
      && (
        TrafficPercentage == input.TrafficPercentage
        || TrafficPercentage.Equals(input.TrafficPercentage)
      )
      && (
        Description == input.Description
        || (Description != null && Description.Equals(input.Description))
      )
      && (
        CustomSearchParameters == input.CustomSearchParameters
        || (
          CustomSearchParameters != null
          && CustomSearchParameters.Equals(input.CustomSearchParameters)
        )
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Index != null)
      {
        hashCode = (hashCode * 59) + Index.GetHashCode();
      }
      hashCode = (hashCode * 59) + TrafficPercentage.GetHashCode();
      if (Description != null)
      {
        hashCode = (hashCode * 59) + Description.GetHashCode();
      }
      if (CustomSearchParameters != null)
      {
        hashCode = (hashCode * 59) + CustomSearchParameters.GetHashCode();
      }
      return hashCode;
    }
  }
}
