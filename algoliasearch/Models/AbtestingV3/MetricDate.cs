//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.AbtestingV3;

/// <summary>
/// MetricDate
/// </summary>
public partial class MetricDate
{
  /// <summary>
  /// Initializes a new instance of the MetricDate class.
  /// </summary>
  public MetricDate() { }

  /// <summary>
  /// Date where the metric was updated, in RFC 3339 format.
  /// </summary>
  /// <value>Date where the metric was updated, in RFC 3339 format.</value>
  [JsonPropertyName("date")]
  public string Date { get; set; }

  /// <summary>
  /// All ABTest metrics that were defined during test creation.
  /// </summary>
  /// <value>All ABTest metrics that were defined during test creation.</value>
  [JsonPropertyName("metrics")]
  public List<MetricResult> Metrics { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class MetricDate {\n");
    sb.Append("  Date: ").Append(Date).Append("\n");
    sb.Append("  Metrics: ").Append(Metrics).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not MetricDate input)
    {
      return false;
    }

    return (Date == input.Date || (Date != null && Date.Equals(input.Date)))
      && (
        Metrics == input.Metrics
        || Metrics != null && input.Metrics != null && Metrics.SequenceEqual(input.Metrics)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Date != null)
      {
        hashCode = (hashCode * 59) + Date.GetHashCode();
      }
      if (Metrics != null)
      {
        hashCode = (hashCode * 59) + Metrics.GetHashCode();
      }
      return hashCode;
    }
  }
}
