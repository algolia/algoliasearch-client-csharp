//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.AbtestingV3;

/// <summary>
/// Defines a metric to be retrieved during an A/B test.
/// </summary>
public partial class CreateMetric
{
  /// <summary>
  /// Initializes a new instance of the CreateMetric class.
  /// </summary>
  [JsonConstructor]
  public CreateMetric() { }

  /// <summary>
  /// Initializes a new instance of the CreateMetric class.
  /// </summary>
  /// <param name="name">Name of the metric. (required).</param>
  public CreateMetric(string name)
  {
    Name = name ?? throw new ArgumentNullException(nameof(name));
  }

  /// <summary>
  /// Name of the metric.
  /// </summary>
  /// <value>Name of the metric.</value>
  [JsonPropertyName("name")]
  public string Name { get; set; }

  /// <summary>
  /// Dimension of the metric, for example, in case of a revenue metric it could be USD, EUR...
  /// </summary>
  /// <value>Dimension of the metric, for example, in case of a revenue metric it could be USD, EUR...</value>
  [JsonPropertyName("dimension")]
  public string Dimension { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class CreateMetric {\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  Dimension: ").Append(Dimension).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not CreateMetric input)
    {
      return false;
    }

    return (Name == input.Name || (Name != null && Name.Equals(input.Name)))
      && (Dimension == input.Dimension || (Dimension != null && Dimension.Equals(input.Dimension)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Name != null)
      {
        hashCode = (hashCode * 59) + Name.GetHashCode();
      }
      if (Dimension != null)
      {
        hashCode = (hashCode * 59) + Dimension.GetHashCode();
      }
      return hashCode;
    }
  }
}
