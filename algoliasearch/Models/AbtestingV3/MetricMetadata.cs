//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.AbtestingV3;

/// <summary>
/// Metric specific metadata.
/// </summary>
public partial class MetricMetadata
{
  /// <summary>
  /// Initializes a new instance of the MetricMetadata class.
  /// </summary>
  public MetricMetadata() { }

  /// <summary>
  /// Only present in case the metric is 'revenue'. It is the amount exceeding the 95th percentile of global revenue transactions involved in the AB Test. This amount is not considered when calculating statistical significance. It is tied to a per revenue-currency pair contrary to other global filter effects (such as outliers and empty search count).
  /// </summary>
  /// <value>Only present in case the metric is 'revenue'. It is the amount exceeding the 95th percentile of global revenue transactions involved in the AB Test. This amount is not considered when calculating statistical significance. It is tied to a per revenue-currency pair contrary to other global filter effects (such as outliers and empty search count). </value>
  [JsonPropertyName("winsorizedValue")]
  public double? WinsorizedValue { get; set; }

  /// <summary>
  /// Mean value for this metric.
  /// </summary>
  /// <value>Mean value for this metric.</value>
  [JsonPropertyName("mean")]
  public double? Mean { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class MetricMetadata {\n");
    sb.Append("  WinsorizedValue: ").Append(WinsorizedValue).Append("\n");
    sb.Append("  Mean: ").Append(Mean).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not MetricMetadata input)
    {
      return false;
    }

    return (
        WinsorizedValue == input.WinsorizedValue || WinsorizedValue.Equals(input.WinsorizedValue)
      ) && (Mean == input.Mean || Mean.Equals(input.Mean));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + WinsorizedValue.GetHashCode();
      hashCode = (hashCode * 59) + Mean.GetHashCode();
      return hashCode;
    }
  }
}
