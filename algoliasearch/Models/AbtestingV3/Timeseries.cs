//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.AbtestingV3;

/// <summary>
/// Timeseries
/// </summary>
public partial class Timeseries
{
  /// <summary>
  /// Initializes a new instance of the Timeseries class.
  /// </summary>
  [JsonConstructor]
  public Timeseries() { }

  /// <summary>
  /// Initializes a new instance of the Timeseries class.
  /// </summary>
  /// <param name="abTestID">Unique A/B test identifier. (required).</param>
  /// <param name="variants">A/B test timeseries variants.  The first variant is your _control_ index, typically your production index. All of the additional variants are indexes with changed settings that you want to test against the control.  (required).</param>
  public Timeseries(int abTestID, List<TimeseriesVariant> variants)
  {
    AbTestID = abTestID;
    Variants = variants ?? throw new ArgumentNullException(nameof(variants));
  }

  /// <summary>
  /// Unique A/B test identifier.
  /// </summary>
  /// <value>Unique A/B test identifier.</value>
  [JsonPropertyName("abTestID")]
  public int AbTestID { get; set; }

  /// <summary>
  /// A/B test timeseries variants.  The first variant is your _control_ index, typically your production index. All of the additional variants are indexes with changed settings that you want to test against the control.
  /// </summary>
  /// <value>A/B test timeseries variants.  The first variant is your _control_ index, typically your production index. All of the additional variants are indexes with changed settings that you want to test against the control. </value>
  [JsonPropertyName("variants")]
  public List<TimeseriesVariant> Variants { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Timeseries {\n");
    sb.Append("  AbTestID: ").Append(AbTestID).Append("\n");
    sb.Append("  Variants: ").Append(Variants).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Timeseries input)
    {
      return false;
    }

    return (AbTestID == input.AbTestID || AbTestID.Equals(input.AbTestID))
      && (
        Variants == input.Variants
        || Variants != null && input.Variants != null && Variants.SequenceEqual(input.Variants)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + AbTestID.GetHashCode();
      if (Variants != null)
      {
        hashCode = (hashCode * 59) + Variants.GetHashCode();
      }
      return hashCode;
    }
  }
}
