//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.AbtestingV3;

/// <summary>
/// Variant
/// </summary>
public partial class Variant
{
  /// <summary>
  /// Initializes a new instance of the Variant class.
  /// </summary>
  [JsonConstructor]
  public Variant() { }

  /// <summary>
  /// Initializes a new instance of the Variant class.
  /// </summary>
  /// <param name="description">Description for this variant. (required).</param>
  /// <param name="index">Index name of the A/B test variant (case-sensitive). (required).</param>
  /// <param name="trafficPercentage">Percentage of search requests each variant receives. (required).</param>
  /// <param name="metrics">All ABTest metrics that were defined during test creation. (required).</param>
  public Variant(
    string description,
    string index,
    int trafficPercentage,
    List<MetricResult> metrics
  )
  {
    Description = description ?? throw new ArgumentNullException(nameof(description));
    Index = index ?? throw new ArgumentNullException(nameof(index));
    TrafficPercentage = trafficPercentage;
    Metrics = metrics ?? throw new ArgumentNullException(nameof(metrics));
  }

  /// <summary>
  /// Description for this variant.
  /// </summary>
  /// <value>Description for this variant.</value>
  [JsonPropertyName("description")]
  public string Description { get; set; }

  /// <summary>
  /// Estimated number of searches required to achieve the desired statistical significance.  The A/B test configuration must include a `minimumDetectableEffect` setting for this number to be included in the response.
  /// </summary>
  /// <value>Estimated number of searches required to achieve the desired statistical significance.  The A/B test configuration must include a `minimumDetectableEffect` setting for this number to be included in the response. </value>
  [JsonPropertyName("estimatedSampleSize")]
  public int? EstimatedSampleSize { get; set; }

  /// <summary>
  /// Index name of the A/B test variant (case-sensitive).
  /// </summary>
  /// <value>Index name of the A/B test variant (case-sensitive).</value>
  [JsonPropertyName("index")]
  public string Index { get; set; }

  /// <summary>
  /// Percentage of search requests each variant receives.
  /// </summary>
  /// <value>Percentage of search requests each variant receives.</value>
  [JsonPropertyName("trafficPercentage")]
  public int TrafficPercentage { get; set; }

  /// <summary>
  /// All ABTest metrics that were defined during test creation.
  /// </summary>
  /// <value>All ABTest metrics that were defined during test creation.</value>
  [JsonPropertyName("metrics")]
  public List<MetricResult> Metrics { get; set; }

  /// <summary>
  /// Gets or Sets Metadata
  /// </summary>
  [JsonPropertyName("metadata")]
  public VariantMetadata Metadata { get; set; }

  /// <summary>
  /// Search parameters applied to this variant when the same index is used for multiple variants. Only present if custom search parameters were provided during test creation.
  /// </summary>
  /// <value>Search parameters applied to this variant when the same index is used for multiple variants. Only present if custom search parameters were provided during test creation. </value>
  [JsonPropertyName("customSearchParameters")]
  public object CustomSearchParameters { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Variant {\n");
    sb.Append("  Description: ").Append(Description).Append("\n");
    sb.Append("  EstimatedSampleSize: ").Append(EstimatedSampleSize).Append("\n");
    sb.Append("  Index: ").Append(Index).Append("\n");
    sb.Append("  TrafficPercentage: ").Append(TrafficPercentage).Append("\n");
    sb.Append("  Metrics: ").Append(Metrics).Append("\n");
    sb.Append("  Metadata: ").Append(Metadata).Append("\n");
    sb.Append("  CustomSearchParameters: ").Append(CustomSearchParameters).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Variant input)
    {
      return false;
    }

    return (
        Description == input.Description
        || (Description != null && Description.Equals(input.Description))
      )
      && (
        EstimatedSampleSize == input.EstimatedSampleSize
        || EstimatedSampleSize.Equals(input.EstimatedSampleSize)
      )
      && (Index == input.Index || (Index != null && Index.Equals(input.Index)))
      && (
        TrafficPercentage == input.TrafficPercentage
        || TrafficPercentage.Equals(input.TrafficPercentage)
      )
      && (
        Metrics == input.Metrics
        || Metrics != null && input.Metrics != null && Metrics.SequenceEqual(input.Metrics)
      )
      && (Metadata == input.Metadata || (Metadata != null && Metadata.Equals(input.Metadata)))
      && (
        CustomSearchParameters == input.CustomSearchParameters
        || (
          CustomSearchParameters != null
          && CustomSearchParameters.Equals(input.CustomSearchParameters)
        )
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Description != null)
      {
        hashCode = (hashCode * 59) + Description.GetHashCode();
      }
      hashCode = (hashCode * 59) + EstimatedSampleSize.GetHashCode();
      if (Index != null)
      {
        hashCode = (hashCode * 59) + Index.GetHashCode();
      }
      hashCode = (hashCode * 59) + TrafficPercentage.GetHashCode();
      if (Metrics != null)
      {
        hashCode = (hashCode * 59) + Metrics.GetHashCode();
      }
      if (Metadata != null)
      {
        hashCode = (hashCode * 59) + Metadata.GetHashCode();
      }
      if (CustomSearchParameters != null)
      {
        hashCode = (hashCode * 59) + CustomSearchParameters.GetHashCode();
      }
      return hashCode;
    }
  }
}
