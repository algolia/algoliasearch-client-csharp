//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// Personalization
/// </summary>
public partial class Personalization
{
  /// <summary>
  /// Initializes a new instance of the Personalization class.
  /// </summary>
  public Personalization()
  {
  }

  /// <summary>
  /// The score of the filters.
  /// </summary>
  /// <value>The score of the filters.</value>
  [JsonPropertyName("filtersScore")]
  public int? FiltersScore { get; set; }

  /// <summary>
  /// The score of the ranking.
  /// </summary>
  /// <value>The score of the ranking.</value>
  [JsonPropertyName("rankingScore")]
  public int? RankingScore { get; set; }

  /// <summary>
  /// The score of the event.
  /// </summary>
  /// <value>The score of the event.</value>
  [JsonPropertyName("score")]
  public int? Score { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Personalization {\n");
    sb.Append("  FiltersScore: ").Append(FiltersScore).Append("\n");
    sb.Append("  RankingScore: ").Append(RankingScore).Append("\n");
    sb.Append("  Score: ").Append(Score).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Personalization input)
    {
      return false;
    }

    return
        (FiltersScore == input.FiltersScore || FiltersScore.Equals(input.FiltersScore)) &&
        (RankingScore == input.RankingScore || RankingScore.Equals(input.RankingScore)) &&
        (Score == input.Score || Score.Equals(input.Score));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + FiltersScore.GetHashCode();
      hashCode = (hashCode * 59) + RankingScore.GetHashCode();
      hashCode = (hashCode * 59) + Score.GetHashCode();
      return hashCode;
    }
  }

}

