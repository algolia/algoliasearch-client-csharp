//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// RedirectRuleIndexMetadata
/// </summary>
public partial class RedirectRuleIndexMetadata
{
  /// <summary>
  /// Initializes a new instance of the RedirectRuleIndexMetadata class.
  /// </summary>
  [JsonConstructor]
  public RedirectRuleIndexMetadata() { }
  /// <summary>
  /// Initializes a new instance of the RedirectRuleIndexMetadata class.
  /// </summary>
  /// <param name="source">Source index for the redirect rule. (required).</param>
  /// <param name="dest">Destination index for the redirect rule. (required).</param>
  /// <param name="reason">Reason for the redirect rule. (required).</param>
  /// <param name="succeed">Redirect rule status. (required).</param>
  /// <param name="data">data (required).</param>
  public RedirectRuleIndexMetadata(string source, string dest, string reason, bool succeed, RedirectRuleIndexData data)
  {
    Source = source ?? throw new ArgumentNullException(nameof(source));
    Dest = dest ?? throw new ArgumentNullException(nameof(dest));
    Reason = reason ?? throw new ArgumentNullException(nameof(reason));
    Succeed = succeed;
    Data = data ?? throw new ArgumentNullException(nameof(data));
  }

  /// <summary>
  /// Source index for the redirect rule.
  /// </summary>
  /// <value>Source index for the redirect rule.</value>
  [JsonPropertyName("source")]
  public string Source { get; set; }

  /// <summary>
  /// Destination index for the redirect rule.
  /// </summary>
  /// <value>Destination index for the redirect rule.</value>
  [JsonPropertyName("dest")]
  public string Dest { get; set; }

  /// <summary>
  /// Reason for the redirect rule.
  /// </summary>
  /// <value>Reason for the redirect rule.</value>
  [JsonPropertyName("reason")]
  public string Reason { get; set; }

  /// <summary>
  /// Redirect rule status.
  /// </summary>
  /// <value>Redirect rule status.</value>
  [JsonPropertyName("succeed")]
  public bool Succeed { get; set; }

  /// <summary>
  /// Gets or Sets Data
  /// </summary>
  [JsonPropertyName("data")]
  public RedirectRuleIndexData Data { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class RedirectRuleIndexMetadata {\n");
    sb.Append("  Source: ").Append(Source).Append("\n");
    sb.Append("  Dest: ").Append(Dest).Append("\n");
    sb.Append("  Reason: ").Append(Reason).Append("\n");
    sb.Append("  Succeed: ").Append(Succeed).Append("\n");
    sb.Append("  Data: ").Append(Data).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not RedirectRuleIndexMetadata input)
    {
      return false;
    }

    return
        (Source == input.Source || (Source != null && Source.Equals(input.Source))) &&
        (Dest == input.Dest || (Dest != null && Dest.Equals(input.Dest))) &&
        (Reason == input.Reason || (Reason != null && Reason.Equals(input.Reason))) &&
        (Succeed == input.Succeed || Succeed.Equals(input.Succeed)) &&
        (Data == input.Data || (Data != null && Data.Equals(input.Data)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Source != null)
      {
        hashCode = (hashCode * 59) + Source.GetHashCode();
      }
      if (Dest != null)
      {
        hashCode = (hashCode * 59) + Dest.GetHashCode();
      }
      if (Reason != null)
      {
        hashCode = (hashCode * 59) + Reason.GetHashCode();
      }
      hashCode = (hashCode * 59) + Succeed.GetHashCode();
      if (Data != null)
      {
        hashCode = (hashCode * 59) + Data.GetHashCode();
      }
      return hashCode;
    }
  }

}

