//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// CompositionIdRankingInfo
/// </summary>
public partial class CompositionIdRankingInfo
{
  /// <summary>
  /// Initializes a new instance of the CompositionIdRankingInfo class.
  /// </summary>
  [JsonConstructor]
  public CompositionIdRankingInfo() { }
  /// <summary>
  /// Initializes a new instance of the CompositionIdRankingInfo class.
  /// </summary>
  /// <param name="index">index (required).</param>
  /// <param name="injectedItemKey">injectedItemKey (required).</param>
  public CompositionIdRankingInfo(string index, string injectedItemKey)
  {
    Index = index ?? throw new ArgumentNullException(nameof(index));
    InjectedItemKey = injectedItemKey ?? throw new ArgumentNullException(nameof(injectedItemKey));
  }

  /// <summary>
  /// Gets or Sets Index
  /// </summary>
  [JsonPropertyName("index")]
  public string Index { get; set; }

  /// <summary>
  /// Gets or Sets InjectedItemKey
  /// </summary>
  [JsonPropertyName("injectedItemKey")]
  public string InjectedItemKey { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class CompositionIdRankingInfo {\n");
    sb.Append("  Index: ").Append(Index).Append("\n");
    sb.Append("  InjectedItemKey: ").Append(InjectedItemKey).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not CompositionIdRankingInfo input)
    {
      return false;
    }

    return
        (Index == input.Index || (Index != null && Index.Equals(input.Index))) &&
        (InjectedItemKey == input.InjectedItemKey || (InjectedItemKey != null && InjectedItemKey.Equals(input.InjectedItemKey)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Index != null)
      {
        hashCode = (hashCode * 59) + Index.GetHashCode();
      }
      if (InjectedItemKey != null)
      {
        hashCode = (hashCode * 59) + InjectedItemKey.GetHashCode();
      }
      return hashCode;
    }
  }

}

