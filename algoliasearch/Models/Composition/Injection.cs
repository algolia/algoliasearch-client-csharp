//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// Injection
/// </summary>
public partial class Injection
{
  /// <summary>
  /// Initializes a new instance of the Injection class.
  /// </summary>
  [JsonConstructor]
  public Injection() { }

  /// <summary>
  /// Initializes a new instance of the Injection class.
  /// </summary>
  /// <param name="main">main (required).</param>
  public Injection(Main main)
  {
    Main = main ?? throw new ArgumentNullException(nameof(main));
  }

  /// <summary>
  /// Gets or Sets Main
  /// </summary>
  [JsonPropertyName("main")]
  public Main Main { get; set; }

  /// <summary>
  /// list of injected items of the current Composition.
  /// </summary>
  /// <value>list of injected items of the current Composition.</value>
  [JsonPropertyName("injectedItems")]
  public List<InjectedItem> InjectedItems { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Injection {\n");
    sb.Append("  Main: ").Append(Main).Append("\n");
    sb.Append("  InjectedItems: ").Append(InjectedItems).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Injection input)
    {
      return false;
    }

    return (Main == input.Main || (Main != null && Main.Equals(input.Main)))
      && (
        InjectedItems == input.InjectedItems
        || InjectedItems != null
          && input.InjectedItems != null
          && InjectedItems.SequenceEqual(input.InjectedItems)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Main != null)
      {
        hashCode = (hashCode * 59) + Main.GetHashCode();
      }
      if (InjectedItems != null)
      {
        hashCode = (hashCode * 59) + InjectedItems.GetHashCode();
      }
      return hashCode;
    }
  }
}
