//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// MatchedGeoLocation
/// </summary>
public partial class MatchedGeoLocation
{
  /// <summary>
  /// Initializes a new instance of the MatchedGeoLocation class.
  /// </summary>
  public MatchedGeoLocation()
  {
  }

  /// <summary>
  /// Latitude of the matched location.
  /// </summary>
  /// <value>Latitude of the matched location.</value>
  [JsonPropertyName("lat")]
  public double? Lat { get; set; }

  /// <summary>
  /// Longitude of the matched location.
  /// </summary>
  /// <value>Longitude of the matched location.</value>
  [JsonPropertyName("lng")]
  public double? Lng { get; set; }

  /// <summary>
  /// Distance between the matched location and the search location (in meters).
  /// </summary>
  /// <value>Distance between the matched location and the search location (in meters).</value>
  [JsonPropertyName("distance")]
  public int? Distance { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class MatchedGeoLocation {\n");
    sb.Append("  Lat: ").Append(Lat).Append("\n");
    sb.Append("  Lng: ").Append(Lng).Append("\n");
    sb.Append("  Distance: ").Append(Distance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not MatchedGeoLocation input)
    {
      return false;
    }

    return
        (Lat == input.Lat || Lat.Equals(input.Lat)) &&
        (Lng == input.Lng || Lng.Equals(input.Lng)) &&
        (Distance == input.Distance || Distance.Equals(input.Distance));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + Lat.GetHashCode();
      hashCode = (hashCode * 59) + Lng.GetHashCode();
      hashCode = (hashCode * 59) + Distance.GetHashCode();
      return hashCode;
    }
  }

}

