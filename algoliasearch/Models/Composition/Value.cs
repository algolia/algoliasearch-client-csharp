//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// Value
/// </summary>
public partial class Value
{

  /// <summary>
  /// Gets or Sets SortRemainingBy
  /// </summary>
  [JsonPropertyName("sortRemainingBy")]
  public SortRemainingBy? SortRemainingBy { get; set; }
  /// <summary>
  /// Initializes a new instance of the Value class.
  /// </summary>
  public Value()
  {
  }

  /// <summary>
  /// Explicit order of facets or facet values.  This setting lets you always show specific facets or facet values at the top of the list. 
  /// </summary>
  /// <value>Explicit order of facets or facet values.  This setting lets you always show specific facets or facet values at the top of the list. </value>
  [JsonPropertyName("order")]
  public List<string> Order { get; set; }

  /// <summary>
  /// Hide facet values.
  /// </summary>
  /// <value>Hide facet values.</value>
  [JsonPropertyName("hide")]
  public List<string> Hide { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Value {\n");
    sb.Append("  Order: ").Append(Order).Append("\n");
    sb.Append("  SortRemainingBy: ").Append(SortRemainingBy).Append("\n");
    sb.Append("  Hide: ").Append(Hide).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Value input)
    {
      return false;
    }

    return
        (Order == input.Order || Order != null && input.Order != null && Order.SequenceEqual(input.Order)) &&
        (SortRemainingBy == input.SortRemainingBy || SortRemainingBy.Equals(input.SortRemainingBy)) &&
        (Hide == input.Hide || Hide != null && input.Hide != null && Hide.SequenceEqual(input.Hide));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Order != null)
      {
        hashCode = (hashCode * 59) + Order.GetHashCode();
      }
      hashCode = (hashCode * 59) + SortRemainingBy.GetHashCode();
      if (Hide != null)
      {
        hashCode = (hashCode * 59) + Hide.GetHashCode();
      }
      return hashCode;
    }
  }

}

