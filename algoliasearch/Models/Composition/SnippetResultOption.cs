//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// Snippets that show the context around a matching search query.
/// </summary>
public partial class SnippetResultOption
{

  /// <summary>
  /// Gets or Sets MatchLevel
  /// </summary>
  [JsonPropertyName("matchLevel")]
  public MatchLevel? MatchLevel { get; set; }
  /// <summary>
  /// Initializes a new instance of the SnippetResultOption class.
  /// </summary>
  [JsonConstructor]
  public SnippetResultOption() { }
  /// <summary>
  /// Initializes a new instance of the SnippetResultOption class.
  /// </summary>
  /// <param name="value">Highlighted attribute value, including HTML tags. (required).</param>
  /// <param name="matchLevel">matchLevel (required).</param>
  public SnippetResultOption(string value, MatchLevel? matchLevel)
  {
    Value = value ?? throw new ArgumentNullException(nameof(value));
    MatchLevel = matchLevel;
  }

  /// <summary>
  /// Highlighted attribute value, including HTML tags.
  /// </summary>
  /// <value>Highlighted attribute value, including HTML tags.</value>
  [JsonPropertyName("value")]
  public string Value { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SnippetResultOption {\n");
    sb.Append("  Value: ").Append(Value).Append("\n");
    sb.Append("  MatchLevel: ").Append(MatchLevel).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SnippetResultOption input)
    {
      return false;
    }

    return
        (Value == input.Value || (Value != null && Value.Equals(input.Value))) &&
        (MatchLevel == input.MatchLevel || MatchLevel.Equals(input.MatchLevel));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Value != null)
      {
        hashCode = (hashCode * 59) + Value.GetHashCode();
      }
      hashCode = (hashCode * 59) + MatchLevel.GetHashCode();
      return hashCode;
    }
  }

}

