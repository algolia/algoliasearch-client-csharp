//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// CompositionRule
/// </summary>
public partial class CompositionRule
{
  /// <summary>
  /// Initializes a new instance of the CompositionRule class.
  /// </summary>
  [JsonConstructor]
  public CompositionRule() { }

  /// <summary>
  /// Initializes a new instance of the CompositionRule class.
  /// </summary>
  /// <param name="objectID">Composition rule unique identifier. (required).</param>
  /// <param name="conditions">Conditions that trigger a composition rule. (required).</param>
  /// <param name="consequence">consequence (required).</param>
  public CompositionRule(
    string objectID,
    List<Condition> conditions,
    CompositionRuleConsequence consequence
  )
  {
    ObjectID = objectID ?? throw new ArgumentNullException(nameof(objectID));
    Conditions = conditions ?? throw new ArgumentNullException(nameof(conditions));
    Consequence = consequence ?? throw new ArgumentNullException(nameof(consequence));
  }

  /// <summary>
  /// Composition rule unique identifier.
  /// </summary>
  /// <value>Composition rule unique identifier.</value>
  [JsonPropertyName("objectID")]
  public string ObjectID { get; set; }

  /// <summary>
  /// Conditions that trigger a composition rule.
  /// </summary>
  /// <value>Conditions that trigger a composition rule.</value>
  [JsonPropertyName("conditions")]
  public List<Condition> Conditions { get; set; }

  /// <summary>
  /// Gets or Sets Consequence
  /// </summary>
  [JsonPropertyName("consequence")]
  public CompositionRuleConsequence Consequence { get; set; }

  /// <summary>
  /// Description of the rule's purpose to help you distinguish between different rules.
  /// </summary>
  /// <value>Description of the rule's purpose to help you distinguish between different rules.</value>
  [JsonPropertyName("description")]
  public string Description { get; set; }

  /// <summary>
  /// Whether the rule is active.
  /// </summary>
  /// <value>Whether the rule is active.</value>
  [JsonPropertyName("enabled")]
  public bool? Enabled { get; set; }

  /// <summary>
  /// Time periods when the rule is active.
  /// </summary>
  /// <value>Time periods when the rule is active.</value>
  [JsonPropertyName("validity")]
  public List<TimeRange> Validity { get; set; }

  /// <summary>
  /// A list of tags.
  /// </summary>
  /// <value>A list of tags.</value>
  [JsonPropertyName("tags")]
  public List<string> Tags { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class CompositionRule {\n");
    sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
    sb.Append("  Conditions: ").Append(Conditions).Append("\n");
    sb.Append("  Consequence: ").Append(Consequence).Append("\n");
    sb.Append("  Description: ").Append(Description).Append("\n");
    sb.Append("  Enabled: ").Append(Enabled).Append("\n");
    sb.Append("  Validity: ").Append(Validity).Append("\n");
    sb.Append("  Tags: ").Append(Tags).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not CompositionRule input)
    {
      return false;
    }

    return (ObjectID == input.ObjectID || (ObjectID != null && ObjectID.Equals(input.ObjectID)))
      && (
        Conditions == input.Conditions
        || Conditions != null
          && input.Conditions != null
          && Conditions.SequenceEqual(input.Conditions)
      )
      && (
        Consequence == input.Consequence
        || (Consequence != null && Consequence.Equals(input.Consequence))
      )
      && (
        Description == input.Description
        || (Description != null && Description.Equals(input.Description))
      )
      && (Enabled == input.Enabled || Enabled.Equals(input.Enabled))
      && (
        Validity == input.Validity
        || Validity != null && input.Validity != null && Validity.SequenceEqual(input.Validity)
      )
      && (
        Tags == input.Tags || Tags != null && input.Tags != null && Tags.SequenceEqual(input.Tags)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ObjectID != null)
      {
        hashCode = (hashCode * 59) + ObjectID.GetHashCode();
      }
      if (Conditions != null)
      {
        hashCode = (hashCode * 59) + Conditions.GetHashCode();
      }
      if (Consequence != null)
      {
        hashCode = (hashCode * 59) + Consequence.GetHashCode();
      }
      if (Description != null)
      {
        hashCode = (hashCode * 59) + Description.GetHashCode();
      }
      hashCode = (hashCode * 59) + Enabled.GetHashCode();
      if (Validity != null)
      {
        hashCode = (hashCode * 59) + Validity.GetHashCode();
      }
      if (Tags != null)
      {
        hashCode = (hashCode * 59) + Tags.GetHashCode();
      }
      return hashCode;
    }
  }
}
