//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// Whether certain properties of the search response are calculated exhaustive (exact) or approximated.
/// </summary>
public partial class Exhaustive
{
  /// <summary>
  /// Initializes a new instance of the Exhaustive class.
  /// </summary>
  public Exhaustive()
  {
  }

  /// <summary>
  /// Whether the facet count is exhaustive (`true`) or approximate (`false`). See the [related discussion](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).
  /// </summary>
  /// <value>Whether the facet count is exhaustive (`true`) or approximate (`false`). See the [related discussion](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).</value>
  [JsonPropertyName("facetsCount")]
  public bool? FacetsCount { get; set; }

  /// <summary>
  /// The value is `false` if not all facet values are retrieved.
  /// </summary>
  /// <value>The value is `false` if not all facet values are retrieved.</value>
  [JsonPropertyName("facetValues")]
  public bool? FacetValues { get; set; }

  /// <summary>
  /// Whether the `nbHits` is exhaustive (`true`) or approximate (`false`). When the query takes more than 50ms to be processed, the engine makes an approximation. This can happen when using complex filters on millions of records, when typo-tolerance was not exhaustive, or when enough hits have been retrieved (for example, after the engine finds 10,000 exact matches). `nbHits` is reported as non-exhaustive whenever an approximation is made, even if the approximation didn’t, in the end, impact the exhaustivity of the query.
  /// </summary>
  /// <value>Whether the `nbHits` is exhaustive (`true`) or approximate (`false`). When the query takes more than 50ms to be processed, the engine makes an approximation. This can happen when using complex filters on millions of records, when typo-tolerance was not exhaustive, or when enough hits have been retrieved (for example, after the engine finds 10,000 exact matches). `nbHits` is reported as non-exhaustive whenever an approximation is made, even if the approximation didn’t, in the end, impact the exhaustivity of the query.</value>
  [JsonPropertyName("nbHits")]
  public bool? NbHits { get; set; }

  /// <summary>
  /// Rules matching exhaustivity. The value is `false` if rules were enable for this query, and could not be fully processed due a timeout. This is generally caused by the number of alternatives (such as typos) which is too large.
  /// </summary>
  /// <value>Rules matching exhaustivity. The value is `false` if rules were enable for this query, and could not be fully processed due a timeout. This is generally caused by the number of alternatives (such as typos) which is too large.</value>
  [JsonPropertyName("rulesMatch")]
  public bool? RulesMatch { get; set; }

  /// <summary>
  /// Whether the typo search was exhaustive (`true`) or approximate (`false`). An approximation is done when the typo search query part takes more than 10% of the query budget (ie. 5ms by default) to be processed (this can happen when a lot of typo alternatives exist for the query). This field will not be included when typo-tolerance is entirely disabled.
  /// </summary>
  /// <value>Whether the typo search was exhaustive (`true`) or approximate (`false`). An approximation is done when the typo search query part takes more than 10% of the query budget (ie. 5ms by default) to be processed (this can happen when a lot of typo alternatives exist for the query). This field will not be included when typo-tolerance is entirely disabled.</value>
  [JsonPropertyName("typo")]
  public bool? Typo { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Exhaustive {\n");
    sb.Append("  FacetsCount: ").Append(FacetsCount).Append("\n");
    sb.Append("  FacetValues: ").Append(FacetValues).Append("\n");
    sb.Append("  NbHits: ").Append(NbHits).Append("\n");
    sb.Append("  RulesMatch: ").Append(RulesMatch).Append("\n");
    sb.Append("  Typo: ").Append(Typo).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Exhaustive input)
    {
      return false;
    }

    return
        (FacetsCount == input.FacetsCount || FacetsCount.Equals(input.FacetsCount)) &&
        (FacetValues == input.FacetValues || FacetValues.Equals(input.FacetValues)) &&
        (NbHits == input.NbHits || NbHits.Equals(input.NbHits)) &&
        (RulesMatch == input.RulesMatch || RulesMatch.Equals(input.RulesMatch)) &&
        (Typo == input.Typo || Typo.Equals(input.Typo));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + FacetsCount.GetHashCode();
      hashCode = (hashCode * 59) + FacetValues.GetHashCode();
      hashCode = (hashCode * 59) + NbHits.GetHashCode();
      hashCode = (hashCode * 59) + RulesMatch.GetHashCode();
      hashCode = (hashCode * 59) + Typo.GetHashCode();
      return hashCode;
    }
  }

}

