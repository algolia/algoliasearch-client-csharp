//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// Adds the provided metadata to each injected hit via an `_extra` attribute.
/// </summary>
public partial class InjectedItemHitsMetadata
{
  /// <summary>
  /// Initializes a new instance of the InjectedItemHitsMetadata class.
  /// </summary>
  public InjectedItemHitsMetadata() { }

  /// <summary>
  /// When true, the `_injectedItemKey` field is set in the `_extra` object of each affected hit.
  /// </summary>
  /// <value>When true, the `_injectedItemKey` field is set in the `_extra` object of each affected hit.</value>
  [JsonPropertyName("addItemKey")]
  public bool? AddItemKey { get; set; }

  /// <summary>
  /// The user-defined key-value pairs that will be placed in the `_extra` field of each affected hit.
  /// </summary>
  /// <value>The user-defined key-value pairs that will be placed in the `_extra` field of each affected hit.</value>
  [JsonPropertyName("extra")]
  public Dictionary<string, object> Extra { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class InjectedItemHitsMetadata {\n");
    sb.Append("  AddItemKey: ").Append(AddItemKey).Append("\n");
    sb.Append("  Extra: ").Append(Extra).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not InjectedItemHitsMetadata input)
    {
      return false;
    }

    return (AddItemKey == input.AddItemKey || AddItemKey.Equals(input.AddItemKey))
      && (
        Extra == input.Extra
        || Extra != null && input.Extra != null && Extra.SequenceEqual(input.Extra)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + AddItemKey.GetHashCode();
      if (Extra != null)
      {
        hashCode = (hashCode * 59) + Extra.GetHashCode();
      }
      return hashCode;
    }
  }
}
