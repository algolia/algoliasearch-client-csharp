//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// Injected items will originate from a search request performed on the specified index.
/// </summary>
public partial class SearchSource
{
  /// <summary>
  /// Initializes a new instance of the SearchSource class.
  /// </summary>
  [JsonConstructor]
  public SearchSource() { }

  /// <summary>
  /// Initializes a new instance of the SearchSource class.
  /// </summary>
  /// <param name="search">search (required).</param>
  public SearchSource(Search search)
  {
    Search = search ?? throw new ArgumentNullException(nameof(search));
  }

  /// <summary>
  /// Gets or Sets Search
  /// </summary>
  [JsonPropertyName("search")]
  public Search Search { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SearchSource {\n");
    sb.Append("  Search: ").Append(Search).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SearchSource input)
    {
      return false;
    }

    return (Search == input.Search || (Search != null && Search.Equals(input.Search)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Search != null)
      {
        hashCode = (hashCode * 59) + Search.GetHashCode();
      }
      return hashCode;
    }
  }
}
