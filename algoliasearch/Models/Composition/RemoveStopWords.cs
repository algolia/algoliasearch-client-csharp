//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// Removes stop words from the search query.  Stop words are common words like articles, conjunctions, prepositions, or pronouns that have little or no meaning on their own. In English, \"the\", \"a\", or \"and\" are stop words.  You should only use this feature for the languages used in your index.
/// </summary>
[JsonConverter(typeof(RemoveStopWordsJsonConverter))]
public partial class RemoveStopWords : AbstractSchema
{
  /// <summary>
  /// Initializes a new instance of the RemoveStopWords class
  /// with a List{SupportedLanguage}
  /// </summary>
  /// <param name="actualInstance">An instance of List<SupportedLanguage>.</param>
  public RemoveStopWords(List<SupportedLanguage> actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the RemoveStopWords class
  /// with a bool
  /// </summary>
  /// <param name="actualInstance">An instance of bool.</param>
  public RemoveStopWords(bool actualInstance)
  {
    ActualInstance = actualInstance;
  }

  /// <summary>
  /// Gets or Sets ActualInstance
  /// </summary>
  public sealed override object ActualInstance { get; set; }

  /// <summary>
  /// Get the actual instance of `List{SupportedLanguage}`. If the actual instance is not `List{SupportedLanguage}`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of List&lt;SupportedLanguage&gt;</returns>
  public List<SupportedLanguage> AsListSupportedLanguage()
  {
    return (List<SupportedLanguage>)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `bool`. If the actual instance is not `bool`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of bool</returns>
  public bool AsBool()
  {
    return (bool)ActualInstance;
  }

  /// <summary>
  /// Check if the actual instance is of `List{SupportedLanguage}` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsListSupportedLanguage()
  {
    return ActualInstance.GetType() == typeof(List<SupportedLanguage>);
  }

  /// <summary>
  /// Check if the actual instance is of `bool` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsBool()
  {
    return ActualInstance.GetType() == typeof(bool);
  }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    var sb = new StringBuilder();
    sb.Append("class RemoveStopWords {\n");
    sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public override string ToJson()
  {
    return JsonSerializer.Serialize(ActualInstance, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not RemoveStopWords input)
    {
      return false;
    }

    return ActualInstance.Equals(input.ActualInstance);
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ActualInstance != null)
        hashCode = hashCode * 59 + ActualInstance.GetHashCode();
      return hashCode;
    }
  }
}

/// <summary>
/// Custom JSON converter for RemoveStopWords
/// </summary>
public class RemoveStopWordsJsonConverter : JsonConverter<RemoveStopWords>
{
  /// <summary>
  /// Check if the object can be converted
  /// </summary>
  /// <param name="objectType">Object type</param>
  /// <returns>True if the object can be converted</returns>
  public override bool CanConvert(Type objectType)
  {
    return objectType == typeof(RemoveStopWords);
  }

  /// <summary>
  /// To convert a JSON string into an object
  /// </summary>
  /// <param name="reader">JSON reader</param>
  /// <param name="typeToConvert">Object type</param>
  /// <param name="options">Serializer options</param>
  /// <returns>The object converted from the JSON string</returns>
  public override RemoveStopWords Read(
    ref Utf8JsonReader reader,
    Type typeToConvert,
    JsonSerializerOptions options
  )
  {
    var jsonDocument = JsonDocument.ParseValue(ref reader);
    var root = jsonDocument.RootElement;
    if (root.ValueKind == JsonValueKind.Array)
    {
      try
      {
        return new RemoveStopWords(
          jsonDocument.Deserialize<List<SupportedLanguage>>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into List<SupportedLanguage>: {exception}"
        );
      }
    }
    if (root.ValueKind == JsonValueKind.True || root.ValueKind == JsonValueKind.False)
    {
      try
      {
        return new RemoveStopWords(jsonDocument.Deserialize<bool>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine($"Failed to deserialize into bool: {exception}");
      }
    }
    throw new InvalidDataException(
      $"The JSON string cannot be deserialized into any schema defined."
    );
  }

  /// <summary>
  /// To write the JSON string
  /// </summary>
  /// <param name="writer">JSON writer</param>
  /// <param name="value">RemoveStopWords to be converted into a JSON string</param>
  /// <param name="options">JSON Serializer options</param>
  public override void Write(
    Utf8JsonWriter writer,
    RemoveStopWords value,
    JsonSerializerOptions options
  )
  {
    writer.WriteRawValue(value.ToJson());
  }
}
