//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Composition;

/// <summary>
/// SearchForFacetValuesResults
/// </summary>
public partial class SearchForFacetValuesResults
{
  /// <summary>
  /// Initializes a new instance of the SearchForFacetValuesResults class.
  /// </summary>
  [JsonConstructor]
  public SearchForFacetValuesResults() { }
  /// <summary>
  /// Initializes a new instance of the SearchForFacetValuesResults class.
  /// </summary>
  /// <param name="indexName">indexName (required).</param>
  /// <param name="facetHits">Matching facet values. (required).</param>
  /// <param name="exhaustiveFacetsCount">Whether the facet count is exhaustive (true) or approximate (false). For more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).  (required).</param>
  public SearchForFacetValuesResults(string indexName, List<FacetHits> facetHits, bool exhaustiveFacetsCount)
  {
    IndexName = indexName ?? throw new ArgumentNullException(nameof(indexName));
    FacetHits = facetHits ?? throw new ArgumentNullException(nameof(facetHits));
    ExhaustiveFacetsCount = exhaustiveFacetsCount;
  }

  /// <summary>
  /// Gets or Sets IndexName
  /// </summary>
  [JsonPropertyName("indexName")]
  public string IndexName { get; set; }

  /// <summary>
  /// Matching facet values.
  /// </summary>
  /// <value>Matching facet values.</value>
  [JsonPropertyName("facetHits")]
  public List<FacetHits> FacetHits { get; set; }

  /// <summary>
  /// Whether the facet count is exhaustive (true) or approximate (false). For more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-). 
  /// </summary>
  /// <value>Whether the facet count is exhaustive (true) or approximate (false). For more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-). </value>
  [JsonPropertyName("exhaustiveFacetsCount")]
  public bool ExhaustiveFacetsCount { get; set; }

  /// <summary>
  /// Time the server took to process the request, in milliseconds.
  /// </summary>
  /// <value>Time the server took to process the request, in milliseconds.</value>
  [JsonPropertyName("processingTimeMS")]
  public int? ProcessingTimeMS { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SearchForFacetValuesResults {\n");
    sb.Append("  IndexName: ").Append(IndexName).Append("\n");
    sb.Append("  FacetHits: ").Append(FacetHits).Append("\n");
    sb.Append("  ExhaustiveFacetsCount: ").Append(ExhaustiveFacetsCount).Append("\n");
    sb.Append("  ProcessingTimeMS: ").Append(ProcessingTimeMS).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SearchForFacetValuesResults input)
    {
      return false;
    }

    return
        (IndexName == input.IndexName || (IndexName != null && IndexName.Equals(input.IndexName))) &&
        (FacetHits == input.FacetHits || FacetHits != null && input.FacetHits != null && FacetHits.SequenceEqual(input.FacetHits)) &&
        (ExhaustiveFacetsCount == input.ExhaustiveFacetsCount || ExhaustiveFacetsCount.Equals(input.ExhaustiveFacetsCount)) &&
        (ProcessingTimeMS == input.ProcessingTimeMS || ProcessingTimeMS.Equals(input.ProcessingTimeMS));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (IndexName != null)
      {
        hashCode = (hashCode * 59) + IndexName.GetHashCode();
      }
      if (FacetHits != null)
      {
        hashCode = (hashCode * 59) + FacetHits.GetHashCode();
      }
      hashCode = (hashCode * 59) + ExhaustiveFacetsCount.GetHashCode();
      hashCode = (hashCode * 59) + ProcessingTimeMS.GetHashCode();
      return hashCode;
    }
  }

}

