//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Abtesting;

/// <summary>
/// Currency
/// </summary>
public partial class Currency
{
  /// <summary>
  /// Initializes a new instance of the Currency class.
  /// </summary>
  public Currency() { }

  /// <summary>
  /// Currency code.
  /// </summary>
  /// <value>Currency code.</value>
  [JsonPropertyName("currency")]
  public string VarCurrency { get; set; }

  /// <summary>
  /// Revenue for this currency.
  /// </summary>
  /// <value>Revenue for this currency.</value>
  [JsonPropertyName("revenue")]
  public double? Revenue { get; set; }

  /// <summary>
  /// Mean for this currency.
  /// </summary>
  /// <value>Mean for this currency.</value>
  [JsonPropertyName("mean")]
  public double? Mean { get; set; }

  /// <summary>
  /// Standard deviation for this currency.
  /// </summary>
  /// <value>Standard deviation for this currency.</value>
  [JsonPropertyName("standardDeviation")]
  public double? StandardDeviation { get; set; }

  /// <summary>
  /// The amount of revenue for this currency that was removed after capping purchase amounts to the 95th percentile.
  /// </summary>
  /// <value>The amount of revenue for this currency that was removed after capping purchase amounts to the 95th percentile.</value>
  [JsonPropertyName("winsorizedAmount")]
  public double? WinsorizedAmount { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Currency {\n");
    sb.Append("  VarCurrency: ").Append(VarCurrency).Append("\n");
    sb.Append("  Revenue: ").Append(Revenue).Append("\n");
    sb.Append("  Mean: ").Append(Mean).Append("\n");
    sb.Append("  StandardDeviation: ").Append(StandardDeviation).Append("\n");
    sb.Append("  WinsorizedAmount: ").Append(WinsorizedAmount).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Currency input)
    {
      return false;
    }

    return (
        VarCurrency == input.VarCurrency
        || (VarCurrency != null && VarCurrency.Equals(input.VarCurrency))
      )
      && (Revenue == input.Revenue || Revenue.Equals(input.Revenue))
      && (Mean == input.Mean || Mean.Equals(input.Mean))
      && (
        StandardDeviation == input.StandardDeviation
        || StandardDeviation.Equals(input.StandardDeviation)
      )
      && (
        WinsorizedAmount == input.WinsorizedAmount
        || WinsorizedAmount.Equals(input.WinsorizedAmount)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (VarCurrency != null)
      {
        hashCode = (hashCode * 59) + VarCurrency.GetHashCode();
      }
      hashCode = (hashCode * 59) + Revenue.GetHashCode();
      hashCode = (hashCode * 59) + Mean.GetHashCode();
      hashCode = (hashCode * 59) + StandardDeviation.GetHashCode();
      hashCode = (hashCode * 59) + WinsorizedAmount.GetHashCode();
      return hashCode;
    }
  }
}
