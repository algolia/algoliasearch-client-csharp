//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Abtesting;

/// <summary>
/// Variant
/// </summary>
public partial class Variant
{
  /// <summary>
  /// Initializes a new instance of the Variant class.
  /// </summary>
  [JsonConstructor]
  public Variant() { }

  /// <summary>
  /// Initializes a new instance of the Variant class.
  /// </summary>
  /// <param name="addToCartCount">Number of add-to-cart events for this variant. (required).</param>
  /// <param name="clickCount">Number of click events for this variant. (required).</param>
  /// <param name="conversionCount">Number of click events for this variant. (required).</param>
  /// <param name="index">Index name of the A/B test variant (case-sensitive). (required).</param>
  /// <param name="noResultCount">Number of [searches without results](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#searches-without-results) for this variant. (required).</param>
  /// <param name="purchaseCount">Number of purchase events for this variant. (required).</param>
  /// <param name="searchCount">Number of searches for this variant. (required).</param>
  /// <param name="trafficPercentage">Percentage of search requests each variant receives. (required).</param>
  /// <param name="userCount">Number of users that made searches to this variant. (required).</param>
  /// <param name="trackedUserCount">Number of users that made tracked searches to this variant. (required).</param>
  public Variant(
    int addToCartCount,
    int clickCount,
    int conversionCount,
    string index,
    int? noResultCount,
    int purchaseCount,
    int? searchCount,
    int trafficPercentage,
    int? userCount,
    int? trackedUserCount
  )
  {
    AddToCartCount = addToCartCount;
    ClickCount = clickCount;
    ConversionCount = conversionCount;
    Index = index ?? throw new ArgumentNullException(nameof(index));
    NoResultCount = noResultCount ?? throw new ArgumentNullException(nameof(noResultCount));
    PurchaseCount = purchaseCount;
    SearchCount = searchCount ?? throw new ArgumentNullException(nameof(searchCount));
    TrafficPercentage = trafficPercentage;
    UserCount = userCount ?? throw new ArgumentNullException(nameof(userCount));
    TrackedUserCount =
      trackedUserCount ?? throw new ArgumentNullException(nameof(trackedUserCount));
  }

  /// <summary>
  /// Number of add-to-cart events for this variant.
  /// </summary>
  /// <value>Number of add-to-cart events for this variant.</value>
  [JsonPropertyName("addToCartCount")]
  public int AddToCartCount { get; set; }

  /// <summary>
  /// [Add-to-cart rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#add-to-cart-rate) for this variant.
  /// </summary>
  /// <value>[Add-to-cart rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#add-to-cart-rate) for this variant. </value>
  [JsonPropertyName("addToCartRate")]
  public double? AddToCartRate { get; set; }

  /// <summary>
  /// [Average click position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) for this variant.
  /// </summary>
  /// <value>[Average click position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) for this variant. </value>
  [JsonPropertyName("averageClickPosition")]
  public int? AverageClickPosition { get; set; }

  /// <summary>
  /// Number of click events for this variant.
  /// </summary>
  /// <value>Number of click events for this variant.</value>
  [JsonPropertyName("clickCount")]
  public int ClickCount { get; set; }

  /// <summary>
  /// [Click-through rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate) for this variant.
  /// </summary>
  /// <value>[Click-through rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate) for this variant. </value>
  [JsonPropertyName("clickThroughRate")]
  public double? ClickThroughRate { get; set; }

  /// <summary>
  /// Number of click events for this variant.
  /// </summary>
  /// <value>Number of click events for this variant.</value>
  [JsonPropertyName("conversionCount")]
  public int ConversionCount { get; set; }

  /// <summary>
  /// [Conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate) for this variant.
  /// </summary>
  /// <value>[Conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate) for this variant. </value>
  [JsonPropertyName("conversionRate")]
  public double? ConversionRate { get; set; }

  /// <summary>
  /// A/B test currencies.
  /// </summary>
  /// <value>A/B test currencies.</value>
  [JsonPropertyName("currencies")]
  public Dictionary<string, Currency> Currencies { get; set; }

  /// <summary>
  /// Description for this variant.
  /// </summary>
  /// <value>Description for this variant.</value>
  [JsonPropertyName("description")]
  public string Description { get; set; }

  /// <summary>
  /// Estimated number of searches required to achieve the desired statistical significance.  The A/B test configuration must include a `mininmumDetectableEffect` setting for this number to be included in the response.
  /// </summary>
  /// <value>Estimated number of searches required to achieve the desired statistical significance.  The A/B test configuration must include a `mininmumDetectableEffect` setting for this number to be included in the response. </value>
  [JsonPropertyName("estimatedSampleSize")]
  public int? EstimatedSampleSize { get; set; }

  /// <summary>
  /// Gets or Sets FilterEffects
  /// </summary>
  [JsonPropertyName("filterEffects")]
  public FilterEffects FilterEffects { get; set; }

  /// <summary>
  /// Index name of the A/B test variant (case-sensitive).
  /// </summary>
  /// <value>Index name of the A/B test variant (case-sensitive).</value>
  [JsonPropertyName("index")]
  public string Index { get; set; }

  /// <summary>
  /// Number of [searches without results](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#searches-without-results) for this variant.
  /// </summary>
  /// <value>Number of [searches without results](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#searches-without-results) for this variant.</value>
  [JsonPropertyName("noResultCount")]
  public int? NoResultCount { get; set; }

  /// <summary>
  /// Number of purchase events for this variant.
  /// </summary>
  /// <value>Number of purchase events for this variant.</value>
  [JsonPropertyName("purchaseCount")]
  public int PurchaseCount { get; set; }

  /// <summary>
  /// [Purchase rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#purchase-rate) for this variant.
  /// </summary>
  /// <value>[Purchase rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#purchase-rate) for this variant. </value>
  [JsonPropertyName("purchaseRate")]
  public double? PurchaseRate { get; set; }

  /// <summary>
  /// Number of searches for this variant.
  /// </summary>
  /// <value>Number of searches for this variant.</value>
  [JsonPropertyName("searchCount")]
  public int? SearchCount { get; set; }

  /// <summary>
  /// Number of tracked searches. Tracked searches are search requests where the `clickAnalytics` parameter is true.
  /// </summary>
  /// <value>Number of tracked searches. Tracked searches are search requests where the `clickAnalytics` parameter is true.</value>
  [JsonPropertyName("trackedSearchCount")]
  public int? TrackedSearchCount { get; set; }

  /// <summary>
  /// Percentage of search requests each variant receives.
  /// </summary>
  /// <value>Percentage of search requests each variant receives.</value>
  [JsonPropertyName("trafficPercentage")]
  public int TrafficPercentage { get; set; }

  /// <summary>
  /// Number of users that made searches to this variant.
  /// </summary>
  /// <value>Number of users that made searches to this variant.</value>
  [JsonPropertyName("userCount")]
  public int? UserCount { get; set; }

  /// <summary>
  /// Number of users that made tracked searches to this variant.
  /// </summary>
  /// <value>Number of users that made tracked searches to this variant.</value>
  [JsonPropertyName("trackedUserCount")]
  public int? TrackedUserCount { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Variant {\n");
    sb.Append("  AddToCartCount: ").Append(AddToCartCount).Append("\n");
    sb.Append("  AddToCartRate: ").Append(AddToCartRate).Append("\n");
    sb.Append("  AverageClickPosition: ").Append(AverageClickPosition).Append("\n");
    sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
    sb.Append("  ClickThroughRate: ").Append(ClickThroughRate).Append("\n");
    sb.Append("  ConversionCount: ").Append(ConversionCount).Append("\n");
    sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
    sb.Append("  Currencies: ").Append(Currencies).Append("\n");
    sb.Append("  Description: ").Append(Description).Append("\n");
    sb.Append("  EstimatedSampleSize: ").Append(EstimatedSampleSize).Append("\n");
    sb.Append("  FilterEffects: ").Append(FilterEffects).Append("\n");
    sb.Append("  Index: ").Append(Index).Append("\n");
    sb.Append("  NoResultCount: ").Append(NoResultCount).Append("\n");
    sb.Append("  PurchaseCount: ").Append(PurchaseCount).Append("\n");
    sb.Append("  PurchaseRate: ").Append(PurchaseRate).Append("\n");
    sb.Append("  SearchCount: ").Append(SearchCount).Append("\n");
    sb.Append("  TrackedSearchCount: ").Append(TrackedSearchCount).Append("\n");
    sb.Append("  TrafficPercentage: ").Append(TrafficPercentage).Append("\n");
    sb.Append("  UserCount: ").Append(UserCount).Append("\n");
    sb.Append("  TrackedUserCount: ").Append(TrackedUserCount).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Variant input)
    {
      return false;
    }

    return (AddToCartCount == input.AddToCartCount || AddToCartCount.Equals(input.AddToCartCount))
      && (
        AddToCartRate == input.AddToCartRate
        || (AddToCartRate != null && AddToCartRate.Equals(input.AddToCartRate))
      )
      && (
        AverageClickPosition == input.AverageClickPosition
        || (AverageClickPosition != null && AverageClickPosition.Equals(input.AverageClickPosition))
      )
      && (ClickCount == input.ClickCount || ClickCount.Equals(input.ClickCount))
      && (
        ClickThroughRate == input.ClickThroughRate
        || (ClickThroughRate != null && ClickThroughRate.Equals(input.ClickThroughRate))
      )
      && (ConversionCount == input.ConversionCount || ConversionCount.Equals(input.ConversionCount))
      && (
        ConversionRate == input.ConversionRate
        || (ConversionRate != null && ConversionRate.Equals(input.ConversionRate))
      )
      && (
        Currencies == input.Currencies
        || Currencies != null
          && input.Currencies != null
          && Currencies.SequenceEqual(input.Currencies)
      )
      && (
        Description == input.Description
        || (Description != null && Description.Equals(input.Description))
      )
      && (
        EstimatedSampleSize == input.EstimatedSampleSize
        || EstimatedSampleSize.Equals(input.EstimatedSampleSize)
      )
      && (
        FilterEffects == input.FilterEffects
        || (FilterEffects != null && FilterEffects.Equals(input.FilterEffects))
      )
      && (Index == input.Index || (Index != null && Index.Equals(input.Index)))
      && (
        NoResultCount == input.NoResultCount
        || (NoResultCount != null && NoResultCount.Equals(input.NoResultCount))
      )
      && (PurchaseCount == input.PurchaseCount || PurchaseCount.Equals(input.PurchaseCount))
      && (
        PurchaseRate == input.PurchaseRate
        || (PurchaseRate != null && PurchaseRate.Equals(input.PurchaseRate))
      )
      && (
        SearchCount == input.SearchCount
        || (SearchCount != null && SearchCount.Equals(input.SearchCount))
      )
      && (
        TrackedSearchCount == input.TrackedSearchCount
        || TrackedSearchCount.Equals(input.TrackedSearchCount)
      )
      && (
        TrafficPercentage == input.TrafficPercentage
        || TrafficPercentage.Equals(input.TrafficPercentage)
      )
      && (UserCount == input.UserCount || (UserCount != null && UserCount.Equals(input.UserCount)))
      && (
        TrackedUserCount == input.TrackedUserCount
        || (TrackedUserCount != null && TrackedUserCount.Equals(input.TrackedUserCount))
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + AddToCartCount.GetHashCode();
      if (AddToCartRate != null)
      {
        hashCode = (hashCode * 59) + AddToCartRate.GetHashCode();
      }
      if (AverageClickPosition != null)
      {
        hashCode = (hashCode * 59) + AverageClickPosition.GetHashCode();
      }
      hashCode = (hashCode * 59) + ClickCount.GetHashCode();
      if (ClickThroughRate != null)
      {
        hashCode = (hashCode * 59) + ClickThroughRate.GetHashCode();
      }
      hashCode = (hashCode * 59) + ConversionCount.GetHashCode();
      if (ConversionRate != null)
      {
        hashCode = (hashCode * 59) + ConversionRate.GetHashCode();
      }
      if (Currencies != null)
      {
        hashCode = (hashCode * 59) + Currencies.GetHashCode();
      }
      if (Description != null)
      {
        hashCode = (hashCode * 59) + Description.GetHashCode();
      }
      hashCode = (hashCode * 59) + EstimatedSampleSize.GetHashCode();
      if (FilterEffects != null)
      {
        hashCode = (hashCode * 59) + FilterEffects.GetHashCode();
      }
      if (Index != null)
      {
        hashCode = (hashCode * 59) + Index.GetHashCode();
      }
      if (NoResultCount != null)
      {
        hashCode = (hashCode * 59) + NoResultCount.GetHashCode();
      }
      hashCode = (hashCode * 59) + PurchaseCount.GetHashCode();
      if (PurchaseRate != null)
      {
        hashCode = (hashCode * 59) + PurchaseRate.GetHashCode();
      }
      if (SearchCount != null)
      {
        hashCode = (hashCode * 59) + SearchCount.GetHashCode();
      }
      hashCode = (hashCode * 59) + TrackedSearchCount.GetHashCode();
      hashCode = (hashCode * 59) + TrafficPercentage.GetHashCode();
      if (UserCount != null)
      {
        hashCode = (hashCode * 59) + UserCount.GetHashCode();
      }
      if (TrackedUserCount != null)
      {
        hashCode = (hashCode * 59) + TrackedUserCount.GetHashCode();
      }
      return hashCode;
    }
  }
}
