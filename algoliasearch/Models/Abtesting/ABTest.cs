//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Abtesting;

/// <summary>
/// ABTest
/// </summary>
public partial class ABTest
{
  /// <summary>
  /// Gets or Sets Status
  /// </summary>
  [JsonPropertyName("status")]
  public Status? Status { get; set; }

  /// <summary>
  /// Initializes a new instance of the ABTest class.
  /// </summary>
  [JsonConstructor]
  public ABTest() { }

  /// <summary>
  /// Initializes a new instance of the ABTest class.
  /// </summary>
  /// <param name="abTestID">Unique A/B test identifier. (required).</param>
  /// <param name="updatedAt">Date and time when the A/B test was last updated, in RFC 3339 format. (required).</param>
  /// <param name="createdAt">Date and time when the A/B test was created, in RFC 3339 format. (required).</param>
  /// <param name="endAt">End date and time of the A/B test, in RFC 3339 format. (required).</param>
  /// <param name="name">A/B test name. (required).</param>
  /// <param name="status">status (required).</param>
  /// <param name="variants">A/B test variants.  The first variant is your _control_ index, typically your production index. The second variant is an index with changed settings that you want to test against the control.  (required).</param>
  public ABTest(
    int abTestID,
    string updatedAt,
    string createdAt,
    string endAt,
    string name,
    Status? status,
    List<Variant> variants
  )
  {
    AbTestID = abTestID;
    UpdatedAt = updatedAt ?? throw new ArgumentNullException(nameof(updatedAt));
    CreatedAt = createdAt ?? throw new ArgumentNullException(nameof(createdAt));
    EndAt = endAt ?? throw new ArgumentNullException(nameof(endAt));
    Name = name ?? throw new ArgumentNullException(nameof(name));
    Status = status;
    Variants = variants ?? throw new ArgumentNullException(nameof(variants));
  }

  /// <summary>
  /// Unique A/B test identifier.
  /// </summary>
  /// <value>Unique A/B test identifier.</value>
  [JsonPropertyName("abTestID")]
  public int AbTestID { get; set; }

  /// <summary>
  /// Gets or Sets ClickSignificance
  /// </summary>
  [JsonPropertyName("clickSignificance")]
  public double? ClickSignificance { get; set; }

  /// <summary>
  /// Gets or Sets ConversionSignificance
  /// </summary>
  [JsonPropertyName("conversionSignificance")]
  public double? ConversionSignificance { get; set; }

  /// <summary>
  /// Gets or Sets AddToCartSignificance
  /// </summary>
  [JsonPropertyName("addToCartSignificance")]
  public double? AddToCartSignificance { get; set; }

  /// <summary>
  /// Gets or Sets PurchaseSignificance
  /// </summary>
  [JsonPropertyName("purchaseSignificance")]
  public double? PurchaseSignificance { get; set; }

  /// <summary>
  /// Gets or Sets RevenueSignificance
  /// </summary>
  [JsonPropertyName("revenueSignificance")]
  public Dictionary<string, double> RevenueSignificance { get; set; }

  /// <summary>
  /// Date and time when the A/B test was last updated, in RFC 3339 format.
  /// </summary>
  /// <value>Date and time when the A/B test was last updated, in RFC 3339 format.</value>
  [JsonPropertyName("updatedAt")]
  public string UpdatedAt { get; set; }

  /// <summary>
  /// Date and time when the A/B test was created, in RFC 3339 format.
  /// </summary>
  /// <value>Date and time when the A/B test was created, in RFC 3339 format.</value>
  [JsonPropertyName("createdAt")]
  public string CreatedAt { get; set; }

  /// <summary>
  /// End date and time of the A/B test, in RFC 3339 format.
  /// </summary>
  /// <value>End date and time of the A/B test, in RFC 3339 format.</value>
  [JsonPropertyName("endAt")]
  public string EndAt { get; set; }

  /// <summary>
  /// A/B test name.
  /// </summary>
  /// <value>A/B test name.</value>
  [JsonPropertyName("name")]
  public string Name { get; set; }

  /// <summary>
  /// A/B test variants.  The first variant is your _control_ index, typically your production index. The second variant is an index with changed settings that you want to test against the control.
  /// </summary>
  /// <value>A/B test variants.  The first variant is your _control_ index, typically your production index. The second variant is an index with changed settings that you want to test against the control. </value>
  [JsonPropertyName("variants")]
  public List<Variant> Variants { get; set; }

  /// <summary>
  /// Gets or Sets Configuration
  /// </summary>
  [JsonPropertyName("configuration")]
  public ABTestConfiguration Configuration { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class ABTest {\n");
    sb.Append("  AbTestID: ").Append(AbTestID).Append("\n");
    sb.Append("  ClickSignificance: ").Append(ClickSignificance).Append("\n");
    sb.Append("  ConversionSignificance: ").Append(ConversionSignificance).Append("\n");
    sb.Append("  AddToCartSignificance: ").Append(AddToCartSignificance).Append("\n");
    sb.Append("  PurchaseSignificance: ").Append(PurchaseSignificance).Append("\n");
    sb.Append("  RevenueSignificance: ").Append(RevenueSignificance).Append("\n");
    sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
    sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
    sb.Append("  EndAt: ").Append(EndAt).Append("\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  Status: ").Append(Status).Append("\n");
    sb.Append("  Variants: ").Append(Variants).Append("\n");
    sb.Append("  Configuration: ").Append(Configuration).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not ABTest input)
    {
      return false;
    }

    return (AbTestID == input.AbTestID || AbTestID.Equals(input.AbTestID))
      && (
        ClickSignificance == input.ClickSignificance
        || (ClickSignificance != null && ClickSignificance.Equals(input.ClickSignificance))
      )
      && (
        ConversionSignificance == input.ConversionSignificance
        || (
          ConversionSignificance != null
          && ConversionSignificance.Equals(input.ConversionSignificance)
        )
      )
      && (
        AddToCartSignificance == input.AddToCartSignificance
        || (
          AddToCartSignificance != null && AddToCartSignificance.Equals(input.AddToCartSignificance)
        )
      )
      && (
        PurchaseSignificance == input.PurchaseSignificance
        || (PurchaseSignificance != null && PurchaseSignificance.Equals(input.PurchaseSignificance))
      )
      && (
        RevenueSignificance == input.RevenueSignificance
        || RevenueSignificance != null
          && input.RevenueSignificance != null
          && RevenueSignificance.SequenceEqual(input.RevenueSignificance)
      )
      && (UpdatedAt == input.UpdatedAt || (UpdatedAt != null && UpdatedAt.Equals(input.UpdatedAt)))
      && (CreatedAt == input.CreatedAt || (CreatedAt != null && CreatedAt.Equals(input.CreatedAt)))
      && (EndAt == input.EndAt || (EndAt != null && EndAt.Equals(input.EndAt)))
      && (Name == input.Name || (Name != null && Name.Equals(input.Name)))
      && (Status == input.Status || Status.Equals(input.Status))
      && (
        Variants == input.Variants
        || Variants != null && input.Variants != null && Variants.SequenceEqual(input.Variants)
      )
      && (
        Configuration == input.Configuration
        || (Configuration != null && Configuration.Equals(input.Configuration))
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + AbTestID.GetHashCode();
      if (ClickSignificance != null)
      {
        hashCode = (hashCode * 59) + ClickSignificance.GetHashCode();
      }
      if (ConversionSignificance != null)
      {
        hashCode = (hashCode * 59) + ConversionSignificance.GetHashCode();
      }
      if (AddToCartSignificance != null)
      {
        hashCode = (hashCode * 59) + AddToCartSignificance.GetHashCode();
      }
      if (PurchaseSignificance != null)
      {
        hashCode = (hashCode * 59) + PurchaseSignificance.GetHashCode();
      }
      if (RevenueSignificance != null)
      {
        hashCode = (hashCode * 59) + RevenueSignificance.GetHashCode();
      }
      if (UpdatedAt != null)
      {
        hashCode = (hashCode * 59) + UpdatedAt.GetHashCode();
      }
      if (CreatedAt != null)
      {
        hashCode = (hashCode * 59) + CreatedAt.GetHashCode();
      }
      if (EndAt != null)
      {
        hashCode = (hashCode * 59) + EndAt.GetHashCode();
      }
      if (Name != null)
      {
        hashCode = (hashCode * 59) + Name.GetHashCode();
      }
      hashCode = (hashCode * 59) + Status.GetHashCode();
      if (Variants != null)
      {
        hashCode = (hashCode * 59) + Variants.GetHashCode();
      }
      if (Configuration != null)
      {
        hashCode = (hashCode * 59) + Configuration.GetHashCode();
      }
      return hashCode;
    }
  }
}
