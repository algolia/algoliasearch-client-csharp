//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// GetAverageClickPositionResponse
/// </summary>
public partial class GetAverageClickPositionResponse
{
  /// <summary>
  /// Initializes a new instance of the GetAverageClickPositionResponse class.
  /// </summary>
  [JsonConstructor]
  public GetAverageClickPositionResponse() { }

  /// <summary>
  /// Initializes a new instance of the GetAverageClickPositionResponse class.
  /// </summary>
  /// <param name="average">Average position of a clicked search result in the list of search results. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true.  (required).</param>
  /// <param name="clickCount">Number of clicks associated with this search. (required) (default to 0).</param>
  /// <param name="dates">Daily average click positions. (required).</param>
  public GetAverageClickPositionResponse(
    double? average,
    int clickCount,
    List<DailyAverageClicks> dates
  )
  {
    Average = average ?? throw new ArgumentNullException(nameof(average));
    ClickCount = clickCount;
    Dates = dates ?? throw new ArgumentNullException(nameof(dates));
  }

  /// <summary>
  /// Average position of a clicked search result in the list of search results. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true.
  /// </summary>
  /// <value>Average position of a clicked search result in the list of search results. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. </value>
  [JsonPropertyName("average")]
  public double? Average { get; set; }

  /// <summary>
  /// Number of clicks associated with this search.
  /// </summary>
  /// <value>Number of clicks associated with this search.</value>
  [JsonPropertyName("clickCount")]
  public int ClickCount { get; set; }

  /// <summary>
  /// Daily average click positions.
  /// </summary>
  /// <value>Daily average click positions.</value>
  [JsonPropertyName("dates")]
  public List<DailyAverageClicks> Dates { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class GetAverageClickPositionResponse {\n");
    sb.Append("  Average: ").Append(Average).Append("\n");
    sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
    sb.Append("  Dates: ").Append(Dates).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not GetAverageClickPositionResponse input)
    {
      return false;
    }

    return (Average == input.Average || (Average != null && Average.Equals(input.Average)))
      && (ClickCount == input.ClickCount || ClickCount.Equals(input.ClickCount))
      && (
        Dates == input.Dates
        || Dates != null && input.Dates != null && Dates.SequenceEqual(input.Dates)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Average != null)
      {
        hashCode = (hashCode * 59) + Average.GetHashCode();
      }
      hashCode = (hashCode * 59) + ClickCount.GetHashCode();
      if (Dates != null)
      {
        hashCode = (hashCode * 59) + Dates.GetHashCode();
      }
      return hashCode;
    }
  }
}
