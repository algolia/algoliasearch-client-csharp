//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// GetTopHitsResponse
/// </summary>
[JsonConverter(typeof(GetTopHitsResponseJsonConverter))]
public partial class GetTopHitsResponse : AbstractSchema
{
  /// <summary>
  /// Initializes a new instance of the GetTopHitsResponse class
  /// with a TopHitsResponse
  /// </summary>
  /// <param name="actualInstance">An instance of TopHitsResponse.</param>
  public GetTopHitsResponse(TopHitsResponse actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the GetTopHitsResponse class
  /// with a TopHitsResponseWithAnalytics
  /// </summary>
  /// <param name="actualInstance">An instance of TopHitsResponseWithAnalytics.</param>
  public GetTopHitsResponse(TopHitsResponseWithAnalytics actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the GetTopHitsResponse class
  /// with a TopHitsResponseWithRevenueAnalytics
  /// </summary>
  /// <param name="actualInstance">An instance of TopHitsResponseWithRevenueAnalytics.</param>
  public GetTopHitsResponse(TopHitsResponseWithRevenueAnalytics actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Gets or Sets ActualInstance
  /// </summary>
  public sealed override object ActualInstance { get; set; }

  /// <summary>
  /// Get the actual instance of `TopHitsResponse`. If the actual instance is not `TopHitsResponse`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of TopHitsResponse</returns>
  public TopHitsResponse AsTopHitsResponse()
  {
    return (TopHitsResponse)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `TopHitsResponseWithAnalytics`. If the actual instance is not `TopHitsResponseWithAnalytics`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of TopHitsResponseWithAnalytics</returns>
  public TopHitsResponseWithAnalytics AsTopHitsResponseWithAnalytics()
  {
    return (TopHitsResponseWithAnalytics)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `TopHitsResponseWithRevenueAnalytics`. If the actual instance is not `TopHitsResponseWithRevenueAnalytics`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of TopHitsResponseWithRevenueAnalytics</returns>
  public TopHitsResponseWithRevenueAnalytics AsTopHitsResponseWithRevenueAnalytics()
  {
    return (TopHitsResponseWithRevenueAnalytics)ActualInstance;
  }

  /// <summary>
  /// Check if the actual instance is of `TopHitsResponse` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsTopHitsResponse()
  {
    return ActualInstance.GetType() == typeof(TopHitsResponse);
  }

  /// <summary>
  /// Check if the actual instance is of `TopHitsResponseWithAnalytics` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsTopHitsResponseWithAnalytics()
  {
    return ActualInstance.GetType() == typeof(TopHitsResponseWithAnalytics);
  }

  /// <summary>
  /// Check if the actual instance is of `TopHitsResponseWithRevenueAnalytics` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsTopHitsResponseWithRevenueAnalytics()
  {
    return ActualInstance.GetType() == typeof(TopHitsResponseWithRevenueAnalytics);
  }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    var sb = new StringBuilder();
    sb.Append("class GetTopHitsResponse {\n");
    sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public override string ToJson()
  {
    return JsonSerializer.Serialize(ActualInstance, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not GetTopHitsResponse input)
    {
      return false;
    }

    return ActualInstance.Equals(input.ActualInstance);
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ActualInstance != null)
        hashCode = hashCode * 59 + ActualInstance.GetHashCode();
      return hashCode;
    }
  }
}

/// <summary>
/// Custom JSON converter for GetTopHitsResponse
/// </summary>
public class GetTopHitsResponseJsonConverter : JsonConverter<GetTopHitsResponse>
{
  /// <summary>
  /// Check if the object can be converted
  /// </summary>
  /// <param name="objectType">Object type</param>
  /// <returns>True if the object can be converted</returns>
  public override bool CanConvert(Type objectType)
  {
    return objectType == typeof(GetTopHitsResponse);
  }

  /// <summary>
  /// To convert a JSON string into an object
  /// </summary>
  /// <param name="reader">JSON reader</param>
  /// <param name="typeToConvert">Object type</param>
  /// <param name="options">Serializer options</param>
  /// <returns>The object converted from the JSON string</returns>
  public override GetTopHitsResponse Read(
    ref Utf8JsonReader reader,
    Type typeToConvert,
    JsonSerializerOptions options
  )
  {
    var jsonDocument = JsonDocument.ParseValue(ref reader);
    var root = jsonDocument.RootElement;
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new GetTopHitsResponse(
          jsonDocument.Deserialize<TopHitsResponse>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into TopHitsResponse: {exception}"
        );
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new GetTopHitsResponse(
          jsonDocument.Deserialize<TopHitsResponseWithAnalytics>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into TopHitsResponseWithAnalytics: {exception}"
        );
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new GetTopHitsResponse(
          jsonDocument.Deserialize<TopHitsResponseWithRevenueAnalytics>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into TopHitsResponseWithRevenueAnalytics: {exception}"
        );
      }
    }
    throw new InvalidDataException(
      $"The JSON string cannot be deserialized into any schema defined."
    );
  }

  /// <summary>
  /// To write the JSON string
  /// </summary>
  /// <param name="writer">JSON writer</param>
  /// <param name="value">GetTopHitsResponse to be converted into a JSON string</param>
  /// <param name="options">JSON Serializer options</param>
  public override void Write(
    Utf8JsonWriter writer,
    GetTopHitsResponse value,
    JsonSerializerOptions options
  )
  {
    writer.WriteRawValue(value.ToJson());
  }
}
