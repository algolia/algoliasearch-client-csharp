//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// TopHitWithRevenueAnalytics
/// </summary>
public partial class TopHitWithRevenueAnalytics
{
  /// <summary>
  /// Initializes a new instance of the TopHitWithRevenueAnalytics class.
  /// </summary>
  [JsonConstructor]
  public TopHitWithRevenueAnalytics() { }
  /// <summary>
  /// Initializes a new instance of the TopHitWithRevenueAnalytics class.
  /// </summary>
  /// <param name="hit">Object ID of a record returned as a search result. (required).</param>
  /// <param name="count">Number of occurrences. (required).</param>
  /// <param name="clickThroughRate">Click-through rate: calculated as the number of tracked searches with at least one click event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true.  (required).</param>
  /// <param name="conversionRate">Conversion rate: calculated as the number of tracked searches with at least one conversion event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true.  (required).</param>
  /// <param name="trackedHitCount">Number of tracked searches. Tracked searches are search requests where the `clickAnalytics` parameter is true. (required) (default to 0).</param>
  /// <param name="clickCount">Number of clicks associated with this search. (required) (default to 0).</param>
  /// <param name="conversionCount">Number of conversions from this search. (required) (default to 0).</param>
  /// <param name="addToCartRate">Add-to-cart rate: calculated as the number of tracked searches with at least one add-to-cart event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true.  (required).</param>
  /// <param name="addToCartCount">Number of add-to-cart events from this search. (required) (default to 0).</param>
  /// <param name="purchaseRate">Purchase rate: calculated as the number of tracked searches with at least one purchase event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true.  (required).</param>
  /// <param name="purchaseCount">Number of purchase events from this search. (required) (default to 0).</param>
  /// <param name="currencies">Revenue associated with this search: broken down by currency.  (required).</param>
  public TopHitWithRevenueAnalytics(string hit, int count, double? clickThroughRate, double? conversionRate, int trackedHitCount, int clickCount, int conversionCount, double? addToCartRate, int addToCartCount, double? purchaseRate, int purchaseCount, Dictionary<string, CurrencyCode> currencies)
  {
    Hit = hit ?? throw new ArgumentNullException(nameof(hit));
    Count = count;
    ClickThroughRate = clickThroughRate ?? throw new ArgumentNullException(nameof(clickThroughRate));
    ConversionRate = conversionRate ?? throw new ArgumentNullException(nameof(conversionRate));
    TrackedHitCount = trackedHitCount;
    ClickCount = clickCount;
    ConversionCount = conversionCount;
    AddToCartRate = addToCartRate ?? throw new ArgumentNullException(nameof(addToCartRate));
    AddToCartCount = addToCartCount;
    PurchaseRate = purchaseRate ?? throw new ArgumentNullException(nameof(purchaseRate));
    PurchaseCount = purchaseCount;
    Currencies = currencies ?? throw new ArgumentNullException(nameof(currencies));
  }

  /// <summary>
  /// Object ID of a record returned as a search result.
  /// </summary>
  /// <value>Object ID of a record returned as a search result.</value>
  [JsonPropertyName("hit")]
  public string Hit { get; set; }

  /// <summary>
  /// Number of occurrences.
  /// </summary>
  /// <value>Number of occurrences.</value>
  [JsonPropertyName("count")]
  public int Count { get; set; }

  /// <summary>
  /// Click-through rate: calculated as the number of tracked searches with at least one click event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. 
  /// </summary>
  /// <value>Click-through rate: calculated as the number of tracked searches with at least one click event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. </value>
  [JsonPropertyName("clickThroughRate")]
  public double? ClickThroughRate { get; set; }

  /// <summary>
  /// Conversion rate: calculated as the number of tracked searches with at least one conversion event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. 
  /// </summary>
  /// <value>Conversion rate: calculated as the number of tracked searches with at least one conversion event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. </value>
  [JsonPropertyName("conversionRate")]
  public double? ConversionRate { get; set; }

  /// <summary>
  /// Number of tracked searches. Tracked searches are search requests where the `clickAnalytics` parameter is true.
  /// </summary>
  /// <value>Number of tracked searches. Tracked searches are search requests where the `clickAnalytics` parameter is true.</value>
  [JsonPropertyName("trackedHitCount")]
  public int TrackedHitCount { get; set; }

  /// <summary>
  /// Number of clicks associated with this search.
  /// </summary>
  /// <value>Number of clicks associated with this search.</value>
  [JsonPropertyName("clickCount")]
  public int ClickCount { get; set; }

  /// <summary>
  /// Number of conversions from this search.
  /// </summary>
  /// <value>Number of conversions from this search.</value>
  [JsonPropertyName("conversionCount")]
  public int ConversionCount { get; set; }

  /// <summary>
  /// Add-to-cart rate: calculated as the number of tracked searches with at least one add-to-cart event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. 
  /// </summary>
  /// <value>Add-to-cart rate: calculated as the number of tracked searches with at least one add-to-cart event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. </value>
  [JsonPropertyName("addToCartRate")]
  public double? AddToCartRate { get; set; }

  /// <summary>
  /// Number of add-to-cart events from this search.
  /// </summary>
  /// <value>Number of add-to-cart events from this search.</value>
  [JsonPropertyName("addToCartCount")]
  public int AddToCartCount { get; set; }

  /// <summary>
  /// Purchase rate: calculated as the number of tracked searches with at least one purchase event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. 
  /// </summary>
  /// <value>Purchase rate: calculated as the number of tracked searches with at least one purchase event divided by the number of tracked searches. If null, Algolia didn't receive any search requests with `clickAnalytics` set to true. </value>
  [JsonPropertyName("purchaseRate")]
  public double? PurchaseRate { get; set; }

  /// <summary>
  /// Number of purchase events from this search.
  /// </summary>
  /// <value>Number of purchase events from this search.</value>
  [JsonPropertyName("purchaseCount")]
  public int PurchaseCount { get; set; }

  /// <summary>
  /// Revenue associated with this search: broken down by currency. 
  /// </summary>
  /// <value>Revenue associated with this search: broken down by currency. </value>
  [JsonPropertyName("currencies")]
  public Dictionary<string, CurrencyCode> Currencies { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class TopHitWithRevenueAnalytics {\n");
    sb.Append("  Hit: ").Append(Hit).Append("\n");
    sb.Append("  Count: ").Append(Count).Append("\n");
    sb.Append("  ClickThroughRate: ").Append(ClickThroughRate).Append("\n");
    sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
    sb.Append("  TrackedHitCount: ").Append(TrackedHitCount).Append("\n");
    sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
    sb.Append("  ConversionCount: ").Append(ConversionCount).Append("\n");
    sb.Append("  AddToCartRate: ").Append(AddToCartRate).Append("\n");
    sb.Append("  AddToCartCount: ").Append(AddToCartCount).Append("\n");
    sb.Append("  PurchaseRate: ").Append(PurchaseRate).Append("\n");
    sb.Append("  PurchaseCount: ").Append(PurchaseCount).Append("\n");
    sb.Append("  Currencies: ").Append(Currencies).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not TopHitWithRevenueAnalytics input)
    {
      return false;
    }

    return
        (Hit == input.Hit || (Hit != null && Hit.Equals(input.Hit))) &&
        (Count == input.Count || Count.Equals(input.Count)) &&
        (ClickThroughRate == input.ClickThroughRate || (ClickThroughRate != null && ClickThroughRate.Equals(input.ClickThroughRate))) &&
        (ConversionRate == input.ConversionRate || (ConversionRate != null && ConversionRate.Equals(input.ConversionRate))) &&
        (TrackedHitCount == input.TrackedHitCount || TrackedHitCount.Equals(input.TrackedHitCount)) &&
        (ClickCount == input.ClickCount || ClickCount.Equals(input.ClickCount)) &&
        (ConversionCount == input.ConversionCount || ConversionCount.Equals(input.ConversionCount)) &&
        (AddToCartRate == input.AddToCartRate || (AddToCartRate != null && AddToCartRate.Equals(input.AddToCartRate))) &&
        (AddToCartCount == input.AddToCartCount || AddToCartCount.Equals(input.AddToCartCount)) &&
        (PurchaseRate == input.PurchaseRate || (PurchaseRate != null && PurchaseRate.Equals(input.PurchaseRate))) &&
        (PurchaseCount == input.PurchaseCount || PurchaseCount.Equals(input.PurchaseCount)) &&
        (Currencies == input.Currencies || Currencies != null && input.Currencies != null && Currencies.SequenceEqual(input.Currencies));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Hit != null)
      {
        hashCode = (hashCode * 59) + Hit.GetHashCode();
      }
      hashCode = (hashCode * 59) + Count.GetHashCode();
      if (ClickThroughRate != null)
      {
        hashCode = (hashCode * 59) + ClickThroughRate.GetHashCode();
      }
      if (ConversionRate != null)
      {
        hashCode = (hashCode * 59) + ConversionRate.GetHashCode();
      }
      hashCode = (hashCode * 59) + TrackedHitCount.GetHashCode();
      hashCode = (hashCode * 59) + ClickCount.GetHashCode();
      hashCode = (hashCode * 59) + ConversionCount.GetHashCode();
      if (AddToCartRate != null)
      {
        hashCode = (hashCode * 59) + AddToCartRate.GetHashCode();
      }
      hashCode = (hashCode * 59) + AddToCartCount.GetHashCode();
      if (PurchaseRate != null)
      {
        hashCode = (hashCode * 59) + PurchaseRate.GetHashCode();
      }
      hashCode = (hashCode * 59) + PurchaseCount.GetHashCode();
      if (Currencies != null)
      {
        hashCode = (hashCode * 59) + Currencies.GetHashCode();
      }
      return hashCode;
    }
  }

}

