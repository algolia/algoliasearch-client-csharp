//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// GetClickPositionsResponse
/// </summary>
public partial class GetClickPositionsResponse
{
  /// <summary>
  /// Initializes a new instance of the GetClickPositionsResponse class.
  /// </summary>
  [JsonConstructor]
  public GetClickPositionsResponse() { }

  /// <summary>
  /// Initializes a new instance of the GetClickPositionsResponse class.
  /// </summary>
  /// <param name="positions">List of positions in the search results and clicks associated with this search. (required).</param>
  public GetClickPositionsResponse(List<ClickPosition> positions)
  {
    Positions = positions ?? throw new ArgumentNullException(nameof(positions));
  }

  /// <summary>
  /// List of positions in the search results and clicks associated with this search.
  /// </summary>
  /// <value>List of positions in the search results and clicks associated with this search.</value>
  [JsonPropertyName("positions")]
  public List<ClickPosition> Positions { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class GetClickPositionsResponse {\n");
    sb.Append("  Positions: ").Append(Positions).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not GetClickPositionsResponse input)
    {
      return false;
    }

    return (
      Positions == input.Positions
      || Positions != null && input.Positions != null && Positions.SequenceEqual(input.Positions)
    );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Positions != null)
      {
        hashCode = (hashCode * 59) + Positions.GetHashCode();
      }
      return hashCode;
    }
  }
}
