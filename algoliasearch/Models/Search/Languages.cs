//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Dictionary language.
/// </summary>
public partial class Languages
{
  /// <summary>
  /// Initializes a new instance of the Languages class.
  /// </summary>
  [JsonConstructor]
  public Languages() { }

  /// <summary>
  /// Initializes a new instance of the Languages class.
  /// </summary>
  /// <param name="plurals">plurals (required).</param>
  /// <param name="stopwords">stopwords (required).</param>
  /// <param name="compounds">compounds (required).</param>
  public Languages(
    DictionaryLanguage plurals,
    DictionaryLanguage stopwords,
    DictionaryLanguage compounds
  )
  {
    Plurals = plurals ?? throw new ArgumentNullException(nameof(plurals));
    Stopwords = stopwords ?? throw new ArgumentNullException(nameof(stopwords));
    Compounds = compounds ?? throw new ArgumentNullException(nameof(compounds));
  }

  /// <summary>
  /// Gets or Sets Plurals
  /// </summary>
  [JsonPropertyName("plurals")]
  public DictionaryLanguage Plurals { get; set; }

  /// <summary>
  /// Gets or Sets Stopwords
  /// </summary>
  [JsonPropertyName("stopwords")]
  public DictionaryLanguage Stopwords { get; set; }

  /// <summary>
  /// Gets or Sets Compounds
  /// </summary>
  [JsonPropertyName("compounds")]
  public DictionaryLanguage Compounds { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Languages {\n");
    sb.Append("  Plurals: ").Append(Plurals).Append("\n");
    sb.Append("  Stopwords: ").Append(Stopwords).Append("\n");
    sb.Append("  Compounds: ").Append(Compounds).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Languages input)
    {
      return false;
    }

    return (Plurals == input.Plurals || (Plurals != null && Plurals.Equals(input.Plurals)))
      && (Stopwords == input.Stopwords || (Stopwords != null && Stopwords.Equals(input.Stopwords)))
      && (Compounds == input.Compounds || (Compounds != null && Compounds.Equals(input.Compounds)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Plurals != null)
      {
        hashCode = (hashCode * 59) + Plurals.GetHashCode();
      }
      if (Stopwords != null)
      {
        hashCode = (hashCode * 59) + Stopwords.GetHashCode();
      }
      if (Compounds != null)
      {
        hashCode = (hashCode * 59) + Compounds.GetHashCode();
      }
      return hashCode;
    }
  }
}
