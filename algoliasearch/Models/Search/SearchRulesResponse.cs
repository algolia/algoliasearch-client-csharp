//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// SearchRulesResponse
/// </summary>
public partial class SearchRulesResponse
{
  /// <summary>
  /// Initializes a new instance of the SearchRulesResponse class.
  /// </summary>
  [JsonConstructor]
  public SearchRulesResponse() { }

  /// <summary>
  /// Initializes a new instance of the SearchRulesResponse class.
  /// </summary>
  /// <param name="hits">Rules that matched the search criteria. (required).</param>
  /// <param name="nbHits">Number of rules that matched the search criteria. (required).</param>
  /// <param name="page">Current page. (required).</param>
  /// <param name="nbPages">Number of pages. (required).</param>
  public SearchRulesResponse(List<Rule> hits, int nbHits, int page, int nbPages)
  {
    Hits = hits ?? throw new ArgumentNullException(nameof(hits));
    NbHits = nbHits;
    Page = page;
    NbPages = nbPages;
  }

  /// <summary>
  /// Rules that matched the search criteria.
  /// </summary>
  /// <value>Rules that matched the search criteria.</value>
  [JsonPropertyName("hits")]
  public List<Rule> Hits { get; set; }

  /// <summary>
  /// Number of rules that matched the search criteria.
  /// </summary>
  /// <value>Number of rules that matched the search criteria.</value>
  [JsonPropertyName("nbHits")]
  public int NbHits { get; set; }

  /// <summary>
  /// Current page.
  /// </summary>
  /// <value>Current page.</value>
  [JsonPropertyName("page")]
  public int Page { get; set; }

  /// <summary>
  /// Number of pages.
  /// </summary>
  /// <value>Number of pages.</value>
  [JsonPropertyName("nbPages")]
  public int NbPages { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SearchRulesResponse {\n");
    sb.Append("  Hits: ").Append(Hits).Append("\n");
    sb.Append("  NbHits: ").Append(NbHits).Append("\n");
    sb.Append("  Page: ").Append(Page).Append("\n");
    sb.Append("  NbPages: ").Append(NbPages).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SearchRulesResponse input)
    {
      return false;
    }

    return (
        Hits == input.Hits || Hits != null && input.Hits != null && Hits.SequenceEqual(input.Hits)
      )
      && (NbHits == input.NbHits || NbHits.Equals(input.NbHits))
      && (Page == input.Page || Page.Equals(input.Page))
      && (NbPages == input.NbPages || NbPages.Equals(input.NbPages));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Hits != null)
      {
        hashCode = (hashCode * 59) + Hits.GetHashCode();
      }
      hashCode = (hashCode * 59) + NbHits.GetHashCode();
      hashCode = (hashCode * 59) + Page.GetHashCode();
      hashCode = (hashCode * 59) + NbPages.GetHashCode();
      return hashCode;
    }
  }
}
