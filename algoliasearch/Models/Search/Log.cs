//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Log
/// </summary>
public partial class Log
{
  /// <summary>
  /// Initializes a new instance of the Log class.
  /// </summary>
  [JsonConstructor]
  public Log() { }

  /// <summary>
  /// Initializes a new instance of the Log class.
  /// </summary>
  /// <param name="timestamp">Date and time of the API request, in RFC 3339 format. (required).</param>
  /// <param name="method">HTTP method of the request. (required).</param>
  /// <param name="answerCode">HTTP status code of the response. (required).</param>
  /// <param name="queryBody">Request body. (required).</param>
  /// <param name="answer">Response body. (required).</param>
  /// <param name="url">URL of the API endpoint. (required).</param>
  /// <param name="ip">IP address of the client that performed the request. (required).</param>
  /// <param name="queryHeaders">Request headers (API keys are obfuscated). (required).</param>
  /// <param name="sha1">SHA1 signature of the log entry. (required).</param>
  /// <param name="processingTimeMs">Processing time for the query in milliseconds. This doesn't include latency due to the network.  (required).</param>
  public Log(
    string timestamp,
    string method,
    string answerCode,
    string queryBody,
    string answer,
    string url,
    string ip,
    string queryHeaders,
    string sha1,
    string processingTimeMs
  )
  {
    Timestamp = timestamp ?? throw new ArgumentNullException(nameof(timestamp));
    Method = method ?? throw new ArgumentNullException(nameof(method));
    AnswerCode = answerCode ?? throw new ArgumentNullException(nameof(answerCode));
    QueryBody = queryBody ?? throw new ArgumentNullException(nameof(queryBody));
    Answer = answer ?? throw new ArgumentNullException(nameof(answer));
    Url = url ?? throw new ArgumentNullException(nameof(url));
    Ip = ip ?? throw new ArgumentNullException(nameof(ip));
    QueryHeaders = queryHeaders ?? throw new ArgumentNullException(nameof(queryHeaders));
    Sha1 = sha1 ?? throw new ArgumentNullException(nameof(sha1));
    ProcessingTimeMs =
      processingTimeMs ?? throw new ArgumentNullException(nameof(processingTimeMs));
  }

  /// <summary>
  /// Date and time of the API request, in RFC 3339 format.
  /// </summary>
  /// <value>Date and time of the API request, in RFC 3339 format.</value>
  [JsonPropertyName("timestamp")]
  public string Timestamp { get; set; }

  /// <summary>
  /// HTTP method of the request.
  /// </summary>
  /// <value>HTTP method of the request.</value>
  [JsonPropertyName("method")]
  public string Method { get; set; }

  /// <summary>
  /// HTTP status code of the response.
  /// </summary>
  /// <value>HTTP status code of the response.</value>
  [JsonPropertyName("answer_code")]
  public string AnswerCode { get; set; }

  /// <summary>
  /// Request body.
  /// </summary>
  /// <value>Request body.</value>
  [JsonPropertyName("query_body")]
  public string QueryBody { get; set; }

  /// <summary>
  /// Response body.
  /// </summary>
  /// <value>Response body.</value>
  [JsonPropertyName("answer")]
  public string Answer { get; set; }

  /// <summary>
  /// URL of the API endpoint.
  /// </summary>
  /// <value>URL of the API endpoint.</value>
  [JsonPropertyName("url")]
  public string Url { get; set; }

  /// <summary>
  /// IP address of the client that performed the request.
  /// </summary>
  /// <value>IP address of the client that performed the request.</value>
  [JsonPropertyName("ip")]
  public string Ip { get; set; }

  /// <summary>
  /// Request headers (API keys are obfuscated).
  /// </summary>
  /// <value>Request headers (API keys are obfuscated).</value>
  [JsonPropertyName("query_headers")]
  public string QueryHeaders { get; set; }

  /// <summary>
  /// SHA1 signature of the log entry.
  /// </summary>
  /// <value>SHA1 signature of the log entry.</value>
  [JsonPropertyName("sha1")]
  public string Sha1 { get; set; }

  /// <summary>
  /// Number of API requests.
  /// </summary>
  /// <value>Number of API requests.</value>
  [JsonPropertyName("nb_api_calls")]
  public string NbApiCalls { get; set; }

  /// <summary>
  /// Processing time for the query in milliseconds. This doesn't include latency due to the network.
  /// </summary>
  /// <value>Processing time for the query in milliseconds. This doesn't include latency due to the network. </value>
  [JsonPropertyName("processing_time_ms")]
  public string ProcessingTimeMs { get; set; }

  /// <summary>
  /// Index targeted by the query.
  /// </summary>
  /// <value>Index targeted by the query.</value>
  [JsonPropertyName("index")]
  public string Index { get; set; }

  /// <summary>
  /// Query parameters sent with the request.
  /// </summary>
  /// <value>Query parameters sent with the request.</value>
  [JsonPropertyName("query_params")]
  public string QueryParams { get; set; }

  /// <summary>
  /// Number of search results (hits) returned for the query.
  /// </summary>
  /// <value>Number of search results (hits) returned for the query.</value>
  [JsonPropertyName("query_nb_hits")]
  public string QueryNbHits { get; set; }

  /// <summary>
  /// Queries performed for the given request.
  /// </summary>
  /// <value>Queries performed for the given request.</value>
  [JsonPropertyName("inner_queries")]
  public List<LogQuery> InnerQueries { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Log {\n");
    sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
    sb.Append("  Method: ").Append(Method).Append("\n");
    sb.Append("  AnswerCode: ").Append(AnswerCode).Append("\n");
    sb.Append("  QueryBody: ").Append(QueryBody).Append("\n");
    sb.Append("  Answer: ").Append(Answer).Append("\n");
    sb.Append("  Url: ").Append(Url).Append("\n");
    sb.Append("  Ip: ").Append(Ip).Append("\n");
    sb.Append("  QueryHeaders: ").Append(QueryHeaders).Append("\n");
    sb.Append("  Sha1: ").Append(Sha1).Append("\n");
    sb.Append("  NbApiCalls: ").Append(NbApiCalls).Append("\n");
    sb.Append("  ProcessingTimeMs: ").Append(ProcessingTimeMs).Append("\n");
    sb.Append("  Index: ").Append(Index).Append("\n");
    sb.Append("  QueryParams: ").Append(QueryParams).Append("\n");
    sb.Append("  QueryNbHits: ").Append(QueryNbHits).Append("\n");
    sb.Append("  InnerQueries: ").Append(InnerQueries).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Log input)
    {
      return false;
    }

    return (
        Timestamp == input.Timestamp || (Timestamp != null && Timestamp.Equals(input.Timestamp))
      )
      && (Method == input.Method || (Method != null && Method.Equals(input.Method)))
      && (
        AnswerCode == input.AnswerCode
        || (AnswerCode != null && AnswerCode.Equals(input.AnswerCode))
      )
      && (QueryBody == input.QueryBody || (QueryBody != null && QueryBody.Equals(input.QueryBody)))
      && (Answer == input.Answer || (Answer != null && Answer.Equals(input.Answer)))
      && (Url == input.Url || (Url != null && Url.Equals(input.Url)))
      && (Ip == input.Ip || (Ip != null && Ip.Equals(input.Ip)))
      && (
        QueryHeaders == input.QueryHeaders
        || (QueryHeaders != null && QueryHeaders.Equals(input.QueryHeaders))
      )
      && (Sha1 == input.Sha1 || (Sha1 != null && Sha1.Equals(input.Sha1)))
      && (
        NbApiCalls == input.NbApiCalls
        || (NbApiCalls != null && NbApiCalls.Equals(input.NbApiCalls))
      )
      && (
        ProcessingTimeMs == input.ProcessingTimeMs
        || (ProcessingTimeMs != null && ProcessingTimeMs.Equals(input.ProcessingTimeMs))
      )
      && (Index == input.Index || (Index != null && Index.Equals(input.Index)))
      && (
        QueryParams == input.QueryParams
        || (QueryParams != null && QueryParams.Equals(input.QueryParams))
      )
      && (
        QueryNbHits == input.QueryNbHits
        || (QueryNbHits != null && QueryNbHits.Equals(input.QueryNbHits))
      )
      && (
        InnerQueries == input.InnerQueries
        || InnerQueries != null
          && input.InnerQueries != null
          && InnerQueries.SequenceEqual(input.InnerQueries)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Timestamp != null)
      {
        hashCode = (hashCode * 59) + Timestamp.GetHashCode();
      }
      if (Method != null)
      {
        hashCode = (hashCode * 59) + Method.GetHashCode();
      }
      if (AnswerCode != null)
      {
        hashCode = (hashCode * 59) + AnswerCode.GetHashCode();
      }
      if (QueryBody != null)
      {
        hashCode = (hashCode * 59) + QueryBody.GetHashCode();
      }
      if (Answer != null)
      {
        hashCode = (hashCode * 59) + Answer.GetHashCode();
      }
      if (Url != null)
      {
        hashCode = (hashCode * 59) + Url.GetHashCode();
      }
      if (Ip != null)
      {
        hashCode = (hashCode * 59) + Ip.GetHashCode();
      }
      if (QueryHeaders != null)
      {
        hashCode = (hashCode * 59) + QueryHeaders.GetHashCode();
      }
      if (Sha1 != null)
      {
        hashCode = (hashCode * 59) + Sha1.GetHashCode();
      }
      if (NbApiCalls != null)
      {
        hashCode = (hashCode * 59) + NbApiCalls.GetHashCode();
      }
      if (ProcessingTimeMs != null)
      {
        hashCode = (hashCode * 59) + ProcessingTimeMs.GetHashCode();
      }
      if (Index != null)
      {
        hashCode = (hashCode * 59) + Index.GetHashCode();
      }
      if (QueryParams != null)
      {
        hashCode = (hashCode * 59) + QueryParams.GetHashCode();
      }
      if (QueryNbHits != null)
      {
        hashCode = (hashCode * 59) + QueryNbHits.GetHashCode();
      }
      if (InnerQueries != null)
      {
        hashCode = (hashCode * 59) + InnerQueries.GetHashCode();
      }
      return hashCode;
    }
  }
}
