//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Parameters to apply to this search.  You can use all search parameters, plus special `automaticFacetFilters`, `automaticOptionalFacetFilters`, and `query`.
/// </summary>
public partial class Params
{
  /// <summary>
  /// Initializes a new instance of the Params class.
  /// </summary>
  public Params() { }

  /// <summary>
  /// Gets or Sets Query
  /// </summary>
  [JsonPropertyName("query")]
  public ConsequenceQuery Query { get; set; }

  /// <summary>
  /// Gets or Sets AutomaticFacetFilters
  /// </summary>
  [JsonPropertyName("automaticFacetFilters")]
  public AutomaticFacetFilters AutomaticFacetFilters { get; set; }

  /// <summary>
  /// Gets or Sets AutomaticOptionalFacetFilters
  /// </summary>
  [JsonPropertyName("automaticOptionalFacetFilters")]
  public AutomaticFacetFilters AutomaticOptionalFacetFilters { get; set; }

  /// <summary>
  /// Gets or Sets RenderingContent
  /// </summary>
  [JsonPropertyName("renderingContent")]
  public RenderingContent RenderingContent { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Params {\n");
    sb.Append("  Query: ").Append(Query).Append("\n");
    sb.Append("  AutomaticFacetFilters: ").Append(AutomaticFacetFilters).Append("\n");
    sb.Append("  AutomaticOptionalFacetFilters: ")
      .Append(AutomaticOptionalFacetFilters)
      .Append("\n");
    sb.Append("  RenderingContent: ").Append(RenderingContent).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Params input)
    {
      return false;
    }

    return (Query == input.Query || (Query != null && Query.Equals(input.Query)))
      && (
        AutomaticFacetFilters == input.AutomaticFacetFilters
        || (
          AutomaticFacetFilters != null && AutomaticFacetFilters.Equals(input.AutomaticFacetFilters)
        )
      )
      && (
        AutomaticOptionalFacetFilters == input.AutomaticOptionalFacetFilters
        || (
          AutomaticOptionalFacetFilters != null
          && AutomaticOptionalFacetFilters.Equals(input.AutomaticOptionalFacetFilters)
        )
      )
      && (
        RenderingContent == input.RenderingContent
        || (RenderingContent != null && RenderingContent.Equals(input.RenderingContent))
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Query != null)
      {
        hashCode = (hashCode * 59) + Query.GetHashCode();
      }
      if (AutomaticFacetFilters != null)
      {
        hashCode = (hashCode * 59) + AutomaticFacetFilters.GetHashCode();
      }
      if (AutomaticOptionalFacetFilters != null)
      {
        hashCode = (hashCode * 59) + AutomaticOptionalFacetFilters.GetHashCode();
      }
      if (RenderingContent != null)
      {
        hashCode = (hashCode * 59) + RenderingContent.GetHashCode();
      }
      return hashCode;
    }
  }
}
