//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// WatchResponse
/// </summary>
public partial class WatchResponse
{
  /// <summary>
  /// Initializes a new instance of the WatchResponse class.
  /// </summary>
  [JsonConstructor]
  public WatchResponse() { }

  /// <summary>
  /// Initializes a new instance of the WatchResponse class.
  /// </summary>
  /// <param name="runID">Universally unique identifier (UUID) of a task run. (required).</param>
  public WatchResponse(string runID)
  {
    RunID = runID ?? throw new ArgumentNullException(nameof(runID));
  }

  /// <summary>
  /// Universally unique identifier (UUID) of a task run.
  /// </summary>
  /// <value>Universally unique identifier (UUID) of a task run.</value>
  [JsonPropertyName("runID")]
  public string RunID { get; set; }

  /// <summary>
  /// Universally unique identifier (UUID) of an event.
  /// </summary>
  /// <value>Universally unique identifier (UUID) of an event.</value>
  [JsonPropertyName("eventID")]
  public string EventID { get; set; }

  /// <summary>
  /// This field is always null when used with the Push endpoint. When used for a source discover or source validate run, it will include the sampled data of the source.
  /// </summary>
  /// <value>This field is always null when used with the Push endpoint. When used for a source discover or source validate run, it will include the sampled data of the source. </value>
  [JsonPropertyName("data")]
  public List<object> Data { get; set; }

  /// <summary>
  /// in case of error, observability events will be added to the response.
  /// </summary>
  /// <value>in case of error, observability events will be added to the response.</value>
  [JsonPropertyName("events")]
  public List<Event> Events { get; set; }

  /// <summary>
  /// a message describing the outcome of the operation that has been ran (push, discover or validate) run.
  /// </summary>
  /// <value>a message describing the outcome of the operation that has been ran (push, discover or validate) run.</value>
  [JsonPropertyName("message")]
  public string Message { get; set; }

  /// <summary>
  /// Date of creation in RFC 3339 format.
  /// </summary>
  /// <value>Date of creation in RFC 3339 format.</value>
  [JsonPropertyName("createdAt")]
  public string CreatedAt { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class WatchResponse {\n");
    sb.Append("  RunID: ").Append(RunID).Append("\n");
    sb.Append("  EventID: ").Append(EventID).Append("\n");
    sb.Append("  Data: ").Append(Data).Append("\n");
    sb.Append("  Events: ").Append(Events).Append("\n");
    sb.Append("  Message: ").Append(Message).Append("\n");
    sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not WatchResponse input)
    {
      return false;
    }

    return (RunID == input.RunID || (RunID != null && RunID.Equals(input.RunID)))
      && (EventID == input.EventID || (EventID != null && EventID.Equals(input.EventID)))
      && (
        Data == input.Data || Data != null && input.Data != null && Data.SequenceEqual(input.Data)
      )
      && (
        Events == input.Events
        || Events != null && input.Events != null && Events.SequenceEqual(input.Events)
      )
      && (Message == input.Message || (Message != null && Message.Equals(input.Message)))
      && (CreatedAt == input.CreatedAt || (CreatedAt != null && CreatedAt.Equals(input.CreatedAt)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (RunID != null)
      {
        hashCode = (hashCode * 59) + RunID.GetHashCode();
      }
      if (EventID != null)
      {
        hashCode = (hashCode * 59) + EventID.GetHashCode();
      }
      if (Data != null)
      {
        hashCode = (hashCode * 59) + Data.GetHashCode();
      }
      if (Events != null)
      {
        hashCode = (hashCode * 59) + Events.GetHashCode();
      }
      if (Message != null)
      {
        hashCode = (hashCode * 59) + Message.GetHashCode();
      }
      if (CreatedAt != null)
      {
        hashCode = (hashCode * 59) + CreatedAt.GetHashCode();
      }
      return hashCode;
    }
  }
}
