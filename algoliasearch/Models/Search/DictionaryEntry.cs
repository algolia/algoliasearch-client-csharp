//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Dictionary entry.
/// </summary>
public partial class DictionaryEntry
{
  /// <summary>
  /// Gets or Sets Language
  /// </summary>
  [JsonPropertyName("language")]
  public SupportedLanguage? Language { get; set; }

  /// <summary>
  /// Gets or Sets State
  /// </summary>
  [JsonPropertyName("state")]
  public DictionaryEntryState? State { get; set; }

  /// <summary>
  /// Gets or Sets Type
  /// </summary>
  [JsonPropertyName("type")]
  public DictionaryEntryType? Type { get; set; }

  /// <summary>
  /// Initializes a new instance of the DictionaryEntry class.
  /// </summary>
  [JsonConstructor]
  public DictionaryEntry()
  {
    AdditionalProperties = new Dictionary<string, object>();
  }

  /// <summary>
  /// Initializes a new instance of the DictionaryEntry class.
  /// </summary>
  /// <param name="objectID">Unique identifier for the dictionary entry. (required).</param>
  public DictionaryEntry(string objectID)
  {
    ObjectID = objectID ?? throw new ArgumentNullException(nameof(objectID));
    AdditionalProperties = new Dictionary<string, object>();
  }

  /// <summary>
  /// Unique identifier for the dictionary entry.
  /// </summary>
  /// <value>Unique identifier for the dictionary entry.</value>
  [JsonPropertyName("objectID")]
  public string ObjectID { get; set; }

  /// <summary>
  /// Matching dictionary word for `stopwords` and `compounds` dictionaries.
  /// </summary>
  /// <value>Matching dictionary word for `stopwords` and `compounds` dictionaries.</value>
  [JsonPropertyName("word")]
  public string Word { get; set; }

  /// <summary>
  /// Matching words in the `plurals` dictionary including declensions.
  /// </summary>
  /// <value>Matching words in the `plurals` dictionary including declensions.</value>
  [JsonPropertyName("words")]
  public List<string> Words { get; set; }

  /// <summary>
  /// Invividual components of a compound word in the `compounds` dictionary.
  /// </summary>
  /// <value>Invividual components of a compound word in the `compounds` dictionary.</value>
  [JsonPropertyName("decomposition")]
  public List<string> Decomposition { get; set; }

  /// <summary>
  /// Gets or Sets additional properties
  /// </summary>
  [JsonExtensionData]
  public IDictionary<string, object> AdditionalProperties { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class DictionaryEntry {\n");
    sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
    sb.Append("  Language: ").Append(Language).Append("\n");
    sb.Append("  Word: ").Append(Word).Append("\n");
    sb.Append("  Words: ").Append(Words).Append("\n");
    sb.Append("  Decomposition: ").Append(Decomposition).Append("\n");
    sb.Append("  State: ").Append(State).Append("\n");
    sb.Append("  Type: ").Append(Type).Append("\n");
    sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not DictionaryEntry input)
    {
      return false;
    }

    return (ObjectID == input.ObjectID || (ObjectID != null && ObjectID.Equals(input.ObjectID)))
      && (Language == input.Language || Language.Equals(input.Language))
      && (Word == input.Word || (Word != null && Word.Equals(input.Word)))
      && (
        Words == input.Words
        || Words != null && input.Words != null && Words.SequenceEqual(input.Words)
      )
      && (
        Decomposition == input.Decomposition
        || Decomposition != null
          && input.Decomposition != null
          && Decomposition.SequenceEqual(input.Decomposition)
      )
      && (State == input.State || State.Equals(input.State))
      && (Type == input.Type || Type.Equals(input.Type))
      && (
        AdditionalProperties.Count == input.AdditionalProperties.Count
        && !AdditionalProperties.Except(input.AdditionalProperties).Any()
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ObjectID != null)
      {
        hashCode = (hashCode * 59) + ObjectID.GetHashCode();
      }
      hashCode = (hashCode * 59) + Language.GetHashCode();
      if (Word != null)
      {
        hashCode = (hashCode * 59) + Word.GetHashCode();
      }
      if (Words != null)
      {
        hashCode = (hashCode * 59) + Words.GetHashCode();
      }
      if (Decomposition != null)
      {
        hashCode = (hashCode * 59) + Decomposition.GetHashCode();
      }
      hashCode = (hashCode * 59) + State.GetHashCode();
      hashCode = (hashCode * 59) + Type.GetHashCode();
      if (AdditionalProperties != null)
      {
        hashCode = (hashCode * 59) + AdditionalProperties.GetHashCode();
      }
      return hashCode;
    }
  }
}
