//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// FetchedIndex
/// </summary>
public partial class FetchedIndex
{
  /// <summary>
  /// Initializes a new instance of the FetchedIndex class.
  /// </summary>
  [JsonConstructor]
  public FetchedIndex() { }

  /// <summary>
  /// Initializes a new instance of the FetchedIndex class.
  /// </summary>
  /// <param name="name">Index name. (required).</param>
  /// <param name="createdAt">Index creation date. An empty string means that the index has no records. (required).</param>
  /// <param name="updatedAt">Date and time when the object was updated, in RFC 3339 format. (required).</param>
  /// <param name="entries">Number of records contained in the index. (required).</param>
  /// <param name="dataSize">Number of bytes of the index in minified format. (required).</param>
  /// <param name="fileSize">Number of bytes of the index binary file. (required).</param>
  /// <param name="lastBuildTimeS">Last build time. (required).</param>
  /// <param name="numberOfPendingTasks">Number of pending indexing operations. This value is deprecated and should not be used. (required) (default to 0).</param>
  /// <param name="pendingTask">A boolean which says whether the index has pending tasks. This value is deprecated and should not be used. (required) (default to false).</param>
  public FetchedIndex(
    string name,
    string createdAt,
    string updatedAt,
    int entries,
    long dataSize,
    long fileSize,
    int lastBuildTimeS,
    int numberOfPendingTasks,
    bool pendingTask
  )
  {
    Name = name ?? throw new ArgumentNullException(nameof(name));
    CreatedAt = createdAt ?? throw new ArgumentNullException(nameof(createdAt));
    UpdatedAt = updatedAt ?? throw new ArgumentNullException(nameof(updatedAt));
    Entries = entries;
    DataSize = dataSize;
    FileSize = fileSize;
    LastBuildTimeS = lastBuildTimeS;
    NumberOfPendingTasks = numberOfPendingTasks;
    PendingTask = pendingTask;
  }

  /// <summary>
  /// Index name.
  /// </summary>
  /// <value>Index name.</value>
  [JsonPropertyName("name")]
  public string Name { get; set; }

  /// <summary>
  /// Index creation date. An empty string means that the index has no records.
  /// </summary>
  /// <value>Index creation date. An empty string means that the index has no records.</value>
  [JsonPropertyName("createdAt")]
  public string CreatedAt { get; set; }

  /// <summary>
  /// Date and time when the object was updated, in RFC 3339 format.
  /// </summary>
  /// <value>Date and time when the object was updated, in RFC 3339 format.</value>
  [JsonPropertyName("updatedAt")]
  public string UpdatedAt { get; set; }

  /// <summary>
  /// Number of records contained in the index.
  /// </summary>
  /// <value>Number of records contained in the index.</value>
  [JsonPropertyName("entries")]
  public int Entries { get; set; }

  /// <summary>
  /// Number of bytes of the index in minified format.
  /// </summary>
  /// <value>Number of bytes of the index in minified format.</value>
  [JsonPropertyName("dataSize")]
  public long DataSize { get; set; }

  /// <summary>
  /// Number of bytes of the index binary file.
  /// </summary>
  /// <value>Number of bytes of the index binary file.</value>
  [JsonPropertyName("fileSize")]
  public long FileSize { get; set; }

  /// <summary>
  /// Last build time.
  /// </summary>
  /// <value>Last build time.</value>
  [JsonPropertyName("lastBuildTimeS")]
  public int LastBuildTimeS { get; set; }

  /// <summary>
  /// Number of pending indexing operations. This value is deprecated and should not be used.
  /// </summary>
  /// <value>Number of pending indexing operations. This value is deprecated and should not be used.</value>
  [JsonPropertyName("numberOfPendingTasks")]
  public int NumberOfPendingTasks { get; set; }

  /// <summary>
  /// A boolean which says whether the index has pending tasks. This value is deprecated and should not be used.
  /// </summary>
  /// <value>A boolean which says whether the index has pending tasks. This value is deprecated and should not be used.</value>
  [JsonPropertyName("pendingTask")]
  public bool PendingTask { get; set; }

  /// <summary>
  /// Only present if the index is a replica. Contains the name of the related primary index.
  /// </summary>
  /// <value>Only present if the index is a replica. Contains the name of the related primary index.</value>
  [JsonPropertyName("primary")]
  public string Primary { get; set; }

  /// <summary>
  /// Only present if the index is a primary index with replicas. Contains the names of all linked replicas.
  /// </summary>
  /// <value>Only present if the index is a primary index with replicas. Contains the names of all linked replicas.</value>
  [JsonPropertyName("replicas")]
  public List<string> Replicas { get; set; }

  /// <summary>
  /// Only present if the index is a [virtual replica](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-an-index-alphabetically/#virtual-replicas).
  /// </summary>
  /// <value>Only present if the index is a [virtual replica](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-an-index-alphabetically/#virtual-replicas).</value>
  [JsonPropertyName("virtual")]
  public bool? Virtual { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class FetchedIndex {\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
    sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
    sb.Append("  Entries: ").Append(Entries).Append("\n");
    sb.Append("  DataSize: ").Append(DataSize).Append("\n");
    sb.Append("  FileSize: ").Append(FileSize).Append("\n");
    sb.Append("  LastBuildTimeS: ").Append(LastBuildTimeS).Append("\n");
    sb.Append("  NumberOfPendingTasks: ").Append(NumberOfPendingTasks).Append("\n");
    sb.Append("  PendingTask: ").Append(PendingTask).Append("\n");
    sb.Append("  Primary: ").Append(Primary).Append("\n");
    sb.Append("  Replicas: ").Append(Replicas).Append("\n");
    sb.Append("  Virtual: ").Append(Virtual).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not FetchedIndex input)
    {
      return false;
    }

    return (Name == input.Name || (Name != null && Name.Equals(input.Name)))
      && (CreatedAt == input.CreatedAt || (CreatedAt != null && CreatedAt.Equals(input.CreatedAt)))
      && (UpdatedAt == input.UpdatedAt || (UpdatedAt != null && UpdatedAt.Equals(input.UpdatedAt)))
      && (Entries == input.Entries || Entries.Equals(input.Entries))
      && (DataSize == input.DataSize || DataSize.Equals(input.DataSize))
      && (FileSize == input.FileSize || FileSize.Equals(input.FileSize))
      && (LastBuildTimeS == input.LastBuildTimeS || LastBuildTimeS.Equals(input.LastBuildTimeS))
      && (
        NumberOfPendingTasks == input.NumberOfPendingTasks
        || NumberOfPendingTasks.Equals(input.NumberOfPendingTasks)
      )
      && (PendingTask == input.PendingTask || PendingTask.Equals(input.PendingTask))
      && (Primary == input.Primary || (Primary != null && Primary.Equals(input.Primary)))
      && (
        Replicas == input.Replicas
        || Replicas != null && input.Replicas != null && Replicas.SequenceEqual(input.Replicas)
      )
      && (Virtual == input.Virtual || Virtual.Equals(input.Virtual));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Name != null)
      {
        hashCode = (hashCode * 59) + Name.GetHashCode();
      }
      if (CreatedAt != null)
      {
        hashCode = (hashCode * 59) + CreatedAt.GetHashCode();
      }
      if (UpdatedAt != null)
      {
        hashCode = (hashCode * 59) + UpdatedAt.GetHashCode();
      }
      hashCode = (hashCode * 59) + Entries.GetHashCode();
      hashCode = (hashCode * 59) + DataSize.GetHashCode();
      hashCode = (hashCode * 59) + FileSize.GetHashCode();
      hashCode = (hashCode * 59) + LastBuildTimeS.GetHashCode();
      hashCode = (hashCode * 59) + NumberOfPendingTasks.GetHashCode();
      hashCode = (hashCode * 59) + PendingTask.GetHashCode();
      if (Primary != null)
      {
        hashCode = (hashCode * 59) + Primary.GetHashCode();
      }
      if (Replicas != null)
      {
        hashCode = (hashCode * 59) + Replicas.GetHashCode();
      }
      hashCode = (hashCode * 59) + Virtual.GetHashCode();
      return hashCode;
    }
  }
}
