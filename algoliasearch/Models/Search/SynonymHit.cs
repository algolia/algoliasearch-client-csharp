//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Synonym object.
/// </summary>
public partial class SynonymHit
{
  /// <summary>
  /// Gets or Sets Type
  /// </summary>
  [JsonPropertyName("type")]
  public SynonymType? Type { get; set; }

  /// <summary>
  /// Initializes a new instance of the SynonymHit class.
  /// </summary>
  [JsonConstructor]
  public SynonymHit() { }

  /// <summary>
  /// Initializes a new instance of the SynonymHit class.
  /// </summary>
  /// <param name="objectID">Unique identifier of a synonym object. (required).</param>
  /// <param name="type">type (required).</param>
  public SynonymHit(string objectID, SynonymType? type)
  {
    ObjectID = objectID ?? throw new ArgumentNullException(nameof(objectID));
    Type = type;
  }

  /// <summary>
  /// Unique identifier of a synonym object.
  /// </summary>
  /// <value>Unique identifier of a synonym object.</value>
  [JsonPropertyName("objectID")]
  public string ObjectID { get; set; }

  /// <summary>
  /// Words or phrases considered equivalent.
  /// </summary>
  /// <value>Words or phrases considered equivalent.</value>
  [JsonPropertyName("synonyms")]
  public List<string> Synonyms { get; set; }

  /// <summary>
  /// Word or phrase to appear in query strings (for [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/)).
  /// </summary>
  /// <value>Word or phrase to appear in query strings (for [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/)).</value>
  [JsonPropertyName("input")]
  public string Input { get; set; }

  /// <summary>
  /// Word or phrase to appear in query strings (for [`altcorrection1` and `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/)).
  /// </summary>
  /// <value>Word or phrase to appear in query strings (for [`altcorrection1` and `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/)).</value>
  [JsonPropertyName("word")]
  public string Word { get; set; }

  /// <summary>
  /// Words to be matched in records.
  /// </summary>
  /// <value>Words to be matched in records.</value>
  [JsonPropertyName("corrections")]
  public List<string> Corrections { get; set; }

  /// <summary>
  /// [Placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/) to be put inside records.
  /// </summary>
  /// <value>[Placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/) to be put inside records. </value>
  [JsonPropertyName("placeholder")]
  public string Placeholder { get; set; }

  /// <summary>
  /// Query words that will match the [placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/).
  /// </summary>
  /// <value>Query words that will match the [placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/).</value>
  [JsonPropertyName("replacements")]
  public List<string> Replacements { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SynonymHit {\n");
    sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
    sb.Append("  Type: ").Append(Type).Append("\n");
    sb.Append("  Synonyms: ").Append(Synonyms).Append("\n");
    sb.Append("  Input: ").Append(Input).Append("\n");
    sb.Append("  Word: ").Append(Word).Append("\n");
    sb.Append("  Corrections: ").Append(Corrections).Append("\n");
    sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
    sb.Append("  Replacements: ").Append(Replacements).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SynonymHit input)
    {
      return false;
    }

    return (ObjectID == input.ObjectID || (ObjectID != null && ObjectID.Equals(input.ObjectID)))
      && (Type == input.Type || Type.Equals(input.Type))
      && (
        Synonyms == input.Synonyms
        || Synonyms != null && input.Synonyms != null && Synonyms.SequenceEqual(input.Synonyms)
      )
      && (Input == input.Input || (Input != null && Input.Equals(input.Input)))
      && (Word == input.Word || (Word != null && Word.Equals(input.Word)))
      && (
        Corrections == input.Corrections
        || Corrections != null
          && input.Corrections != null
          && Corrections.SequenceEqual(input.Corrections)
      )
      && (
        Placeholder == input.Placeholder
        || (Placeholder != null && Placeholder.Equals(input.Placeholder))
      )
      && (
        Replacements == input.Replacements
        || Replacements != null
          && input.Replacements != null
          && Replacements.SequenceEqual(input.Replacements)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ObjectID != null)
      {
        hashCode = (hashCode * 59) + ObjectID.GetHashCode();
      }
      hashCode = (hashCode * 59) + Type.GetHashCode();
      if (Synonyms != null)
      {
        hashCode = (hashCode * 59) + Synonyms.GetHashCode();
      }
      if (Input != null)
      {
        hashCode = (hashCode * 59) + Input.GetHashCode();
      }
      if (Word != null)
      {
        hashCode = (hashCode * 59) + Word.GetHashCode();
      }
      if (Corrections != null)
      {
        hashCode = (hashCode * 59) + Corrections.GetHashCode();
      }
      if (Placeholder != null)
      {
        hashCode = (hashCode * 59) + Placeholder.GetHashCode();
      }
      if (Replacements != null)
      {
        hashCode = (hashCode * 59) + Replacements.GetHashCode();
      }
      return hashCode;
    }
  }
}
