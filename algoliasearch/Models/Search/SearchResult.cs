//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// SearchResult
/// </summary>
public partial class SearchResult<T> : AbstractSchema
{
  /// <summary>
  /// Initializes a new instance of the SearchResult class
  /// with a SearchForFacetValuesResponse
  /// </summary>
  /// <param name="actualInstance">An instance of SearchForFacetValuesResponse.</param>
  public SearchResult(SearchForFacetValuesResponse actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SearchResult class
  /// with a SearchResponse
  /// </summary>
  /// <param name="actualInstance">An instance of SearchResponse.</param>
  public SearchResult(object actualInstance)
  {
    ActualInstance =
      actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Gets or Sets ActualInstance
  /// </summary>
  public sealed override object ActualInstance { get; set; }

  /// <summary>
  /// Get the actual instance of `SearchForFacetValuesResponse`. If the actual instance is not `SearchForFacetValuesResponse`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SearchForFacetValuesResponse</returns>
  public SearchForFacetValuesResponse AsSearchForFacetValuesResponse()
  {
    return (SearchForFacetValuesResponse)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SearchResponse`. If the actual instance is not `SearchResponse`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SearchResponse</returns>
  public SearchResponse<T> AsSearchResponse()
  {
    return (SearchResponse<T>)ActualInstance;
  }

  /// <summary>
  /// Check if the actual instance is of `SearchForFacetValuesResponse` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSearchForFacetValuesResponse()
  {
    return ActualInstance.GetType() == typeof(SearchForFacetValuesResponse);
  }

  /// <summary>
  /// Check if the actual instance is of `SearchResponse` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSearchResponse()
  {
    return ActualInstance.GetType() == typeof(SearchResponse<T>);
  }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    var sb = new StringBuilder();
    sb.Append("class SearchResult {\n");
    sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public override string ToJson()
  {
    return JsonSerializer.Serialize(ActualInstance, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SearchResult<T> input)
    {
      return false;
    }

    return ActualInstance.Equals(input.ActualInstance);
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ActualInstance != null)
        hashCode = hashCode * 59 + ActualInstance.GetHashCode();
      return hashCode;
    }
  }
}

/// <summary>
/// Custom JSON converter factory for SearchResult
/// </summary>
public class SearchResultConverterFactory : JsonConverterFactory
{
  /// <summary>
  /// Check if the type is a SearchResult
  /// </summary>
  public override bool CanConvert(Type typeToConvert)
  {
    return typeToConvert.IsGenericType
      && typeToConvert.GetGenericTypeDefinition() == typeof(SearchResult<>);
  }

  /// <summary>
  /// Create a new converter
  /// </summary>
  public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
  {
    var innerType = typeToConvert.GetGenericArguments()[0];

    JsonConverter converter = (JsonConverter)
      Activator.CreateInstance(
        typeof(SearchResultJsonConverter<>).MakeGenericType(innerType),
        BindingFlags.Instance | BindingFlags.Public,
        binder: null,
        args: [],
        culture: null
      )!;

    return converter;
  }
}

/// <summary>
/// Custom JSON converter for SearchResult
/// </summary>
public class SearchResultJsonConverter<T> : JsonConverter<SearchResult<T>>
{
  /// <summary>
  /// The value converter
  /// </summary>
  public SearchResultJsonConverter() { }

  /// <summary>
  /// Check if the object can be converted
  /// </summary>
  /// <param name="objectType">Object type</param>
  /// <returns>True if the object can be converted</returns>
  public override bool CanConvert(Type objectType)
  {
    return objectType == typeof(SearchResult<T>);
  }

  /// <summary>
  /// To convert a JSON string into an object
  /// </summary>
  /// <param name="reader">JSON reader</param>
  /// <param name="typeToConvert">Object type</param>
  /// <param name="options">Serializer options</param>
  /// <returns>The object converted from the JSON string</returns>
  public override SearchResult<T> Read(
    ref Utf8JsonReader reader,
    Type typeToConvert,
    JsonSerializerOptions options
  )
  {
    var jsonDocument = JsonDocument.ParseValue(ref reader);
    var root = jsonDocument.RootElement;
    if (root.ValueKind == JsonValueKind.Object && root.TryGetProperty("facetHits", out _))
    {
      try
      {
        return new SearchResult<T>(
          jsonDocument.Deserialize<SearchForFacetValuesResponse>(JsonConfig.Options)
        );
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into SearchForFacetValuesResponse: {exception}"
        );
      }
    }
    if (root.ValueKind == JsonValueKind.Object)
    {
      try
      {
        return new SearchResult<T>(jsonDocument.Deserialize<SearchResponse<T>>(JsonConfig.Options));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(
          $"Failed to deserialize into SearchResponse: {exception}"
        );
      }
    }
    throw new InvalidDataException(
      $"The JSON string cannot be deserialized into any schema defined."
    );
  }

  /// <summary>
  /// To write the JSON string
  /// </summary>
  /// <param name="writer">JSON writer</param>
  /// <param name="value">SearchResult to be converted into a JSON string</param>
  /// <param name="options">JSON Serializer options</param>
  public override void Write(
    Utf8JsonWriter writer,
    SearchResult<T> value,
    JsonSerializerOptions options
  )
  {
    writer.WriteRawValue(value.ToJson());
  }
}
