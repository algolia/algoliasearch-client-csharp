//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// userIDs data.
/// </summary>
public partial class SearchUserIdsResponse
{
  /// <summary>
  /// Initializes a new instance of the SearchUserIdsResponse class.
  /// </summary>
  [JsonConstructor]
  public SearchUserIdsResponse() { }

  /// <summary>
  /// Initializes a new instance of the SearchUserIdsResponse class.
  /// </summary>
  /// <param name="hits">User objects that match the query. (required).</param>
  /// <param name="nbHits">Number of results (hits). (required).</param>
  /// <param name="page">Page of search results to retrieve. (required) (default to 0).</param>
  /// <param name="hitsPerPage">Maximum number of hits per page.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.  (required) (default to 20).</param>
  /// <param name="updatedAt">Date and time when the object was updated, in RFC 3339 format. (required).</param>
  public SearchUserIdsResponse(
    List<UserHit> hits,
    int nbHits,
    int page,
    int hitsPerPage,
    string updatedAt
  )
  {
    Hits = hits ?? throw new ArgumentNullException(nameof(hits));
    NbHits = nbHits;
    Page = page;
    HitsPerPage = hitsPerPage;
    UpdatedAt = updatedAt ?? throw new ArgumentNullException(nameof(updatedAt));
  }

  /// <summary>
  /// User objects that match the query.
  /// </summary>
  /// <value>User objects that match the query.</value>
  [JsonPropertyName("hits")]
  public List<UserHit> Hits { get; set; }

  /// <summary>
  /// Number of results (hits).
  /// </summary>
  /// <value>Number of results (hits).</value>
  [JsonPropertyName("nbHits")]
  public int NbHits { get; set; }

  /// <summary>
  /// Page of search results to retrieve.
  /// </summary>
  /// <value>Page of search results to retrieve.</value>
  [JsonPropertyName("page")]
  public int Page { get; set; }

  /// <summary>
  /// Maximum number of hits per page.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.
  /// </summary>
  /// <value>Maximum number of hits per page.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2. </value>
  [JsonPropertyName("hitsPerPage")]
  public int HitsPerPage { get; set; }

  /// <summary>
  /// Date and time when the object was updated, in RFC 3339 format.
  /// </summary>
  /// <value>Date and time when the object was updated, in RFC 3339 format.</value>
  [JsonPropertyName("updatedAt")]
  public string UpdatedAt { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SearchUserIdsResponse {\n");
    sb.Append("  Hits: ").Append(Hits).Append("\n");
    sb.Append("  NbHits: ").Append(NbHits).Append("\n");
    sb.Append("  Page: ").Append(Page).Append("\n");
    sb.Append("  HitsPerPage: ").Append(HitsPerPage).Append("\n");
    sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SearchUserIdsResponse input)
    {
      return false;
    }

    return (
        Hits == input.Hits || Hits != null && input.Hits != null && Hits.SequenceEqual(input.Hits)
      )
      && (NbHits == input.NbHits || NbHits.Equals(input.NbHits))
      && (Page == input.Page || Page.Equals(input.Page))
      && (HitsPerPage == input.HitsPerPage || HitsPerPage.Equals(input.HitsPerPage))
      && (UpdatedAt == input.UpdatedAt || (UpdatedAt != null && UpdatedAt.Equals(input.UpdatedAt)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Hits != null)
      {
        hashCode = (hashCode * 59) + Hits.GetHashCode();
      }
      hashCode = (hashCode * 59) + NbHits.GetHashCode();
      hashCode = (hashCode * 59) + Page.GetHashCode();
      hashCode = (hashCode * 59) + HitsPerPage.GetHashCode();
      if (UpdatedAt != null)
      {
        hashCode = (hashCode * 59) + UpdatedAt.GetHashCode();
      }
      return hashCode;
    }
  }
}
