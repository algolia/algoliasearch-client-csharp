//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Search;

/// <summary>
/// SettingsResponse
/// </summary>
public partial class SettingsResponse
{

  /// <summary>
  /// Gets or Sets QueryType
  /// </summary>
  [JsonPropertyName("queryType")]
  public QueryType? QueryType { get; set; }

  /// <summary>
  /// Gets or Sets RemoveWordsIfNoResults
  /// </summary>
  [JsonPropertyName("removeWordsIfNoResults")]
  public RemoveWordsIfNoResults? RemoveWordsIfNoResults { get; set; }

  /// <summary>
  /// Gets or Sets Mode
  /// </summary>
  [JsonPropertyName("mode")]
  public Mode? Mode { get; set; }

  /// <summary>
  /// Gets or Sets ExactOnSingleWordQuery
  /// </summary>
  [JsonPropertyName("exactOnSingleWordQuery")]
  public ExactOnSingleWordQuery? ExactOnSingleWordQuery { get; set; }
  /// <summary>
  /// Initializes a new instance of the SettingsResponse class.
  /// </summary>
  public SettingsResponse()
  {
  }

  /// <summary>
  /// Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/).  Facets are attributes that let you categorize search results. They can be used for filtering search results. By default, no attribute is used for faceting. Attribute names are case-sensitive.  **Modifiers**  - `filterOnly(\"ATTRIBUTE\")`.   Allows the attribute to be used as a filter but doesn't evaluate the facet values.  - `searchable(\"ATTRIBUTE\")`.   Allows searching for facet values.  - `afterDistinct(\"ATTRIBUTE\")`.   Evaluates the facet count _after_ deduplication with `distinct`.   This ensures accurate facet counts.   You can apply this modifier to searchable facets: `afterDistinct(searchable(ATTRIBUTE))`. 
  /// </summary>
  /// <value>Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/).  Facets are attributes that let you categorize search results. They can be used for filtering search results. By default, no attribute is used for faceting. Attribute names are case-sensitive.  **Modifiers**  - `filterOnly(\"ATTRIBUTE\")`.   Allows the attribute to be used as a filter but doesn't evaluate the facet values.  - `searchable(\"ATTRIBUTE\")`.   Allows searching for facet values.  - `afterDistinct(\"ATTRIBUTE\")`.   Evaluates the facet count _after_ deduplication with `distinct`.   This ensures accurate facet counts.   You can apply this modifier to searchable facets: `afterDistinct(searchable(ATTRIBUTE))`. </value>
  [JsonPropertyName("attributesForFaceting")]
  public List<string> AttributesForFaceting { get; set; }

  /// <summary>
  /// Creates [replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/).  Replicas are copies of a primary index with the same records but different settings, synonyms, or rules. If you want to offer a different ranking or sorting of your search results, you'll use replica indices. All index operations on a primary index are automatically forwarded to its replicas. To add a replica index, you must provide the complete set of replicas to this parameter. If you omit a replica from this list, the replica turns into a regular, standalone index that will no longer be synced with the primary index.  **Modifier**  - `virtual(\"REPLICA\")`.   Create a virtual replica,   Virtual replicas don't increase the number of records and are optimized for [Relevant sorting](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/relevant-sort/). 
  /// </summary>
  /// <value>Creates [replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/).  Replicas are copies of a primary index with the same records but different settings, synonyms, or rules. If you want to offer a different ranking or sorting of your search results, you'll use replica indices. All index operations on a primary index are automatically forwarded to its replicas. To add a replica index, you must provide the complete set of replicas to this parameter. If you omit a replica from this list, the replica turns into a regular, standalone index that will no longer be synced with the primary index.  **Modifier**  - `virtual(\"REPLICA\")`.   Create a virtual replica,   Virtual replicas don't increase the number of records and are optimized for [Relevant sorting](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/relevant-sort/). </value>
  [JsonPropertyName("replicas")]
  public List<string> Replicas { get; set; }

  /// <summary>
  /// Maximum number of search results that can be obtained through pagination.  Higher pagination limits might slow down your search. For pagination limits above 1,000, the sorting of results beyond the 1,000th hit can't be guaranteed. 
  /// </summary>
  /// <value>Maximum number of search results that can be obtained through pagination.  Higher pagination limits might slow down your search. For pagination limits above 1,000, the sorting of results beyond the 1,000th hit can't be guaranteed. </value>
  [JsonPropertyName("paginationLimitedTo")]
  public int? PaginationLimitedTo { get; set; }

  /// <summary>
  /// Attributes that can't be retrieved at query time.  This can be useful if you want to use an attribute for ranking or to [restrict access](https://www.algolia.com/doc/guides/security/api-keys/how-to/user-restricted-access-to-data/), but don't want to include it in the search results. Attribute names are case-sensitive. 
  /// </summary>
  /// <value>Attributes that can't be retrieved at query time.  This can be useful if you want to use an attribute for ranking or to [restrict access](https://www.algolia.com/doc/guides/security/api-keys/how-to/user-restricted-access-to-data/), but don't want to include it in the search results. Attribute names are case-sensitive. </value>
  [JsonPropertyName("unretrievableAttributes")]
  public List<string> UnretrievableAttributes { get; set; }

  /// <summary>
  /// Creates a list of [words which require exact matches](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#turn-off-typo-tolerance-for-certain-words). This also turns off [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) for the specified words. 
  /// </summary>
  /// <value>Creates a list of [words which require exact matches](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#turn-off-typo-tolerance-for-certain-words). This also turns off [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) for the specified words. </value>
  [JsonPropertyName("disableTypoToleranceOnWords")]
  public List<string> DisableTypoToleranceOnWords { get; set; }

  /// <summary>
  /// Attributes, for which you want to support [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead).  Transliteration supports searching in any of the Japanese writing systems. To support transliteration, you must set the indexing language to Japanese. Attribute names are case-sensitive. 
  /// </summary>
  /// <value>Attributes, for which you want to support [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead).  Transliteration supports searching in any of the Japanese writing systems. To support transliteration, you must set the indexing language to Japanese. Attribute names are case-sensitive. </value>
  [JsonPropertyName("attributesToTransliterate")]
  public List<string> AttributesToTransliterate { get; set; }

  /// <summary>
  /// Attributes for which to split [camel case](https://wikipedia.org/wiki/Camel_case) words. Attribute names are case-sensitive. 
  /// </summary>
  /// <value>Attributes for which to split [camel case](https://wikipedia.org/wiki/Camel_case) words. Attribute names are case-sensitive. </value>
  [JsonPropertyName("camelCaseAttributes")]
  public List<string> CamelCaseAttributes { get; set; }

  /// <summary>
  /// Searchable attributes to which Algolia should apply [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding). Attribute names are case-sensitive.  Compound words are formed by combining two or more individual words, and are particularly prevalent in Germanic languages—for example, \"firefighter\". With decompounding, the individual components are indexed separately.  You can specify different lists for different languages. Decompounding is supported for these languages: Dutch (`nl`), German (`de`), Finnish (`fi`), Danish (`da`), Swedish (`sv`), and Norwegian (`no`). Decompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark). For example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308). 
  /// </summary>
  /// <value>Searchable attributes to which Algolia should apply [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding). Attribute names are case-sensitive.  Compound words are formed by combining two or more individual words, and are particularly prevalent in Germanic languages—for example, \"firefighter\". With decompounding, the individual components are indexed separately.  You can specify different lists for different languages. Decompounding is supported for these languages: Dutch (`nl`), German (`de`), Finnish (`fi`), Danish (`da`), Swedish (`sv`), and Norwegian (`no`). Decompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark). For example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308). </value>
  [JsonPropertyName("decompoundedAttributes")]
  public object DecompoundedAttributes { get; set; }

  /// <summary>
  /// Languages for language-specific processing steps, such as word detection and dictionary settings.  **You should always specify an indexing language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/). 
  /// </summary>
  /// <value>Languages for language-specific processing steps, such as word detection and dictionary settings.  **You should always specify an indexing language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/). </value>
  [JsonPropertyName("indexLanguages")]
  public List<SupportedLanguage> IndexLanguages { get; set; }

  /// <summary>
  /// Searchable attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search). Attribute names are case-sensitive. 
  /// </summary>
  /// <value>Searchable attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search). Attribute names are case-sensitive. </value>
  [JsonPropertyName("disablePrefixOnAttributes")]
  public List<string> DisablePrefixOnAttributes { get; set; }

  /// <summary>
  /// Whether arrays with exclusively non-negative integers should be compressed for better performance. If true, the compressed arrays may be reordered. 
  /// </summary>
  /// <value>Whether arrays with exclusively non-negative integers should be compressed for better performance. If true, the compressed arrays may be reordered. </value>
  [JsonPropertyName("allowCompressionOfIntegerArray")]
  public bool? AllowCompressionOfIntegerArray { get; set; }

  /// <summary>
  /// Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters). Attribute names are case-sensitive.  By default, all numeric attributes are available as numerical filters. For faster indexing, reduce the number of numeric attributes.  To turn off filtering for all numeric attributes, specify an attribute that doesn't exist in your index, such as `NO_NUMERIC_FILTERING`.  **Modifier**  - `equalOnly(\"ATTRIBUTE\")`.   Support only filtering based on equality comparisons `=` and `!=`. 
  /// </summary>
  /// <value>Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters). Attribute names are case-sensitive.  By default, all numeric attributes are available as numerical filters. For faster indexing, reduce the number of numeric attributes.  To turn off filtering for all numeric attributes, specify an attribute that doesn't exist in your index, such as `NO_NUMERIC_FILTERING`.  **Modifier**  - `equalOnly(\"ATTRIBUTE\")`.   Support only filtering based on equality comparisons `=` and `!=`. </value>
  [JsonPropertyName("numericAttributesForFiltering")]
  public List<string> NumericAttributesForFiltering { get; set; }

  /// <summary>
  /// Control which non-alphanumeric characters are indexed.  By default, Algolia ignores [non-alphanumeric characters](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/#handling-non-alphanumeric-characters) like hyphen (`-`), plus (`+`), and parentheses (`(`,`)`). To include such characters, define them with `separatorsToIndex`.  Separators are all non-letter characters except spaces and currency characters, such as $€£¥.  With `separatorsToIndex`, Algolia treats separator characters as separate words. For example, in a search for \"Disney+\", Algolia considers \"Disney\" and \"+\" as two separate words. 
  /// </summary>
  /// <value>Control which non-alphanumeric characters are indexed.  By default, Algolia ignores [non-alphanumeric characters](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/#handling-non-alphanumeric-characters) like hyphen (`-`), plus (`+`), and parentheses (`(`,`)`). To include such characters, define them with `separatorsToIndex`.  Separators are all non-letter characters except spaces and currency characters, such as $€£¥.  With `separatorsToIndex`, Algolia treats separator characters as separate words. For example, in a search for \"Disney+\", Algolia considers \"Disney\" and \"+\" as two separate words. </value>
  [JsonPropertyName("separatorsToIndex")]
  public string SeparatorsToIndex { get; set; }

  /// <summary>
  /// Attributes used for searching. Attribute names are case-sensitive.  By default, all attributes are searchable and the [Attribute](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute) ranking criterion is turned off. With a non-empty list, Algolia only returns results with matches in the selected attributes. In addition, the Attribute ranking criterion is turned on: matches in attributes that are higher in the list of `searchableAttributes` rank first. To make matches in two attributes rank equally, include them in a comma-separated string, such as `\"title,alternate_title\"`. Attributes with the same priority are always unordered.  For more information, see [Searchable attributes](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/setting-searchable-attributes/).  **Modifier**  - `unordered(\"ATTRIBUTE\")`.   Ignore the position of a match within the attribute.  Without a modifier, matches at the beginning of an attribute rank higher than matches at the end. 
  /// </summary>
  /// <value>Attributes used for searching. Attribute names are case-sensitive.  By default, all attributes are searchable and the [Attribute](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute) ranking criterion is turned off. With a non-empty list, Algolia only returns results with matches in the selected attributes. In addition, the Attribute ranking criterion is turned on: matches in attributes that are higher in the list of `searchableAttributes` rank first. To make matches in two attributes rank equally, include them in a comma-separated string, such as `\"title,alternate_title\"`. Attributes with the same priority are always unordered.  For more information, see [Searchable attributes](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/setting-searchable-attributes/).  **Modifier**  - `unordered(\"ATTRIBUTE\")`.   Ignore the position of a match within the attribute.  Without a modifier, matches at the beginning of an attribute rank higher than matches at the end. </value>
  [JsonPropertyName("searchableAttributes")]
  public List<string> SearchableAttributes { get; set; }

  /// <summary>
  /// An object with custom data.  You can store up to 32kB as custom data. 
  /// </summary>
  /// <value>An object with custom data.  You can store up to 32kB as custom data. </value>
  [JsonPropertyName("userData")]
  public object UserData { get; set; }

  /// <summary>
  /// Characters and their normalized replacements. This overrides Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/). 
  /// </summary>
  /// <value>Characters and their normalized replacements. This overrides Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/). </value>
  [JsonPropertyName("customNormalization")]
  public Dictionary<string, Dictionary<string, string>> CustomNormalization { get; set; }

  /// <summary>
  /// Attribute that should be used to establish groups of results. Attribute names are case-sensitive.  All records with the same value for this attribute are considered a group. You can combine `attributeForDistinct` with the `distinct` search parameter to control how many items per group are included in the search results.  If you want to use the same attribute also for faceting, use the `afterDistinct` modifier of the `attributesForFaceting` setting. This applies faceting _after_ deduplication, which will result in accurate facet counts. 
  /// </summary>
  /// <value>Attribute that should be used to establish groups of results. Attribute names are case-sensitive.  All records with the same value for this attribute are considered a group. You can combine `attributeForDistinct` with the `distinct` search parameter to control how many items per group are included in the search results.  If you want to use the same attribute also for faceting, use the `afterDistinct` modifier of the `attributesForFaceting` setting. This applies faceting _after_ deduplication, which will result in accurate facet counts. </value>
  [JsonPropertyName("attributeForDistinct")]
  public string AttributeForDistinct { get; set; }

  /// <summary>
  /// Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
  /// </summary>
  /// <value>Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).</value>
  [JsonPropertyName("maxFacetHits")]
  public int? MaxFacetHits { get; set; }

  /// <summary>
  /// Characters for which diacritics should be preserved.  By default, Algolia removes diacritics from letters. For example, `é` becomes `e`. If this causes issues in your search, you can specify characters that should keep their diacritics. 
  /// </summary>
  /// <value>Characters for which diacritics should be preserved.  By default, Algolia removes diacritics from letters. For example, `é` becomes `e`. If this causes issues in your search, you can specify characters that should keep their diacritics. </value>
  [JsonPropertyName("keepDiacriticsOnCharacters")]
  public string KeepDiacriticsOnCharacters { get; set; }

  /// <summary>
  /// Attributes to use as [custom ranking](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/). Attribute names are case-sensitive.  The custom ranking attributes decide which items are shown first if the other ranking criteria are equal.  Records with missing values for your selected custom ranking attributes are always sorted last. Boolean attributes are sorted based on their alphabetical order.  **Modifiers**  - `asc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in ascending order.  - `desc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in descending order.  If you use two or more custom ranking attributes, [reduce the precision](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/how-to/controlling-custom-ranking-metrics-precision/) of your first attributes, or the other attributes will never be applied. 
  /// </summary>
  /// <value>Attributes to use as [custom ranking](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/). Attribute names are case-sensitive.  The custom ranking attributes decide which items are shown first if the other ranking criteria are equal.  Records with missing values for your selected custom ranking attributes are always sorted last. Boolean attributes are sorted based on their alphabetical order.  **Modifiers**  - `asc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in ascending order.  - `desc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in descending order.  If you use two or more custom ranking attributes, [reduce the precision](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/how-to/controlling-custom-ranking-metrics-precision/) of your first attributes, or the other attributes will never be applied. </value>
  [JsonPropertyName("customRanking")]
  public List<string> CustomRanking { get; set; }

  /// <summary>
  /// Attributes to include in the API response.  To reduce the size of your response, you can retrieve only some of the attributes. Attribute names are case-sensitive.  - `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings. - To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID` attribute is always included. 
  /// </summary>
  /// <value>Attributes to include in the API response.  To reduce the size of your response, you can retrieve only some of the attributes. Attribute names are case-sensitive.  - `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings. - To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID` attribute is always included. </value>
  [JsonPropertyName("attributesToRetrieve")]
  public List<string> AttributesToRetrieve { get; set; }

  /// <summary>
  /// Determines the order in which Algolia returns your results.  By default, each entry corresponds to a [ranking criteria](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/). The tie-breaking algorithm sequentially applies each criterion in the order they're specified. If you configure a replica index for [sorting by an attribute](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-by-attribute/), you put the sorting attribute at the top of the list.  **Modifiers**  - `asc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in ascending order. - `desc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in descending order.  Before you modify the default setting, you should test your changes in the dashboard, and by [A/B testing](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/). 
  /// </summary>
  /// <value>Determines the order in which Algolia returns your results.  By default, each entry corresponds to a [ranking criteria](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/). The tie-breaking algorithm sequentially applies each criterion in the order they're specified. If you configure a replica index for [sorting by an attribute](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-by-attribute/), you put the sorting attribute at the top of the list.  **Modifiers**  - `asc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in ascending order. - `desc(\"ATTRIBUTE\")`.   Sort the index by the values of an attribute, in descending order.  Before you modify the default setting, you should test your changes in the dashboard, and by [A/B testing](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/). </value>
  [JsonPropertyName("ranking")]
  public List<string> Ranking { get; set; }

  /// <summary>
  /// Relevancy threshold below which less relevant results aren't included in the results.  You can only set `relevancyStrictness` on [virtual replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/#what-are-virtual-replicas). Use this setting to strike a balance between the relevance and number of returned results. 
  /// </summary>
  /// <value>Relevancy threshold below which less relevant results aren't included in the results.  You can only set `relevancyStrictness` on [virtual replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/#what-are-virtual-replicas). Use this setting to strike a balance between the relevance and number of returned results. </value>
  [JsonPropertyName("relevancyStrictness")]
  public int? RelevancyStrictness { get; set; }

  /// <summary>
  /// Attributes to highlight.  By default, all searchable attributes are highlighted. Use `*` to highlight all attributes or use an empty array `[]` to turn off highlighting. Attribute names are case-sensitive.  With highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`. You can use this to visually highlight matching parts of a search query in your UI.  For more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/). 
  /// </summary>
  /// <value>Attributes to highlight.  By default, all searchable attributes are highlighted. Use `*` to highlight all attributes or use an empty array `[]` to turn off highlighting. Attribute names are case-sensitive.  With highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`. You can use this to visually highlight matching parts of a search query in your UI.  For more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/). </value>
  [JsonPropertyName("attributesToHighlight")]
  public List<string> AttributesToHighlight { get; set; }

  /// <summary>
  /// Attributes for which to enable snippets. Attribute names are case-sensitive.  Snippets provide additional context to matched words. If you enable snippets, they include 10 words, including the matched word. The matched word will also be wrapped by HTML tags for highlighting. You can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`, where `NUMBER` is the number of words to be extracted. 
  /// </summary>
  /// <value>Attributes for which to enable snippets. Attribute names are case-sensitive.  Snippets provide additional context to matched words. If you enable snippets, they include 10 words, including the matched word. The matched word will also be wrapped by HTML tags for highlighting. You can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`, where `NUMBER` is the number of words to be extracted. </value>
  [JsonPropertyName("attributesToSnippet")]
  public List<string> AttributesToSnippet { get; set; }

  /// <summary>
  /// HTML tag to insert before the highlighted parts in all highlighted results and snippets.
  /// </summary>
  /// <value>HTML tag to insert before the highlighted parts in all highlighted results and snippets.</value>
  [JsonPropertyName("highlightPreTag")]
  public string HighlightPreTag { get; set; }

  /// <summary>
  /// HTML tag to insert after the highlighted parts in all highlighted results and snippets.
  /// </summary>
  /// <value>HTML tag to insert after the highlighted parts in all highlighted results and snippets.</value>
  [JsonPropertyName("highlightPostTag")]
  public string HighlightPostTag { get; set; }

  /// <summary>
  /// String used as an ellipsis indicator when a snippet is truncated.
  /// </summary>
  /// <value>String used as an ellipsis indicator when a snippet is truncated.</value>
  [JsonPropertyName("snippetEllipsisText")]
  public string SnippetEllipsisText { get; set; }

  /// <summary>
  /// Whether to restrict highlighting and snippeting to items that at least partially matched the search query. By default, all items are highlighted and snippeted. 
  /// </summary>
  /// <value>Whether to restrict highlighting and snippeting to items that at least partially matched the search query. By default, all items are highlighted and snippeted. </value>
  [JsonPropertyName("restrictHighlightAndSnippetArrays")]
  public bool? RestrictHighlightAndSnippetArrays { get; set; }

  /// <summary>
  /// Number of hits per page.
  /// </summary>
  /// <value>Number of hits per page.</value>
  [JsonPropertyName("hitsPerPage")]
  public int? HitsPerPage { get; set; }

  /// <summary>
  /// Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
  /// </summary>
  /// <value>Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).</value>
  [JsonPropertyName("minWordSizefor1Typo")]
  public int? MinWordSizefor1Typo { get; set; }

  /// <summary>
  /// Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
  /// </summary>
  /// <value>Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).</value>
  [JsonPropertyName("minWordSizefor2Typos")]
  public int? MinWordSizefor2Typos { get; set; }

  /// <summary>
  /// Gets or Sets TypoTolerance
  /// </summary>
  [JsonPropertyName("typoTolerance")]
  public TypoTolerance TypoTolerance { get; set; }

  /// <summary>
  /// Whether to allow typos on numbers in the search query.  Turn off this setting to reduce the number of irrelevant matches when searching in large sets of similar numbers. 
  /// </summary>
  /// <value>Whether to allow typos on numbers in the search query.  Turn off this setting to reduce the number of irrelevant matches when searching in large sets of similar numbers. </value>
  [JsonPropertyName("allowTyposOnNumericTokens")]
  public bool? AllowTyposOnNumericTokens { get; set; }

  /// <summary>
  /// Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/). Attribute names are case-sensitive.  Returning only exact matches can help when:  - [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/). - Reducing the number of matches when you have too many.   This can happen with attributes that are long blocks of text, such as product descriptions.  Consider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos. 
  /// </summary>
  /// <value>Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/). Attribute names are case-sensitive.  Returning only exact matches can help when:  - [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/). - Reducing the number of matches when you have too many.   This can happen with attributes that are long blocks of text, such as product descriptions.  Consider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos. </value>
  [JsonPropertyName("disableTypoToleranceOnAttributes")]
  public List<string> DisableTypoToleranceOnAttributes { get; set; }

  /// <summary>
  /// Gets or Sets IgnorePlurals
  /// </summary>
  [JsonPropertyName("ignorePlurals")]
  public IgnorePlurals IgnorePlurals { get; set; }

  /// <summary>
  /// Gets or Sets RemoveStopWords
  /// </summary>
  [JsonPropertyName("removeStopWords")]
  public RemoveStopWords RemoveStopWords { get; set; }

  /// <summary>
  /// Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.  This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings. This setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages. To support this, you must place the CJK language **first**.  **You should always specify a query language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/). 
  /// </summary>
  /// <value>Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.  This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings. This setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages. To support this, you must place the CJK language **first**.  **You should always specify a query language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/). </value>
  [JsonPropertyName("queryLanguages")]
  public List<SupportedLanguage> QueryLanguages { get; set; }

  /// <summary>
  /// Whether to split compound words in the query into their building blocks.  For more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words). Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian. Decompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark). For example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308). 
  /// </summary>
  /// <value>Whether to split compound words in the query into their building blocks.  For more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words). Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian. Decompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark). For example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308). </value>
  [JsonPropertyName("decompoundQuery")]
  public bool? DecompoundQuery { get; set; }

  /// <summary>
  /// Whether to enable rules.
  /// </summary>
  /// <value>Whether to enable rules.</value>
  [JsonPropertyName("enableRules")]
  public bool? EnableRules { get; set; }

  /// <summary>
  /// Whether to enable Personalization.
  /// </summary>
  /// <value>Whether to enable Personalization.</value>
  [JsonPropertyName("enablePersonalization")]
  public bool? EnablePersonalization { get; set; }

  /// <summary>
  /// Gets or Sets SemanticSearch
  /// </summary>
  [JsonPropertyName("semanticSearch")]
  public SemanticSearch SemanticSearch { get; set; }

  /// <summary>
  /// Whether to support phrase matching and excluding words from search queries.  Use the `advancedSyntaxFeatures` parameter to control which feature is supported. 
  /// </summary>
  /// <value>Whether to support phrase matching and excluding words from search queries.  Use the `advancedSyntaxFeatures` parameter to control which feature is supported. </value>
  [JsonPropertyName("advancedSyntax")]
  public bool? AdvancedSyntax { get; set; }

  /// <summary>
  /// Gets or Sets OptionalWords
  /// </summary>
  [JsonPropertyName("optionalWords")]
  public OptionalWords OptionalWords { get; set; }

  /// <summary>
  /// Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes). Attribute names are case-sensitive.  This can be useful for attributes with long values, where the likelihood of an exact match is high, such as product descriptions. Turning off the Exact ranking criterion for these attributes favors exact matching on other attributes. This reduces the impact of individual attributes with a lot of content on ranking. 
  /// </summary>
  /// <value>Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes). Attribute names are case-sensitive.  This can be useful for attributes with long values, where the likelihood of an exact match is high, such as product descriptions. Turning off the Exact ranking criterion for these attributes favors exact matching on other attributes. This reduces the impact of individual attributes with a lot of content on ranking. </value>
  [JsonPropertyName("disableExactOnAttributes")]
  public List<string> DisableExactOnAttributes { get; set; }

  /// <summary>
  /// Determine which plurals and synonyms should be considered an exact matches.  By default, Algolia treats singular and plural forms of a word, and single-word synonyms, as [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact) matches when searching. For example:  - \"swimsuit\" and \"swimsuits\" are treated the same - \"swimsuit\" and \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms)).  - `ignorePlurals`.   Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches.  - `singleWordSynonym`.   Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches.  - `multiWordsSynonym`.   Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches. 
  /// </summary>
  /// <value>Determine which plurals and synonyms should be considered an exact matches.  By default, Algolia treats singular and plural forms of a word, and single-word synonyms, as [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact) matches when searching. For example:  - \"swimsuit\" and \"swimsuits\" are treated the same - \"swimsuit\" and \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms)).  - `ignorePlurals`.   Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches.  - `singleWordSynonym`.   Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches.  - `multiWordsSynonym`.   Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches. </value>
  [JsonPropertyName("alternativesAsExact")]
  public List<AlternativesAsExact> AlternativesAsExact { get; set; }

  /// <summary>
  /// Advanced search syntax features you want to support.  - `exactPhrase`.   Phrases in quotes must match exactly.   For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\".  - `excludeWords`.   Query words prefixed with a `-` must not occur in a record.   For example, `search -engine` matches records that contain \"search\" but not \"engine\".  This setting only has an effect if `advancedSyntax` is true. 
  /// </summary>
  /// <value>Advanced search syntax features you want to support.  - `exactPhrase`.   Phrases in quotes must match exactly.   For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\".  - `excludeWords`.   Query words prefixed with a `-` must not occur in a record.   For example, `search -engine` matches records that contain \"search\" but not \"engine\".  This setting only has an effect if `advancedSyntax` is true. </value>
  [JsonPropertyName("advancedSyntaxFeatures")]
  public List<AdvancedSyntaxFeatures> AdvancedSyntaxFeatures { get; set; }

  /// <summary>
  /// Gets or Sets Distinct
  /// </summary>
  [JsonPropertyName("distinct")]
  public Distinct Distinct { get; set; }

  /// <summary>
  /// Whether to replace a highlighted word with the matched synonym.  By default, the original words are highlighted even if a synonym matches. For example, with `home` as a synonym for `house` and a search for `home`, records matching either \"home\" or \"house\" are included in the search results, and either \"home\" or \"house\" are highlighted.  With `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records, but all occurrences of \"house\" are replaced by \"home\" in the highlighted response. 
  /// </summary>
  /// <value>Whether to replace a highlighted word with the matched synonym.  By default, the original words are highlighted even if a synonym matches. For example, with `home` as a synonym for `house` and a search for `home`, records matching either \"home\" or \"house\" are included in the search results, and either \"home\" or \"house\" are highlighted.  With `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records, but all occurrences of \"house\" are replaced by \"home\" in the highlighted response. </value>
  [JsonPropertyName("replaceSynonymsInHighlight")]
  public bool? ReplaceSynonymsInHighlight { get; set; }

  /// <summary>
  /// Minimum proximity score for two matching words.  This adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity) by equally scoring matches that are farther apart.  For example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score. 
  /// </summary>
  /// <value>Minimum proximity score for two matching words.  This adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity) by equally scoring matches that are farther apart.  For example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score. </value>
  [JsonPropertyName("minProximity")]
  public int? MinProximity { get; set; }

  /// <summary>
  /// Properties to include in the API response of search and browse requests.  By default, all response properties are included. To reduce the response size, you can select which properties should be included.  An empty list may lead to an empty API response (except properties you can't exclude).  You can't exclude these properties: `message`, `warning`, `cursor`, `abTestVariantID`, or any property added by setting `getRankingInfo` to true.  Your search depends on the `hits` field. If you omit this field, searches won't return any results. Your UI might also depend on other properties, for example, for pagination. Before restricting the response size, check the impact on your search experience. 
  /// </summary>
  /// <value>Properties to include in the API response of search and browse requests.  By default, all response properties are included. To reduce the response size, you can select which properties should be included.  An empty list may lead to an empty API response (except properties you can't exclude).  You can't exclude these properties: `message`, `warning`, `cursor`, `abTestVariantID`, or any property added by setting `getRankingInfo` to true.  Your search depends on the `hits` field. If you omit this field, searches won't return any results. Your UI might also depend on other properties, for example, for pagination. Before restricting the response size, check the impact on your search experience. </value>
  [JsonPropertyName("responseFields")]
  public List<string> ResponseFields { get; set; }

  /// <summary>
  /// Maximum number of facet values to return for each facet.
  /// </summary>
  /// <value>Maximum number of facet values to return for each facet.</value>
  [JsonPropertyName("maxValuesPerFacet")]
  public int? MaxValuesPerFacet { get; set; }

  /// <summary>
  /// Order in which to retrieve facet values.  - `count`.   Facet values are retrieved by decreasing count.   The count is the number of matching records containing this facet value.  - `alpha`.   Retrieve facet values alphabetically.  This setting doesn't influence how facet values are displayed in your UI (see `renderingContent`). For more information, see [facet value display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js/). 
  /// </summary>
  /// <value>Order in which to retrieve facet values.  - `count`.   Facet values are retrieved by decreasing count.   The count is the number of matching records containing this facet value.  - `alpha`.   Retrieve facet values alphabetically.  This setting doesn't influence how facet values are displayed in your UI (see `renderingContent`). For more information, see [facet value display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js/). </value>
  [JsonPropertyName("sortFacetValuesBy")]
  public string SortFacetValuesBy { get; set; }

  /// <summary>
  /// Whether the best matching attribute should be determined by minimum proximity.  This setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting. If true, the best matching attribute is selected based on the minimum proximity of multiple matches. Otherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting. 
  /// </summary>
  /// <value>Whether the best matching attribute should be determined by minimum proximity.  This setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting. If true, the best matching attribute is selected based on the minimum proximity of multiple matches. Otherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting. </value>
  [JsonPropertyName("attributeCriteriaComputedByMinProximity")]
  public bool? AttributeCriteriaComputedByMinProximity { get; set; }

  /// <summary>
  /// Gets or Sets RenderingContent
  /// </summary>
  [JsonPropertyName("renderingContent")]
  public RenderingContent RenderingContent { get; set; }

  /// <summary>
  /// Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).  This setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard. 
  /// </summary>
  /// <value>Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).  This setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard. </value>
  [JsonPropertyName("enableReRanking")]
  public bool? EnableReRanking { get; set; }

  /// <summary>
  /// Gets or Sets ReRankingApplyFilter
  /// </summary>
  [JsonPropertyName("reRankingApplyFilter")]
  public ReRankingApplyFilter ReRankingApplyFilter { get; set; }

  /// <summary>
  /// Replica indices only: the name of the primary index for this replica. 
  /// </summary>
  /// <value>Replica indices only: the name of the primary index for this replica. </value>
  [JsonPropertyName("primary")]
  public string Primary { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SettingsResponse {\n");
    sb.Append("  AttributesForFaceting: ").Append(AttributesForFaceting).Append("\n");
    sb.Append("  Replicas: ").Append(Replicas).Append("\n");
    sb.Append("  PaginationLimitedTo: ").Append(PaginationLimitedTo).Append("\n");
    sb.Append("  UnretrievableAttributes: ").Append(UnretrievableAttributes).Append("\n");
    sb.Append("  DisableTypoToleranceOnWords: ").Append(DisableTypoToleranceOnWords).Append("\n");
    sb.Append("  AttributesToTransliterate: ").Append(AttributesToTransliterate).Append("\n");
    sb.Append("  CamelCaseAttributes: ").Append(CamelCaseAttributes).Append("\n");
    sb.Append("  DecompoundedAttributes: ").Append(DecompoundedAttributes).Append("\n");
    sb.Append("  IndexLanguages: ").Append(IndexLanguages).Append("\n");
    sb.Append("  DisablePrefixOnAttributes: ").Append(DisablePrefixOnAttributes).Append("\n");
    sb.Append("  AllowCompressionOfIntegerArray: ").Append(AllowCompressionOfIntegerArray).Append("\n");
    sb.Append("  NumericAttributesForFiltering: ").Append(NumericAttributesForFiltering).Append("\n");
    sb.Append("  SeparatorsToIndex: ").Append(SeparatorsToIndex).Append("\n");
    sb.Append("  SearchableAttributes: ").Append(SearchableAttributes).Append("\n");
    sb.Append("  UserData: ").Append(UserData).Append("\n");
    sb.Append("  CustomNormalization: ").Append(CustomNormalization).Append("\n");
    sb.Append("  AttributeForDistinct: ").Append(AttributeForDistinct).Append("\n");
    sb.Append("  MaxFacetHits: ").Append(MaxFacetHits).Append("\n");
    sb.Append("  KeepDiacriticsOnCharacters: ").Append(KeepDiacriticsOnCharacters).Append("\n");
    sb.Append("  CustomRanking: ").Append(CustomRanking).Append("\n");
    sb.Append("  AttributesToRetrieve: ").Append(AttributesToRetrieve).Append("\n");
    sb.Append("  Ranking: ").Append(Ranking).Append("\n");
    sb.Append("  RelevancyStrictness: ").Append(RelevancyStrictness).Append("\n");
    sb.Append("  AttributesToHighlight: ").Append(AttributesToHighlight).Append("\n");
    sb.Append("  AttributesToSnippet: ").Append(AttributesToSnippet).Append("\n");
    sb.Append("  HighlightPreTag: ").Append(HighlightPreTag).Append("\n");
    sb.Append("  HighlightPostTag: ").Append(HighlightPostTag).Append("\n");
    sb.Append("  SnippetEllipsisText: ").Append(SnippetEllipsisText).Append("\n");
    sb.Append("  RestrictHighlightAndSnippetArrays: ").Append(RestrictHighlightAndSnippetArrays).Append("\n");
    sb.Append("  HitsPerPage: ").Append(HitsPerPage).Append("\n");
    sb.Append("  MinWordSizefor1Typo: ").Append(MinWordSizefor1Typo).Append("\n");
    sb.Append("  MinWordSizefor2Typos: ").Append(MinWordSizefor2Typos).Append("\n");
    sb.Append("  TypoTolerance: ").Append(TypoTolerance).Append("\n");
    sb.Append("  AllowTyposOnNumericTokens: ").Append(AllowTyposOnNumericTokens).Append("\n");
    sb.Append("  DisableTypoToleranceOnAttributes: ").Append(DisableTypoToleranceOnAttributes).Append("\n");
    sb.Append("  IgnorePlurals: ").Append(IgnorePlurals).Append("\n");
    sb.Append("  RemoveStopWords: ").Append(RemoveStopWords).Append("\n");
    sb.Append("  QueryLanguages: ").Append(QueryLanguages).Append("\n");
    sb.Append("  DecompoundQuery: ").Append(DecompoundQuery).Append("\n");
    sb.Append("  EnableRules: ").Append(EnableRules).Append("\n");
    sb.Append("  EnablePersonalization: ").Append(EnablePersonalization).Append("\n");
    sb.Append("  QueryType: ").Append(QueryType).Append("\n");
    sb.Append("  RemoveWordsIfNoResults: ").Append(RemoveWordsIfNoResults).Append("\n");
    sb.Append("  Mode: ").Append(Mode).Append("\n");
    sb.Append("  SemanticSearch: ").Append(SemanticSearch).Append("\n");
    sb.Append("  AdvancedSyntax: ").Append(AdvancedSyntax).Append("\n");
    sb.Append("  OptionalWords: ").Append(OptionalWords).Append("\n");
    sb.Append("  DisableExactOnAttributes: ").Append(DisableExactOnAttributes).Append("\n");
    sb.Append("  ExactOnSingleWordQuery: ").Append(ExactOnSingleWordQuery).Append("\n");
    sb.Append("  AlternativesAsExact: ").Append(AlternativesAsExact).Append("\n");
    sb.Append("  AdvancedSyntaxFeatures: ").Append(AdvancedSyntaxFeatures).Append("\n");
    sb.Append("  Distinct: ").Append(Distinct).Append("\n");
    sb.Append("  ReplaceSynonymsInHighlight: ").Append(ReplaceSynonymsInHighlight).Append("\n");
    sb.Append("  MinProximity: ").Append(MinProximity).Append("\n");
    sb.Append("  ResponseFields: ").Append(ResponseFields).Append("\n");
    sb.Append("  MaxValuesPerFacet: ").Append(MaxValuesPerFacet).Append("\n");
    sb.Append("  SortFacetValuesBy: ").Append(SortFacetValuesBy).Append("\n");
    sb.Append("  AttributeCriteriaComputedByMinProximity: ").Append(AttributeCriteriaComputedByMinProximity).Append("\n");
    sb.Append("  RenderingContent: ").Append(RenderingContent).Append("\n");
    sb.Append("  EnableReRanking: ").Append(EnableReRanking).Append("\n");
    sb.Append("  ReRankingApplyFilter: ").Append(ReRankingApplyFilter).Append("\n");
    sb.Append("  Primary: ").Append(Primary).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SettingsResponse input)
    {
      return false;
    }

    return
        (AttributesForFaceting == input.AttributesForFaceting || AttributesForFaceting != null && input.AttributesForFaceting != null && AttributesForFaceting.SequenceEqual(input.AttributesForFaceting)) &&
        (Replicas == input.Replicas || Replicas != null && input.Replicas != null && Replicas.SequenceEqual(input.Replicas)) &&
        (PaginationLimitedTo == input.PaginationLimitedTo || PaginationLimitedTo.Equals(input.PaginationLimitedTo)) &&
        (UnretrievableAttributes == input.UnretrievableAttributes || UnretrievableAttributes != null && input.UnretrievableAttributes != null && UnretrievableAttributes.SequenceEqual(input.UnretrievableAttributes)) &&
        (DisableTypoToleranceOnWords == input.DisableTypoToleranceOnWords || DisableTypoToleranceOnWords != null && input.DisableTypoToleranceOnWords != null && DisableTypoToleranceOnWords.SequenceEqual(input.DisableTypoToleranceOnWords)) &&
        (AttributesToTransliterate == input.AttributesToTransliterate || AttributesToTransliterate != null && input.AttributesToTransliterate != null && AttributesToTransliterate.SequenceEqual(input.AttributesToTransliterate)) &&
        (CamelCaseAttributes == input.CamelCaseAttributes || CamelCaseAttributes != null && input.CamelCaseAttributes != null && CamelCaseAttributes.SequenceEqual(input.CamelCaseAttributes)) &&
        (DecompoundedAttributes == input.DecompoundedAttributes || (DecompoundedAttributes != null && DecompoundedAttributes.Equals(input.DecompoundedAttributes))) &&
        (IndexLanguages == input.IndexLanguages || IndexLanguages != null && input.IndexLanguages != null && IndexLanguages.SequenceEqual(input.IndexLanguages)) &&
        (DisablePrefixOnAttributes == input.DisablePrefixOnAttributes || DisablePrefixOnAttributes != null && input.DisablePrefixOnAttributes != null && DisablePrefixOnAttributes.SequenceEqual(input.DisablePrefixOnAttributes)) &&
        (AllowCompressionOfIntegerArray == input.AllowCompressionOfIntegerArray || AllowCompressionOfIntegerArray.Equals(input.AllowCompressionOfIntegerArray)) &&
        (NumericAttributesForFiltering == input.NumericAttributesForFiltering || NumericAttributesForFiltering != null && input.NumericAttributesForFiltering != null && NumericAttributesForFiltering.SequenceEqual(input.NumericAttributesForFiltering)) &&
        (SeparatorsToIndex == input.SeparatorsToIndex || (SeparatorsToIndex != null && SeparatorsToIndex.Equals(input.SeparatorsToIndex))) &&
        (SearchableAttributes == input.SearchableAttributes || SearchableAttributes != null && input.SearchableAttributes != null && SearchableAttributes.SequenceEqual(input.SearchableAttributes)) &&
        (UserData == input.UserData || (UserData != null && UserData.Equals(input.UserData))) &&
        (CustomNormalization == input.CustomNormalization || CustomNormalization != null && input.CustomNormalization != null && CustomNormalization.SequenceEqual(input.CustomNormalization)) &&
        (AttributeForDistinct == input.AttributeForDistinct || (AttributeForDistinct != null && AttributeForDistinct.Equals(input.AttributeForDistinct))) &&
        (MaxFacetHits == input.MaxFacetHits || MaxFacetHits.Equals(input.MaxFacetHits)) &&
        (KeepDiacriticsOnCharacters == input.KeepDiacriticsOnCharacters || (KeepDiacriticsOnCharacters != null && KeepDiacriticsOnCharacters.Equals(input.KeepDiacriticsOnCharacters))) &&
        (CustomRanking == input.CustomRanking || CustomRanking != null && input.CustomRanking != null && CustomRanking.SequenceEqual(input.CustomRanking)) &&
        (AttributesToRetrieve == input.AttributesToRetrieve || AttributesToRetrieve != null && input.AttributesToRetrieve != null && AttributesToRetrieve.SequenceEqual(input.AttributesToRetrieve)) &&
        (Ranking == input.Ranking || Ranking != null && input.Ranking != null && Ranking.SequenceEqual(input.Ranking)) &&
        (RelevancyStrictness == input.RelevancyStrictness || RelevancyStrictness.Equals(input.RelevancyStrictness)) &&
        (AttributesToHighlight == input.AttributesToHighlight || AttributesToHighlight != null && input.AttributesToHighlight != null && AttributesToHighlight.SequenceEqual(input.AttributesToHighlight)) &&
        (AttributesToSnippet == input.AttributesToSnippet || AttributesToSnippet != null && input.AttributesToSnippet != null && AttributesToSnippet.SequenceEqual(input.AttributesToSnippet)) &&
        (HighlightPreTag == input.HighlightPreTag || (HighlightPreTag != null && HighlightPreTag.Equals(input.HighlightPreTag))) &&
        (HighlightPostTag == input.HighlightPostTag || (HighlightPostTag != null && HighlightPostTag.Equals(input.HighlightPostTag))) &&
        (SnippetEllipsisText == input.SnippetEllipsisText || (SnippetEllipsisText != null && SnippetEllipsisText.Equals(input.SnippetEllipsisText))) &&
        (RestrictHighlightAndSnippetArrays == input.RestrictHighlightAndSnippetArrays || RestrictHighlightAndSnippetArrays.Equals(input.RestrictHighlightAndSnippetArrays)) &&
        (HitsPerPage == input.HitsPerPage || HitsPerPage.Equals(input.HitsPerPage)) &&
        (MinWordSizefor1Typo == input.MinWordSizefor1Typo || MinWordSizefor1Typo.Equals(input.MinWordSizefor1Typo)) &&
        (MinWordSizefor2Typos == input.MinWordSizefor2Typos || MinWordSizefor2Typos.Equals(input.MinWordSizefor2Typos)) &&
        (TypoTolerance == input.TypoTolerance || (TypoTolerance != null && TypoTolerance.Equals(input.TypoTolerance))) &&
        (AllowTyposOnNumericTokens == input.AllowTyposOnNumericTokens || AllowTyposOnNumericTokens.Equals(input.AllowTyposOnNumericTokens)) &&
        (DisableTypoToleranceOnAttributes == input.DisableTypoToleranceOnAttributes || DisableTypoToleranceOnAttributes != null && input.DisableTypoToleranceOnAttributes != null && DisableTypoToleranceOnAttributes.SequenceEqual(input.DisableTypoToleranceOnAttributes)) &&
        (IgnorePlurals == input.IgnorePlurals || (IgnorePlurals != null && IgnorePlurals.Equals(input.IgnorePlurals))) &&
        (RemoveStopWords == input.RemoveStopWords || (RemoveStopWords != null && RemoveStopWords.Equals(input.RemoveStopWords))) &&
        (QueryLanguages == input.QueryLanguages || QueryLanguages != null && input.QueryLanguages != null && QueryLanguages.SequenceEqual(input.QueryLanguages)) &&
        (DecompoundQuery == input.DecompoundQuery || DecompoundQuery.Equals(input.DecompoundQuery)) &&
        (EnableRules == input.EnableRules || EnableRules.Equals(input.EnableRules)) &&
        (EnablePersonalization == input.EnablePersonalization || EnablePersonalization.Equals(input.EnablePersonalization)) &&
        (QueryType == input.QueryType || QueryType.Equals(input.QueryType)) &&
        (RemoveWordsIfNoResults == input.RemoveWordsIfNoResults || RemoveWordsIfNoResults.Equals(input.RemoveWordsIfNoResults)) &&
        (Mode == input.Mode || Mode.Equals(input.Mode)) &&
        (SemanticSearch == input.SemanticSearch || (SemanticSearch != null && SemanticSearch.Equals(input.SemanticSearch))) &&
        (AdvancedSyntax == input.AdvancedSyntax || AdvancedSyntax.Equals(input.AdvancedSyntax)) &&
        (OptionalWords == input.OptionalWords || (OptionalWords != null && OptionalWords.Equals(input.OptionalWords))) &&
        (DisableExactOnAttributes == input.DisableExactOnAttributes || DisableExactOnAttributes != null && input.DisableExactOnAttributes != null && DisableExactOnAttributes.SequenceEqual(input.DisableExactOnAttributes)) &&
        (ExactOnSingleWordQuery == input.ExactOnSingleWordQuery || ExactOnSingleWordQuery.Equals(input.ExactOnSingleWordQuery)) &&
        (AlternativesAsExact == input.AlternativesAsExact || AlternativesAsExact != null && input.AlternativesAsExact != null && AlternativesAsExact.SequenceEqual(input.AlternativesAsExact)) &&
        (AdvancedSyntaxFeatures == input.AdvancedSyntaxFeatures || AdvancedSyntaxFeatures != null && input.AdvancedSyntaxFeatures != null && AdvancedSyntaxFeatures.SequenceEqual(input.AdvancedSyntaxFeatures)) &&
        (Distinct == input.Distinct || (Distinct != null && Distinct.Equals(input.Distinct))) &&
        (ReplaceSynonymsInHighlight == input.ReplaceSynonymsInHighlight || ReplaceSynonymsInHighlight.Equals(input.ReplaceSynonymsInHighlight)) &&
        (MinProximity == input.MinProximity || MinProximity.Equals(input.MinProximity)) &&
        (ResponseFields == input.ResponseFields || ResponseFields != null && input.ResponseFields != null && ResponseFields.SequenceEqual(input.ResponseFields)) &&
        (MaxValuesPerFacet == input.MaxValuesPerFacet || MaxValuesPerFacet.Equals(input.MaxValuesPerFacet)) &&
        (SortFacetValuesBy == input.SortFacetValuesBy || (SortFacetValuesBy != null && SortFacetValuesBy.Equals(input.SortFacetValuesBy))) &&
        (AttributeCriteriaComputedByMinProximity == input.AttributeCriteriaComputedByMinProximity || AttributeCriteriaComputedByMinProximity.Equals(input.AttributeCriteriaComputedByMinProximity)) &&
        (RenderingContent == input.RenderingContent || (RenderingContent != null && RenderingContent.Equals(input.RenderingContent))) &&
        (EnableReRanking == input.EnableReRanking || EnableReRanking.Equals(input.EnableReRanking)) &&
        (ReRankingApplyFilter == input.ReRankingApplyFilter || (ReRankingApplyFilter != null && ReRankingApplyFilter.Equals(input.ReRankingApplyFilter))) &&
        (Primary == input.Primary || (Primary != null && Primary.Equals(input.Primary)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (AttributesForFaceting != null)
      {
        hashCode = (hashCode * 59) + AttributesForFaceting.GetHashCode();
      }
      if (Replicas != null)
      {
        hashCode = (hashCode * 59) + Replicas.GetHashCode();
      }
      hashCode = (hashCode * 59) + PaginationLimitedTo.GetHashCode();
      if (UnretrievableAttributes != null)
      {
        hashCode = (hashCode * 59) + UnretrievableAttributes.GetHashCode();
      }
      if (DisableTypoToleranceOnWords != null)
      {
        hashCode = (hashCode * 59) + DisableTypoToleranceOnWords.GetHashCode();
      }
      if (AttributesToTransliterate != null)
      {
        hashCode = (hashCode * 59) + AttributesToTransliterate.GetHashCode();
      }
      if (CamelCaseAttributes != null)
      {
        hashCode = (hashCode * 59) + CamelCaseAttributes.GetHashCode();
      }
      if (DecompoundedAttributes != null)
      {
        hashCode = (hashCode * 59) + DecompoundedAttributes.GetHashCode();
      }
      if (IndexLanguages != null)
      {
        hashCode = (hashCode * 59) + IndexLanguages.GetHashCode();
      }
      if (DisablePrefixOnAttributes != null)
      {
        hashCode = (hashCode * 59) + DisablePrefixOnAttributes.GetHashCode();
      }
      hashCode = (hashCode * 59) + AllowCompressionOfIntegerArray.GetHashCode();
      if (NumericAttributesForFiltering != null)
      {
        hashCode = (hashCode * 59) + NumericAttributesForFiltering.GetHashCode();
      }
      if (SeparatorsToIndex != null)
      {
        hashCode = (hashCode * 59) + SeparatorsToIndex.GetHashCode();
      }
      if (SearchableAttributes != null)
      {
        hashCode = (hashCode * 59) + SearchableAttributes.GetHashCode();
      }
      if (UserData != null)
      {
        hashCode = (hashCode * 59) + UserData.GetHashCode();
      }
      if (CustomNormalization != null)
      {
        hashCode = (hashCode * 59) + CustomNormalization.GetHashCode();
      }
      if (AttributeForDistinct != null)
      {
        hashCode = (hashCode * 59) + AttributeForDistinct.GetHashCode();
      }
      hashCode = (hashCode * 59) + MaxFacetHits.GetHashCode();
      if (KeepDiacriticsOnCharacters != null)
      {
        hashCode = (hashCode * 59) + KeepDiacriticsOnCharacters.GetHashCode();
      }
      if (CustomRanking != null)
      {
        hashCode = (hashCode * 59) + CustomRanking.GetHashCode();
      }
      if (AttributesToRetrieve != null)
      {
        hashCode = (hashCode * 59) + AttributesToRetrieve.GetHashCode();
      }
      if (Ranking != null)
      {
        hashCode = (hashCode * 59) + Ranking.GetHashCode();
      }
      hashCode = (hashCode * 59) + RelevancyStrictness.GetHashCode();
      if (AttributesToHighlight != null)
      {
        hashCode = (hashCode * 59) + AttributesToHighlight.GetHashCode();
      }
      if (AttributesToSnippet != null)
      {
        hashCode = (hashCode * 59) + AttributesToSnippet.GetHashCode();
      }
      if (HighlightPreTag != null)
      {
        hashCode = (hashCode * 59) + HighlightPreTag.GetHashCode();
      }
      if (HighlightPostTag != null)
      {
        hashCode = (hashCode * 59) + HighlightPostTag.GetHashCode();
      }
      if (SnippetEllipsisText != null)
      {
        hashCode = (hashCode * 59) + SnippetEllipsisText.GetHashCode();
      }
      hashCode = (hashCode * 59) + RestrictHighlightAndSnippetArrays.GetHashCode();
      hashCode = (hashCode * 59) + HitsPerPage.GetHashCode();
      hashCode = (hashCode * 59) + MinWordSizefor1Typo.GetHashCode();
      hashCode = (hashCode * 59) + MinWordSizefor2Typos.GetHashCode();
      if (TypoTolerance != null)
      {
        hashCode = (hashCode * 59) + TypoTolerance.GetHashCode();
      }
      hashCode = (hashCode * 59) + AllowTyposOnNumericTokens.GetHashCode();
      if (DisableTypoToleranceOnAttributes != null)
      {
        hashCode = (hashCode * 59) + DisableTypoToleranceOnAttributes.GetHashCode();
      }
      if (IgnorePlurals != null)
      {
        hashCode = (hashCode * 59) + IgnorePlurals.GetHashCode();
      }
      if (RemoveStopWords != null)
      {
        hashCode = (hashCode * 59) + RemoveStopWords.GetHashCode();
      }
      if (QueryLanguages != null)
      {
        hashCode = (hashCode * 59) + QueryLanguages.GetHashCode();
      }
      hashCode = (hashCode * 59) + DecompoundQuery.GetHashCode();
      hashCode = (hashCode * 59) + EnableRules.GetHashCode();
      hashCode = (hashCode * 59) + EnablePersonalization.GetHashCode();
      hashCode = (hashCode * 59) + QueryType.GetHashCode();
      hashCode = (hashCode * 59) + RemoveWordsIfNoResults.GetHashCode();
      hashCode = (hashCode * 59) + Mode.GetHashCode();
      if (SemanticSearch != null)
      {
        hashCode = (hashCode * 59) + SemanticSearch.GetHashCode();
      }
      hashCode = (hashCode * 59) + AdvancedSyntax.GetHashCode();
      if (OptionalWords != null)
      {
        hashCode = (hashCode * 59) + OptionalWords.GetHashCode();
      }
      if (DisableExactOnAttributes != null)
      {
        hashCode = (hashCode * 59) + DisableExactOnAttributes.GetHashCode();
      }
      hashCode = (hashCode * 59) + ExactOnSingleWordQuery.GetHashCode();
      if (AlternativesAsExact != null)
      {
        hashCode = (hashCode * 59) + AlternativesAsExact.GetHashCode();
      }
      if (AdvancedSyntaxFeatures != null)
      {
        hashCode = (hashCode * 59) + AdvancedSyntaxFeatures.GetHashCode();
      }
      if (Distinct != null)
      {
        hashCode = (hashCode * 59) + Distinct.GetHashCode();
      }
      hashCode = (hashCode * 59) + ReplaceSynonymsInHighlight.GetHashCode();
      hashCode = (hashCode * 59) + MinProximity.GetHashCode();
      if (ResponseFields != null)
      {
        hashCode = (hashCode * 59) + ResponseFields.GetHashCode();
      }
      hashCode = (hashCode * 59) + MaxValuesPerFacet.GetHashCode();
      if (SortFacetValuesBy != null)
      {
        hashCode = (hashCode * 59) + SortFacetValuesBy.GetHashCode();
      }
      hashCode = (hashCode * 59) + AttributeCriteriaComputedByMinProximity.GetHashCode();
      if (RenderingContent != null)
      {
        hashCode = (hashCode * 59) + RenderingContent.GetHashCode();
      }
      hashCode = (hashCode * 59) + EnableReRanking.GetHashCode();
      if (ReRankingApplyFilter != null)
      {
        hashCode = (hashCode * 59) + ReRankingApplyFilter.GetHashCode();
      }
      if (Primary != null)
      {
        hashCode = (hashCode * 59) + Primary.GetHashCode();
      }
      return hashCode;
    }
  }

}

