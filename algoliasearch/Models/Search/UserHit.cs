//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// UserHit
/// </summary>
public partial class UserHit
{
  /// <summary>
  /// Initializes a new instance of the UserHit class.
  /// </summary>
  [JsonConstructor]
  public UserHit() { }

  /// <summary>
  /// Initializes a new instance of the UserHit class.
  /// </summary>
  /// <param name="userID">Unique identifier of the user who makes the search request. (required).</param>
  /// <param name="clusterName">Cluster name. (required).</param>
  /// <param name="nbRecords">Number of records in the cluster. (required).</param>
  /// <param name="dataSize">Data size taken by all the users assigned to the cluster. (required).</param>
  /// <param name="objectID">userID of the requested user. Same as userID. (required).</param>
  /// <param name="highlightResult">highlightResult (required).</param>
  public UserHit(
    string userID,
    string clusterName,
    int nbRecords,
    int dataSize,
    string objectID,
    UserHighlightResult highlightResult
  )
  {
    UserID = userID ?? throw new ArgumentNullException(nameof(userID));
    ClusterName = clusterName ?? throw new ArgumentNullException(nameof(clusterName));
    NbRecords = nbRecords;
    DataSize = dataSize;
    ObjectID = objectID ?? throw new ArgumentNullException(nameof(objectID));
    HighlightResult = highlightResult ?? throw new ArgumentNullException(nameof(highlightResult));
  }

  /// <summary>
  /// Unique identifier of the user who makes the search request.
  /// </summary>
  /// <value>Unique identifier of the user who makes the search request.</value>
  [JsonPropertyName("userID")]
  public string UserID { get; set; }

  /// <summary>
  /// Cluster name.
  /// </summary>
  /// <value>Cluster name.</value>
  [JsonPropertyName("clusterName")]
  public string ClusterName { get; set; }

  /// <summary>
  /// Number of records in the cluster.
  /// </summary>
  /// <value>Number of records in the cluster.</value>
  [JsonPropertyName("nbRecords")]
  public int NbRecords { get; set; }

  /// <summary>
  /// Data size taken by all the users assigned to the cluster.
  /// </summary>
  /// <value>Data size taken by all the users assigned to the cluster.</value>
  [JsonPropertyName("dataSize")]
  public int DataSize { get; set; }

  /// <summary>
  /// userID of the requested user. Same as userID.
  /// </summary>
  /// <value>userID of the requested user. Same as userID.</value>
  [JsonPropertyName("objectID")]
  public string ObjectID { get; set; }

  /// <summary>
  /// Gets or Sets HighlightResult
  /// </summary>
  [JsonPropertyName("_highlightResult")]
  public UserHighlightResult HighlightResult { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class UserHit {\n");
    sb.Append("  UserID: ").Append(UserID).Append("\n");
    sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
    sb.Append("  NbRecords: ").Append(NbRecords).Append("\n");
    sb.Append("  DataSize: ").Append(DataSize).Append("\n");
    sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
    sb.Append("  HighlightResult: ").Append(HighlightResult).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not UserHit input)
    {
      return false;
    }

    return (UserID == input.UserID || (UserID != null && UserID.Equals(input.UserID)))
      && (
        ClusterName == input.ClusterName
        || (ClusterName != null && ClusterName.Equals(input.ClusterName))
      )
      && (NbRecords == input.NbRecords || NbRecords.Equals(input.NbRecords))
      && (DataSize == input.DataSize || DataSize.Equals(input.DataSize))
      && (ObjectID == input.ObjectID || (ObjectID != null && ObjectID.Equals(input.ObjectID)))
      && (
        HighlightResult == input.HighlightResult
        || (HighlightResult != null && HighlightResult.Equals(input.HighlightResult))
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (UserID != null)
      {
        hashCode = (hashCode * 59) + UserID.GetHashCode();
      }
      if (ClusterName != null)
      {
        hashCode = (hashCode * 59) + ClusterName.GetHashCode();
      }
      hashCode = (hashCode * 59) + NbRecords.GetHashCode();
      hashCode = (hashCode * 59) + DataSize.GetHashCode();
      if (ObjectID != null)
      {
        hashCode = (hashCode * 59) + ObjectID.GetHashCode();
      }
      if (HighlightResult != null)
      {
        hashCode = (hashCode * 59) + HighlightResult.GetHashCode();
      }
      return hashCode;
    }
  }
}
