//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// OperationIndexParams
/// </summary>
public partial class OperationIndexParams
{
  /// <summary>
  /// Gets or Sets Operation
  /// </summary>
  [JsonPropertyName("operation")]
  public OperationType? Operation { get; set; }

  /// <summary>
  /// Initializes a new instance of the OperationIndexParams class.
  /// </summary>
  [JsonConstructor]
  public OperationIndexParams() { }

  /// <summary>
  /// Initializes a new instance of the OperationIndexParams class.
  /// </summary>
  /// <param name="operation">operation (required).</param>
  /// <param name="destination">Index name (case-sensitive). (required).</param>
  public OperationIndexParams(OperationType? operation, string destination)
  {
    Operation = operation;
    Destination = destination ?? throw new ArgumentNullException(nameof(destination));
  }

  /// <summary>
  /// Index name (case-sensitive).
  /// </summary>
  /// <value>Index name (case-sensitive).</value>
  [JsonPropertyName("destination")]
  public string Destination { get; set; }

  /// <summary>
  /// **Only for copying.**  If you specify a scope, only the selected scopes are copied. Records and the other scopes are left unchanged. If you omit the `scope` parameter, everything is copied: records, settings, synonyms, and rules.
  /// </summary>
  /// <value>**Only for copying.**  If you specify a scope, only the selected scopes are copied. Records and the other scopes are left unchanged. If you omit the `scope` parameter, everything is copied: records, settings, synonyms, and rules. </value>
  [JsonPropertyName("scope")]
  public List<ScopeType> Scope { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class OperationIndexParams {\n");
    sb.Append("  Operation: ").Append(Operation).Append("\n");
    sb.Append("  Destination: ").Append(Destination).Append("\n");
    sb.Append("  Scope: ").Append(Scope).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not OperationIndexParams input)
    {
      return false;
    }

    return (Operation == input.Operation || Operation.Equals(input.Operation))
      && (
        Destination == input.Destination
        || (Destination != null && Destination.Equals(input.Destination))
      )
      && (
        Scope == input.Scope
        || Scope != null && input.Scope != null && Scope.SequenceEqual(input.Scope)
      );
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + Operation.GetHashCode();
      if (Destination != null)
      {
        hashCode = (hashCode * 59) + Destination.GetHashCode();
      }
      if (Scope != null)
      {
        hashCode = (hashCode * 59) + Scope.GetHashCode();
      }
      return hashCode;
    }
  }
}
