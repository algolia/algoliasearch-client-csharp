//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Effect of the rule.  For more information, see [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences).
/// </summary>
public partial class Consequence
{
  /// <summary>
  /// Initializes a new instance of the Consequence class.
  /// </summary>
  public Consequence() { }

  /// <summary>
  /// Gets or Sets Params
  /// </summary>
  [JsonPropertyName("params")]
  public ConsequenceParams Params { get; set; }

  /// <summary>
  /// Records you want to pin to a specific position in the search results.  You can promote up to 300 records, either individually, or as groups of up to 100 records each.
  /// </summary>
  /// <value>Records you want to pin to a specific position in the search results.  You can promote up to 300 records, either individually, or as groups of up to 100 records each. </value>
  [JsonPropertyName("promote")]
  public List<Promote> Promote { get; set; }

  /// <summary>
  /// Determines whether promoted records must also match active filters for the consequence to apply.  This ensures user-applied filters take priority and irrelevant matches aren't shown. For example, if you promote a record with `color: red` but the user filters for `color: blue`, the \"red\" record won't be shown.  > In the Algolia dashboard, when you use the **Pin an item** consequence, `filterPromotes` appears as the checkbox: **Pinned items must match active filters to be displayed.** For examples, see [Promote results with rules](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/promote-hits/#promote-results-matching-active-filters).
  /// </summary>
  /// <value>Determines whether promoted records must also match active filters for the consequence to apply.  This ensures user-applied filters take priority and irrelevant matches aren't shown. For example, if you promote a record with `color: red` but the user filters for `color: blue`, the \"red\" record won't be shown.  > In the Algolia dashboard, when you use the **Pin an item** consequence, `filterPromotes` appears as the checkbox: **Pinned items must match active filters to be displayed.** For examples, see [Promote results with rules](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/promote-hits/#promote-results-matching-active-filters). </value>
  [JsonPropertyName("filterPromotes")]
  public bool? FilterPromotes { get; set; }

  /// <summary>
  /// Records you want to hide from the search results.
  /// </summary>
  /// <value>Records you want to hide from the search results.</value>
  [JsonPropertyName("hide")]
  public List<ConsequenceHide> Hide { get; set; }

  /// <summary>
  /// A JSON object with custom data that will be appended to the `userData` array in the response. This object isn't interpreted by the API and is limited to 1&nbsp;kB of minified JSON.
  /// </summary>
  /// <value>A JSON object with custom data that will be appended to the `userData` array in the response. This object isn't interpreted by the API and is limited to 1&nbsp;kB of minified JSON. </value>
  [JsonPropertyName("userData")]
  public object UserData { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Consequence {\n");
    sb.Append("  Params: ").Append(Params).Append("\n");
    sb.Append("  Promote: ").Append(Promote).Append("\n");
    sb.Append("  FilterPromotes: ").Append(FilterPromotes).Append("\n");
    sb.Append("  Hide: ").Append(Hide).Append("\n");
    sb.Append("  UserData: ").Append(UserData).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Consequence input)
    {
      return false;
    }

    return (Params == input.Params || (Params != null && Params.Equals(input.Params)))
      && (
        Promote == input.Promote
        || Promote != null && input.Promote != null && Promote.SequenceEqual(input.Promote)
      )
      && (FilterPromotes == input.FilterPromotes || FilterPromotes.Equals(input.FilterPromotes))
      && (
        Hide == input.Hide || Hide != null && input.Hide != null && Hide.SequenceEqual(input.Hide)
      )
      && (UserData == input.UserData || (UserData != null && UserData.Equals(input.UserData)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Params != null)
      {
        hashCode = (hashCode * 59) + Params.GetHashCode();
      }
      if (Promote != null)
      {
        hashCode = (hashCode * 59) + Promote.GetHashCode();
      }
      hashCode = (hashCode * 59) + FilterPromotes.GetHashCode();
      if (Hide != null)
      {
        hashCode = (hashCode * 59) + Hide.GetHashCode();
      }
      if (UserData != null)
      {
        hashCode = (hashCode * 59) + UserData.GetHashCode();
      }
      return hashCode;
    }
  }
}
