//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Models.Personalization;
using Algolia.Search.Transport;
using Algolia.Search.Http;
using Algolia.Search.Utils;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;

namespace Algolia.Search.Clients;


/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IPersonalizationClient
{
  /// <summary>
  /// This method lets you send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomDeleteAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method lets you send requests to the Algolia REST API. (Synchronous version)
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>object</returns>
  object CustomDelete(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method lets you send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomGetAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method lets you send requests to the Algolia REST API. (Synchronous version)
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>object</returns>
  object CustomGet(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method lets you send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomPostAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method lets you send requests to the Algolia REST API. (Synchronous version)
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>object</returns>
  object CustomPost(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method lets you send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomPutAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method lets you send requests to the Algolia REST API. (Synchronous version)
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>object</returns>
  object CustomPut(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a user profile.  The response includes a date and time when the user profile can safely be considered deleted. 
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - recommendation
  /// <param name="userToken">Unique identifier representing a user for which to fetch the personalization profile.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteUserProfileResponse</returns>
  Task<DeleteUserProfileResponse> DeleteUserProfileAsync(string userToken, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a user profile.  The response includes a date and time when the user profile can safely be considered deleted.  (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - recommendation
  /// <param name="userToken">Unique identifier representing a user for which to fetch the personalization profile.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DeleteUserProfileResponse</returns>
  DeleteUserProfileResponse DeleteUserProfile(string userToken, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves the current personalization strategy.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - recommendation
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of PersonalizationStrategyParams</returns>
  Task<PersonalizationStrategyParams> GetPersonalizationStrategyAsync(RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves the current personalization strategy. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - recommendation
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>PersonalizationStrategyParams</returns>
  PersonalizationStrategyParams GetPersonalizationStrategy(RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a user profile and their affinities for different facets.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - recommendation
  /// <param name="userToken">Unique identifier representing a user for which to fetch the personalization profile.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of GetUserTokenResponse</returns>
  Task<GetUserTokenResponse> GetUserTokenProfileAsync(string userToken, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a user profile and their affinities for different facets. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - recommendation
  /// <param name="userToken">Unique identifier representing a user for which to fetch the personalization profile.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>GetUserTokenResponse</returns>
  GetUserTokenResponse GetUserTokenProfile(string userToken, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new personalization strategy.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - recommendation
  /// <param name="personalizationStrategyParams"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of SetPersonalizationStrategyResponse</returns>
  Task<SetPersonalizationStrategyResponse> SetPersonalizationStrategyAsync(PersonalizationStrategyParams personalizationStrategyParams, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new personalization strategy. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - recommendation
  /// <param name="personalizationStrategyParams"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>SetPersonalizationStrategyResponse</returns>
  SetPersonalizationStrategyResponse SetPersonalizationStrategy(PersonalizationStrategyParams personalizationStrategyParams, RequestOptions options = null, CancellationToken cancellationToken = default);

}



/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class PersonalizationClient : IPersonalizationClient
{
  internal HttpTransport _transport;
  private readonly ILogger<PersonalizationClient> _logger;

  /// <summary>
  /// Create a new Personalization client for the given appID and apiKey.
  /// </summary>
  /// <param name="applicationId">Your application</param>
  /// <param name="apiKey">Your API key</param>
  /// <param name="loggerFactory">Logger factory</param>
  /// <param name="region">The targeted region</param>
  public PersonalizationClient(string applicationId, string apiKey, string region, ILoggerFactory loggerFactory = null) : this(new PersonalizationConfig(applicationId, apiKey, region), new AlgoliaHttpRequester(loggerFactory), loggerFactory)
  {
  }

  /// <summary>
  /// Initialize a client with custom config
  /// </summary>
  /// <param name="config">Algolia configuration</param>
  /// <param name="loggerFactory">Logger factory</param>
  public PersonalizationClient(PersonalizationConfig config, ILoggerFactory loggerFactory = null) : this(config, new AlgoliaHttpRequester(loggerFactory), loggerFactory)
  {
  }

  /// <summary>
  /// Initialize the client with custom config and custom Requester
  /// </summary>
  /// <param name="config">Algolia Config</param>
  /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
  /// <param name="loggerFactory">Logger factory</param>
  public PersonalizationClient(PersonalizationConfig config, IHttpRequester httpRequester, ILoggerFactory loggerFactory = null)
  {
    if (httpRequester == null)
    {
      throw new ArgumentException("An httpRequester is required");
    }
    if (config == null)
    {
      throw new ArgumentException("A config is required");
    }
    if (string.IsNullOrWhiteSpace(config.AppId))
    {
      throw new ArgumentException("`AppId` is missing.");
    }
    if (string.IsNullOrWhiteSpace(config.ApiKey))
    {
      throw new ArgumentException("`ApiKey` is missing.");
    }

    var factory = loggerFactory ?? NullLoggerFactory.Instance;
    _transport = new HttpTransport(config, httpRequester, factory);
    _logger = factory.CreateLogger<PersonalizationClient>();

    if (_logger.IsEnabled(Microsoft.Extensions.Logging.LogLevel.Information))
    {
      _logger.LogInformation("Algolia Personalization client is initialized.");
    }
  }

  /// <summary>
  /// Helper to switch the API key sent with each request
  /// </summary>
  /// <param name="apiKey">Your new API Key</param>
  /// <returns></returns>
  public void SetClientApiKey(string apiKey)
  {
    _transport._algoliaConfig.SetClientApiKey(apiKey);
  }



  /// <inheritdoc />
  public async Task<object> CustomDeleteAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomDelete`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", QueryStringHelper.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("DELETE"), "/{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public object CustomDelete(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CustomDeleteAsync(path, parameters, options, cancellationToken));


  /// <inheritdoc />
  public async Task<object> CustomGetAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomGet`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", QueryStringHelper.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("GET"), "/{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public object CustomGet(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CustomGetAsync(path, parameters, options, cancellationToken));


  /// <inheritdoc />
  public async Task<object> CustomPostAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomPost`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", QueryStringHelper.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    requestOptions.Data = body;
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("POST"), "/{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public object CustomPost(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CustomPostAsync(path, parameters, body, options, cancellationToken));


  /// <inheritdoc />
  public async Task<object> CustomPutAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomPut`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", QueryStringHelper.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    requestOptions.Data = body;
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("PUT"), "/{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public object CustomPut(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CustomPutAsync(path, parameters, body, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DeleteUserProfileResponse> DeleteUserProfileAsync(string userToken, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (userToken == null)
      throw new ArgumentException("Parameter `userToken` is required when calling `DeleteUserProfile`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("userToken", QueryStringHelper.ParameterToString(userToken));

    return await _transport.ExecuteRequestAsync<DeleteUserProfileResponse>(new HttpMethod("DELETE"), "/1/profiles/{userToken}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DeleteUserProfileResponse DeleteUserProfile(string userToken, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DeleteUserProfileAsync(userToken, options, cancellationToken));


  /// <inheritdoc />
  public async Task<PersonalizationStrategyParams> GetPersonalizationStrategyAsync(RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    return await _transport.ExecuteRequestAsync<PersonalizationStrategyParams>(new HttpMethod("GET"), "/1/strategies/personalization", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public PersonalizationStrategyParams GetPersonalizationStrategy(RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetPersonalizationStrategyAsync(options, cancellationToken));


  /// <inheritdoc />
  public async Task<GetUserTokenResponse> GetUserTokenProfileAsync(string userToken, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (userToken == null)
      throw new ArgumentException("Parameter `userToken` is required when calling `GetUserTokenProfile`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("userToken", QueryStringHelper.ParameterToString(userToken));

    return await _transport.ExecuteRequestAsync<GetUserTokenResponse>(new HttpMethod("GET"), "/1/profiles/personalization/{userToken}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public GetUserTokenResponse GetUserTokenProfile(string userToken, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetUserTokenProfileAsync(userToken, options, cancellationToken));


  /// <inheritdoc />
  public async Task<SetPersonalizationStrategyResponse> SetPersonalizationStrategyAsync(PersonalizationStrategyParams personalizationStrategyParams, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (personalizationStrategyParams == null)
      throw new ArgumentException("Parameter `personalizationStrategyParams` is required when calling `SetPersonalizationStrategy`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = personalizationStrategyParams;
    return await _transport.ExecuteRequestAsync<SetPersonalizationStrategyResponse>(new HttpMethod("POST"), "/1/strategies/personalization", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public SetPersonalizationStrategyResponse SetPersonalizationStrategy(PersonalizationStrategyParams personalizationStrategyParams, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => SetPersonalizationStrategyAsync(personalizationStrategyParams, options, cancellationToken));

}
