/*
* Composition API
*
* Composition API.
*
* The version of the OpenAPI document: 1.0.0
* Generated by: https://github.com/openapitools/openapi-generator.git
*/


using System;
using System.Collections.Generic;
using Algolia.Search.Models.Common;
using Algolia.Search.Transport;
using Algolia.Search.Utils;

namespace Algolia.Search.Clients;

/// <summary>
/// Composition client configuration
/// </summary>
public sealed class CompositionConfig : AlgoliaConfig
{
  /// <summary>
  /// The configuration of the Composition client
  /// A client should have it's own configuration ie on configuration per client instance
  /// </summary>
  /// <param name="appId">Your application ID</param>
  /// <param name="apiKey">Your API Key</param>
  public CompositionConfig(string appId, string apiKey) : base(appId, apiKey, "Composition", "7.12.0")
  {
    DefaultHosts = GetDefaultHosts(appId);
    Compression = CompressionType.None;
    ReadTimeout = TimeSpan.FromMilliseconds(5000);
    WriteTimeout = TimeSpan.FromMilliseconds(30000);
    ConnectTimeout = TimeSpan.FromMilliseconds(2000);
  }
  private static List<StatefulHost> GetDefaultHosts(string appId)
  {
    var hosts = new List<StatefulHost>
  {
    new()
    {
      Url = $"{appId}-dsn.algolia.net",
      Up = true,
      LastUse = DateTime.UtcNow,
      Accept = CallType.Read
    },
    new()
    {
      Url = $"{appId}.algolia.net", Up = true, LastUse = DateTime.UtcNow, Accept = CallType.Write,
    }
  };

    var commonHosts = new List<StatefulHost>
  {
    new()
    {
      Url = $"{appId}-1.algolianet.com",
      Up = true,
      LastUse = DateTime.UtcNow,
      Accept = CallType.Read | CallType.Write,
    },
    new()
    {
      Url = $"{appId}-2.algolianet.com",
      Up = true,
      LastUse = DateTime.UtcNow,
      Accept = CallType.Read | CallType.Write,
    },
    new()
    {
      Url = $"{appId}-3.algolianet.com",
      Up = true,
      LastUse = DateTime.UtcNow,
      Accept = CallType.Read | CallType.Write,
    }
  }.Shuffle();

    hosts.AddRange(commonHosts);
    return hosts;
  }
}
