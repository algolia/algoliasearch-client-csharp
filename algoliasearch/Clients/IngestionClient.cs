//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Models.Ingestion;
using Algolia.Search.Transport;
using Algolia.Search.Http;
using Algolia.Search.Utils;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;

namespace Algolia.Search.Clients;


/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IIngestionClient
{
  /// <summary>
  /// Creates a new authentication resource.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of AuthenticationCreateResponse</returns>
  Task<AuthenticationCreateResponse> CreateAuthenticationAsync(AuthenticationCreate authenticationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new authentication resource. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>AuthenticationCreateResponse</returns>
  AuthenticationCreateResponse CreateAuthentication(AuthenticationCreate authenticationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new destination.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DestinationCreateResponse</returns>
  Task<DestinationCreateResponse> CreateDestinationAsync(DestinationCreate destinationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new destination. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DestinationCreateResponse</returns>
  DestinationCreateResponse CreateDestination(DestinationCreate destinationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new source.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of SourceCreateResponse</returns>
  Task<SourceCreateResponse> CreateSourceAsync(SourceCreate sourceCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new source. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>SourceCreateResponse</returns>
  SourceCreateResponse CreateSource(SourceCreate sourceCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new task.
  /// </summary>
  /// <param name="taskCreate">Request body for creating a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskCreateResponse</returns>
  Task<TaskCreateResponse> CreateTaskAsync(TaskCreate taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new task. (Synchronous version)
  /// </summary>
  /// <param name="taskCreate">Request body for creating a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskCreateResponse</returns>
  TaskCreateResponse CreateTask(TaskCreate taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new task using the v1 endpoint, please use `createTask` instead.
  /// </summary>
  /// <param name="taskCreate">Request body for creating a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskCreateResponse</returns>
  Task<TaskCreateResponse> CreateTaskV1Async(TaskCreateV1 taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new task using the v1 endpoint, please use `createTask` instead. (Synchronous version)
  /// </summary>
  /// <param name="taskCreate">Request body for creating a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskCreateResponse</returns>
  TaskCreateResponse CreateTaskV1(TaskCreateV1 taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new transformation.
  /// </summary>
  /// <param name="transformationCreate">Request body for creating a transformation.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TransformationCreateResponse</returns>
  Task<TransformationCreateResponse> CreateTransformationAsync(TransformationCreate transformationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Creates a new transformation. (Synchronous version)
  /// </summary>
  /// <param name="transformationCreate">Request body for creating a transformation.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TransformationCreateResponse</returns>
  TransformationCreateResponse CreateTransformation(TransformationCreate transformationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomDeleteAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API. (Synchronous version)
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>object</returns>
  object CustomDelete(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomGetAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API. (Synchronous version)
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>object</returns>
  object CustomGet(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomPostAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API. (Synchronous version)
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>object</returns>
  object CustomPost(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomPutAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API. (Synchronous version)
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>object</returns>
  object CustomPut(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes an authentication resource. You can't delete authentication resources that are used by a source or a destination.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">Unique identifier of an authentication resource.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes an authentication resource. You can't delete authentication resources that are used by a source or a destination. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">Unique identifier of an authentication resource.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DeleteResponse</returns>
  DeleteResponse DeleteAuthentication(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a destination by its ID. You can't delete destinations that are referenced in tasks.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">Unique identifier of a destination.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a destination by its ID. You can't delete destinations that are referenced in tasks. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">Unique identifier of a destination.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DeleteResponse</returns>
  DeleteResponse DeleteDestination(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a source by its ID. You can't delete sources that are referenced in tasks.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a source by its ID. You can't delete sources that are referenced in tasks. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DeleteResponse</returns>
  DeleteResponse DeleteSource(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a task by its ID.
  /// </summary>
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a task by its ID. (Synchronous version)
  /// </summary>
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DeleteResponse</returns>
  DeleteResponse DeleteTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a task by its ID using the v1 endpoint, please use `deleteTask` instead.
  /// </summary>
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a task by its ID using the v1 endpoint, please use `deleteTask` instead. (Synchronous version)
  /// </summary>
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DeleteResponse</returns>
  DeleteResponse DeleteTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a transformation by its ID.
  /// </summary>
  /// <param name="transformationID">Unique identifier of a transformation.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteTransformationAsync(string transformationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Deletes a transformation by its ID. (Synchronous version)
  /// </summary>
  /// <param name="transformationID">Unique identifier of a transformation.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DeleteResponse</returns>
  DeleteResponse DeleteTransformation(string transformationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Disables a task.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  Task<TaskUpdateResponse> DisableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Disables a task. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskUpdateResponse</returns>
  TaskUpdateResponse DisableTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Disables a task using the v1 endpoint, please use `disableTask` instead.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  [Obsolete]
  Task<TaskUpdateResponse> DisableTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Disables a task using the v1 endpoint, please use `disableTask` instead. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskUpdateResponse</returns>
  [Obsolete]
  TaskUpdateResponse DisableTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Enables a task.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  Task<TaskUpdateResponse> EnableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Enables a task. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskUpdateResponse</returns>
  TaskUpdateResponse EnableTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Enables a task using the v1 endpoint, please use `enableTask` instead.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  Task<TaskUpdateResponse> EnableTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Enables a task using the v1 endpoint, please use `enableTask` instead. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskUpdateResponse</returns>
  TaskUpdateResponse EnableTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves an authentication resource by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">Unique identifier of an authentication resource.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Authentication</returns>
  Task<Authentication> GetAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves an authentication resource by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">Unique identifier of an authentication resource.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Authentication</returns>
  Authentication GetAuthentication(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a destination by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">Unique identifier of a destination.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Destination</returns>
  Task<Destination> GetDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a destination by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">Unique identifier of a destination.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Destination</returns>
  Destination GetDestination(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a single task run event by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">Unique identifier of a task run.</param>
  /// <param name="eventID">Unique identifier of an event.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Event</returns>
  Task<Event> GetEventAsync(string runID, string eventID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a single task run event by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">Unique identifier of a task run.</param>
  /// <param name="eventID">Unique identifier of an event.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Event</returns>
  Event GetEvent(string runID, string eventID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieve a single task run by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">Unique identifier of a task run.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Run</returns>
  Task<Run> GetRunAsync(string runID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieve a single task run by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">Unique identifier of a task run.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Run</returns>
  Run GetRun(string runID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieve a source by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Source</returns>
  Task<Source> GetSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieve a source by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Source</returns>
  Source GetSource(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a task by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of IngestionTask</returns>
  Task<IngestionTask> GetTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a task by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>IngestionTask</returns>
  IngestionTask GetTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a task by its ID using the v1 endpoint, please use `getTask` instead.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskV1</returns>
  Task<TaskV1> GetTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a task by its ID using the v1 endpoint, please use `getTask` instead. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskV1</returns>
  TaskV1 GetTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a transformation by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="transformationID">Unique identifier of a transformation.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Transformation</returns>
  Task<Transformation> GetTransformationAsync(string transformationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a transformation by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="transformationID">Unique identifier of a transformation.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Transformation</returns>
  Transformation GetTransformation(string transformationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of all authentication resources.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="type">Type of authentication resource to retrieve. (optional)</param>
  /// <param name="platform">Ecommerce platform for which to retrieve authentications. (optional)</param>
  /// <param name="sort">Property by which to sort the list of authentications. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListAuthenticationsResponse</returns>
  Task<ListAuthenticationsResponse> ListAuthenticationsAsync(int? itemsPerPage = default, int? page = default, List<AuthenticationType> type = default, List<PlatformWithNone> platform = default, AuthenticationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of all authentication resources. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="type">Type of authentication resource to retrieve. (optional)</param>
  /// <param name="platform">Ecommerce platform for which to retrieve authentications. (optional)</param>
  /// <param name="sort">Property by which to sort the list of authentications. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>ListAuthenticationsResponse</returns>
  ListAuthenticationsResponse ListAuthentications(int? itemsPerPage = default, int? page = default, List<AuthenticationType> type = default, List<PlatformWithNone> platform = default, AuthenticationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of destinations.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="type">Destination type. (optional)</param>
  /// <param name="authenticationID">Authentication ID used by destinations. (optional)</param>
  /// <param name="transformationID">Get the list of destinations used by a transformation. (optional)</param>
  /// <param name="sort">Property by which to sort the destinations. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListDestinationsResponse</returns>
  Task<ListDestinationsResponse> ListDestinationsAsync(int? itemsPerPage = default, int? page = default, List<DestinationType> type = default, List<string> authenticationID = default, string transformationID = default, DestinationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of destinations. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="type">Destination type. (optional)</param>
  /// <param name="authenticationID">Authentication ID used by destinations. (optional)</param>
  /// <param name="transformationID">Get the list of destinations used by a transformation. (optional)</param>
  /// <param name="sort">Property by which to sort the destinations. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>ListDestinationsResponse</returns>
  ListDestinationsResponse ListDestinations(int? itemsPerPage = default, int? page = default, List<DestinationType> type = default, List<string> authenticationID = default, string transformationID = default, DestinationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of events for a task run, identified by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">Unique identifier of a task run.</param>
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="status">Event status for filtering the list of task runs. (optional)</param>
  /// <param name="type">Event type for filtering the list of task runs. (optional)</param>
  /// <param name="sort">Property by which to sort the list of task run events. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="startDate">Date and time in RFC 3339 format for the earliest events to retrieve. By default, the current time minus three hours is used. (optional)</param>
  /// <param name="endDate">Date and time in RFC 3339 format for the latest events to retrieve. By default, the current time is used. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListEventsResponse</returns>
  Task<ListEventsResponse> ListEventsAsync(string runID, int? itemsPerPage = default, int? page = default, List<EventStatus> status = default, List<EventType> type = default, EventSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of events for a task run, identified by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">Unique identifier of a task run.</param>
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="status">Event status for filtering the list of task runs. (optional)</param>
  /// <param name="type">Event type for filtering the list of task runs. (optional)</param>
  /// <param name="sort">Property by which to sort the list of task run events. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="startDate">Date and time in RFC 3339 format for the earliest events to retrieve. By default, the current time minus three hours is used. (optional)</param>
  /// <param name="endDate">Date and time in RFC 3339 format for the latest events to retrieve. By default, the current time is used. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>ListEventsResponse</returns>
  ListEventsResponse ListEvents(string runID, int? itemsPerPage = default, int? page = default, List<EventStatus> status = default, List<EventType> type = default, EventSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieve a list of task runs.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="status">Run status for filtering the list of task runs. (optional)</param>
  /// <param name="type">Run type for filtering the list of task runs. (optional)</param>
  /// <param name="taskID">Task ID for filtering the list of task runs. (optional)</param>
  /// <param name="sort">Property by which to sort the list of task runs. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="startDate">Date in RFC 3339 format for the earliest run to retrieve. By default, the current day minus seven days is used. (optional)</param>
  /// <param name="endDate">Date in RFC 3339 format for the latest run to retrieve. By default, the current day is used. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of RunListResponse</returns>
  Task<RunListResponse> ListRunsAsync(int? itemsPerPage = default, int? page = default, List<RunStatus> status = default, List<RunType> type = default, string taskID = default, RunSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieve a list of task runs. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="status">Run status for filtering the list of task runs. (optional)</param>
  /// <param name="type">Run type for filtering the list of task runs. (optional)</param>
  /// <param name="taskID">Task ID for filtering the list of task runs. (optional)</param>
  /// <param name="sort">Property by which to sort the list of task runs. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="startDate">Date in RFC 3339 format for the earliest run to retrieve. By default, the current day minus seven days is used. (optional)</param>
  /// <param name="endDate">Date in RFC 3339 format for the latest run to retrieve. By default, the current day is used. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>RunListResponse</returns>
  RunListResponse ListRuns(int? itemsPerPage = default, int? page = default, List<RunStatus> status = default, List<RunType> type = default, string taskID = default, RunSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of sources.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="type">Source type. Some sources require authentication. (optional)</param>
  /// <param name="authenticationID">Authentication IDs of the sources to retrieve. 'none' returns sources that doesn't have an authentication.  (optional)</param>
  /// <param name="sort">Property by which to sort the list of sources. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListSourcesResponse</returns>
  Task<ListSourcesResponse> ListSourcesAsync(int? itemsPerPage = default, int? page = default, List<SourceType> type = default, List<string> authenticationID = default, SourceSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of sources. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="type">Source type. Some sources require authentication. (optional)</param>
  /// <param name="authenticationID">Authentication IDs of the sources to retrieve. 'none' returns sources that doesn't have an authentication.  (optional)</param>
  /// <param name="sort">Property by which to sort the list of sources. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>ListSourcesResponse</returns>
  ListSourcesResponse ListSources(int? itemsPerPage = default, int? page = default, List<SourceType> type = default, List<string> authenticationID = default, SourceSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of tasks.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="action">Actions for filtering the list of tasks. (optional)</param>
  /// <param name="enabled">Whether to filter the list of tasks by the `enabled` status. (optional)</param>
  /// <param name="sourceID">Source IDs for filtering the list of tasks. (optional)</param>
  /// <param name="sourceType">Filters the tasks with the specified source type. (optional)</param>
  /// <param name="destinationID">Destination IDs for filtering the list of tasks. (optional)</param>
  /// <param name="triggerType">Type of task trigger for filtering the list of tasks. (optional)</param>
  /// <param name="withEmailNotifications">If specified, the response only includes tasks with notifications.email.enabled set to this value. (optional)</param>
  /// <param name="sort">Property by which to sort the list of tasks. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListTasksResponse</returns>
  Task<ListTasksResponse> ListTasksAsync(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<SourceType> sourceType = default, List<string> destinationID = default, List<TriggerType> triggerType = default, bool? withEmailNotifications = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of tasks. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="action">Actions for filtering the list of tasks. (optional)</param>
  /// <param name="enabled">Whether to filter the list of tasks by the `enabled` status. (optional)</param>
  /// <param name="sourceID">Source IDs for filtering the list of tasks. (optional)</param>
  /// <param name="sourceType">Filters the tasks with the specified source type. (optional)</param>
  /// <param name="destinationID">Destination IDs for filtering the list of tasks. (optional)</param>
  /// <param name="triggerType">Type of task trigger for filtering the list of tasks. (optional)</param>
  /// <param name="withEmailNotifications">If specified, the response only includes tasks with notifications.email.enabled set to this value. (optional)</param>
  /// <param name="sort">Property by which to sort the list of tasks. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>ListTasksResponse</returns>
  ListTasksResponse ListTasks(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<SourceType> sourceType = default, List<string> destinationID = default, List<TriggerType> triggerType = default, bool? withEmailNotifications = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of tasks using the v1 endpoint, please use `getTasks` instead.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="action">Actions for filtering the list of tasks. (optional)</param>
  /// <param name="enabled">Whether to filter the list of tasks by the `enabled` status. (optional)</param>
  /// <param name="sourceID">Source IDs for filtering the list of tasks. (optional)</param>
  /// <param name="destinationID">Destination IDs for filtering the list of tasks. (optional)</param>
  /// <param name="triggerType">Type of task trigger for filtering the list of tasks. (optional)</param>
  /// <param name="sort">Property by which to sort the list of tasks. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListTasksResponseV1</returns>
  Task<ListTasksResponseV1> ListTasksV1Async(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<string> destinationID = default, List<TriggerType> triggerType = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of tasks using the v1 endpoint, please use `getTasks` instead. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="action">Actions for filtering the list of tasks. (optional)</param>
  /// <param name="enabled">Whether to filter the list of tasks by the `enabled` status. (optional)</param>
  /// <param name="sourceID">Source IDs for filtering the list of tasks. (optional)</param>
  /// <param name="destinationID">Destination IDs for filtering the list of tasks. (optional)</param>
  /// <param name="triggerType">Type of task trigger for filtering the list of tasks. (optional)</param>
  /// <param name="sort">Property by which to sort the list of tasks. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>ListTasksResponseV1</returns>
  ListTasksResponseV1 ListTasksV1(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<string> destinationID = default, List<TriggerType> triggerType = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of transformations.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="sort">Property by which to sort the list of transformations. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListTransformationsResponse</returns>
  Task<ListTransformationsResponse> ListTransformationsAsync(int? itemsPerPage = default, int? page = default, TransformationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieves a list of transformations. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">Number of items per page. (optional, default to 10)</param>
  /// <param name="page">Page number of the paginated API response. (optional)</param>
  /// <param name="sort">Property by which to sort the list of transformations. (optional)</param>
  /// <param name="order">Sort order of the response, ascending or descending. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>ListTransformationsResponse</returns>
  ListTransformationsResponse ListTransformations(int? itemsPerPage = default, int? page = default, TransformationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Push a `batch` request payload through the Pipeline. You can check the status of task pushes with the observability endpoints.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="pushTaskPayload">Request body of a Search API `batch` request that will be pushed in the Connectors pipeline.</param>
  /// <param name="watch">When provided, the push operation will be synchronous and the API will wait for the ingestion to be finished before responding. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of WatchResponse</returns>
  Task<WatchResponse> PushTaskAsync(string taskID, PushTaskPayload pushTaskPayload, bool? watch = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Push a `batch` request payload through the Pipeline. You can check the status of task pushes with the observability endpoints. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="pushTaskPayload">Request body of a Search API `batch` request that will be pushed in the Connectors pipeline.</param>
  /// <param name="watch">When provided, the push operation will be synchronous and the API will wait for the ingestion to be finished before responding. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>WatchResponse</returns>
  WatchResponse PushTask(string taskID, PushTaskPayload pushTaskPayload, bool? watch = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Runs all tasks linked to a source, only available for Shopify sources. It will create 1 run per task.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="runSourcePayload"> (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of RunSourceResponse</returns>
  Task<RunSourceResponse> RunSourceAsync(string sourceID, RunSourcePayload runSourcePayload = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Runs all tasks linked to a source, only available for Shopify sources. It will create 1 run per task. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="runSourcePayload"> (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>RunSourceResponse</returns>
  RunSourceResponse RunSource(string sourceID, RunSourcePayload runSourcePayload = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Runs a task. You can check the status of task runs with the observability endpoints.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of RunResponse</returns>
  Task<RunResponse> RunTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Runs a task. You can check the status of task runs with the observability endpoints. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>RunResponse</returns>
  RunResponse RunTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Runs a task using the v1 endpoint, please use `runTask` instead. You can check the status of task runs with the observability endpoints.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of RunResponse</returns>
  Task<RunResponse> RunTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Runs a task using the v1 endpoint, please use `runTask` instead. You can check the status of task runs with the observability endpoints. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>RunResponse</returns>
  RunResponse RunTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for authentication resources.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Authentication}</returns>
  Task<List<Authentication>> SearchAuthenticationsAsync(AuthenticationSearch authenticationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for authentication resources. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>List{Authentication}</returns>
  List<Authentication> SearchAuthentications(AuthenticationSearch authenticationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for destinations.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Destination}</returns>
  Task<List<Destination>> SearchDestinationsAsync(DestinationSearch destinationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for destinations. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>List{Destination}</returns>
  List<Destination> SearchDestinations(DestinationSearch destinationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for sources.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Source}</returns>
  Task<List<Source>> SearchSourcesAsync(SourceSearch sourceSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for sources. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>List{Source}</returns>
  List<Source> SearchSources(SourceSearch sourceSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for tasks.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{IngestionTask}</returns>
  Task<List<IngestionTask>> SearchTasksAsync(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for tasks. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>List{IngestionTask}</returns>
  List<IngestionTask> SearchTasks(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for tasks using the v1 endpoint, please use `searchTasks` instead.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{TaskV1}</returns>
  Task<List<TaskV1>> SearchTasksV1Async(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for tasks using the v1 endpoint, please use `searchTasks` instead. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>List{TaskV1}</returns>
  List<TaskV1> SearchTasksV1(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for transformations.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="transformationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Transformation}</returns>
  Task<List<Transformation>> SearchTransformationsAsync(TransformationSearch transformationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Searches for transformations. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="transformationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>List{Transformation}</returns>
  List<Transformation> SearchTransformations(TransformationSearch transformationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Triggers a stream-listing request for a source. Triggering stream-listing requests only works with sources with `type: docker` and `imageType: airbyte`. 
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of WatchResponse</returns>
  Task<WatchResponse> TriggerDockerSourceDiscoverAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Triggers a stream-listing request for a source. Triggering stream-listing requests only works with sources with `type: docker` and `imageType: airbyte`.  (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>WatchResponse</returns>
  WatchResponse TriggerDockerSourceDiscover(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Try a transformation before creating it.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="transformationTry"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TransformationTryResponse</returns>
  Task<TransformationTryResponse> TryTransformationAsync(TransformationTry transformationTry, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Try a transformation before creating it. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="transformationTry"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TransformationTryResponse</returns>
  TransformationTryResponse TryTransformation(TransformationTry transformationTry, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Try a transformation before updating it.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="transformationID">Unique identifier of a transformation.</param>
  /// <param name="transformationTry"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TransformationTryResponse</returns>
  Task<TransformationTryResponse> TryTransformationBeforeUpdateAsync(string transformationID, TransformationTry transformationTry, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Try a transformation before updating it. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="transformationID">Unique identifier of a transformation.</param>
  /// <param name="transformationTry"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TransformationTryResponse</returns>
  TransformationTryResponse TryTransformationBeforeUpdate(string transformationID, TransformationTry transformationTry, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates an authentication resource.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">Unique identifier of an authentication resource.</param>
  /// <param name="authenticationUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of AuthenticationUpdateResponse</returns>
  Task<AuthenticationUpdateResponse> UpdateAuthenticationAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates an authentication resource. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">Unique identifier of an authentication resource.</param>
  /// <param name="authenticationUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>AuthenticationUpdateResponse</returns>
  AuthenticationUpdateResponse UpdateAuthentication(string authenticationID, AuthenticationUpdate authenticationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates the destination by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">Unique identifier of a destination.</param>
  /// <param name="destinationUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DestinationUpdateResponse</returns>
  Task<DestinationUpdateResponse> UpdateDestinationAsync(string destinationID, DestinationUpdate destinationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates the destination by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">Unique identifier of a destination.</param>
  /// <param name="destinationUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>DestinationUpdateResponse</returns>
  DestinationUpdateResponse UpdateDestination(string destinationID, DestinationUpdate destinationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates a source by its ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="sourceUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of SourceUpdateResponse</returns>
  Task<SourceUpdateResponse> UpdateSourceAsync(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates a source by its ID. (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="sourceUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>SourceUpdateResponse</returns>
  SourceUpdateResponse UpdateSource(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates a task by its ID.
  /// </summary>
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="taskUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  Task<TaskUpdateResponse> UpdateTaskAsync(string taskID, TaskUpdate taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates a task by its ID. (Synchronous version)
  /// </summary>
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="taskUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskUpdateResponse</returns>
  TaskUpdateResponse UpdateTask(string taskID, TaskUpdate taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates a task by its ID using the v1 endpoint, please use `updateTask` instead.
  /// </summary>
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="taskUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  Task<TaskUpdateResponse> UpdateTaskV1Async(string taskID, TaskUpdateV1 taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates a task by its ID using the v1 endpoint, please use `updateTask` instead. (Synchronous version)
  /// </summary>
  /// <param name="taskID">Unique identifier of a task.</param>
  /// <param name="taskUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TaskUpdateResponse</returns>
  TaskUpdateResponse UpdateTaskV1(string taskID, TaskUpdateV1 taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates a transformation by its ID.
  /// </summary>
  /// <param name="transformationID">Unique identifier of a transformation.</param>
  /// <param name="transformationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TransformationUpdateResponse</returns>
  Task<TransformationUpdateResponse> UpdateTransformationAsync(string transformationID, TransformationCreate transformationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Updates a transformation by its ID. (Synchronous version)
  /// </summary>
  /// <param name="transformationID">Unique identifier of a transformation.</param>
  /// <param name="transformationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>TransformationUpdateResponse</returns>
  TransformationUpdateResponse UpdateTransformation(string transformationID, TransformationCreate transformationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Validates a source payload to ensure it can be created and that the data source can be reached by Algolia. 
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceCreate"> (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of WatchResponse</returns>
  Task<WatchResponse> ValidateSourceAsync(SourceCreate sourceCreate = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Validates a source payload to ensure it can be created and that the data source can be reached by Algolia.  (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceCreate"> (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>WatchResponse</returns>
  WatchResponse ValidateSource(SourceCreate sourceCreate = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Validates an update of a source payload to ensure it can be created and that the data source can be reached by Algolia. 
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="sourceUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of WatchResponse</returns>
  Task<WatchResponse> ValidateSourceBeforeUpdateAsync(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Validates an update of a source payload to ensure it can be created and that the data source can be reached by Algolia.  (Synchronous version)
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">Unique identifier of a source.</param>
  /// <param name="sourceUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>WatchResponse</returns>
  WatchResponse ValidateSourceBeforeUpdate(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

}



/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class IngestionClient : IIngestionClient
{
  internal HttpTransport _transport;
  private readonly ILogger<IngestionClient> _logger;

  /// <summary>
  /// Create a new Ingestion client for the given appID and apiKey.
  /// </summary>
  /// <param name="applicationId">Your application</param>
  /// <param name="apiKey">Your API key</param>
  /// <param name="loggerFactory">Logger factory</param>
  /// <param name="region">The targeted region</param>
  public IngestionClient(string applicationId, string apiKey, string region, ILoggerFactory loggerFactory = null) : this(new IngestionConfig(applicationId, apiKey, region), new AlgoliaHttpRequester(loggerFactory), loggerFactory)
  {
  }

  /// <summary>
  /// Initialize a client with custom config
  /// </summary>
  /// <param name="config">Algolia configuration</param>
  /// <param name="loggerFactory">Logger factory</param>
  public IngestionClient(IngestionConfig config, ILoggerFactory loggerFactory = null) : this(config, new AlgoliaHttpRequester(loggerFactory), loggerFactory)
  {
  }

  /// <summary>
  /// Initialize the client with custom config and custom Requester
  /// </summary>
  /// <param name="config">Algolia Config</param>
  /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
  /// <param name="loggerFactory">Logger factory</param>
  public IngestionClient(IngestionConfig config, IHttpRequester httpRequester, ILoggerFactory loggerFactory = null)
  {
    if (httpRequester == null)
    {
      throw new ArgumentException("An httpRequester is required");
    }
    if (config == null)
    {
      throw new ArgumentException("A config is required");
    }
    if (string.IsNullOrWhiteSpace(config.AppId))
    {
      throw new ArgumentException("`AppId` is missing.");
    }
    if (string.IsNullOrWhiteSpace(config.ApiKey))
    {
      throw new ArgumentException("`ApiKey` is missing.");
    }

    var factory = loggerFactory ?? NullLoggerFactory.Instance;
    _transport = new HttpTransport(config, httpRequester, factory);
    _logger = factory.CreateLogger<IngestionClient>();

    if (_logger.IsEnabled(Microsoft.Extensions.Logging.LogLevel.Information))
    {
      _logger.LogInformation("Algolia Ingestion client is initialized.");
    }
  }

  /// <summary>
  /// Helper to switch the API key sent with each request
  /// </summary>
  /// <param name="apiKey">Your new API Key</param>
  /// <returns></returns>
  public void SetClientApiKey(string apiKey)
  {
    _transport._algoliaConfig.SetClientApiKey(apiKey);
  }



  /// <inheritdoc />
  public async Task<AuthenticationCreateResponse> CreateAuthenticationAsync(AuthenticationCreate authenticationCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationCreate == null)
      throw new ArgumentException("Parameter `authenticationCreate` is required when calling `CreateAuthentication`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = authenticationCreate;
    return await _transport.ExecuteRequestAsync<AuthenticationCreateResponse>(new HttpMethod("POST"), "/1/authentications", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public AuthenticationCreateResponse CreateAuthentication(AuthenticationCreate authenticationCreate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CreateAuthenticationAsync(authenticationCreate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DestinationCreateResponse> CreateDestinationAsync(DestinationCreate destinationCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationCreate == null)
      throw new ArgumentException("Parameter `destinationCreate` is required when calling `CreateDestination`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = destinationCreate;
    return await _transport.ExecuteRequestAsync<DestinationCreateResponse>(new HttpMethod("POST"), "/1/destinations", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DestinationCreateResponse CreateDestination(DestinationCreate destinationCreate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CreateDestinationAsync(destinationCreate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<SourceCreateResponse> CreateSourceAsync(SourceCreate sourceCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceCreate == null)
      throw new ArgumentException("Parameter `sourceCreate` is required when calling `CreateSource`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = sourceCreate;
    return await _transport.ExecuteRequestAsync<SourceCreateResponse>(new HttpMethod("POST"), "/1/sources", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public SourceCreateResponse CreateSource(SourceCreate sourceCreate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CreateSourceAsync(sourceCreate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TaskCreateResponse> CreateTaskAsync(TaskCreate taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskCreate == null)
      throw new ArgumentException("Parameter `taskCreate` is required when calling `CreateTask`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = taskCreate;
    return await _transport.ExecuteRequestAsync<TaskCreateResponse>(new HttpMethod("POST"), "/2/tasks", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TaskCreateResponse CreateTask(TaskCreate taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CreateTaskAsync(taskCreate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TaskCreateResponse> CreateTaskV1Async(TaskCreateV1 taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskCreate == null)
      throw new ArgumentException("Parameter `taskCreate` is required when calling `CreateTaskV1`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = taskCreate;
    return await _transport.ExecuteRequestAsync<TaskCreateResponse>(new HttpMethod("POST"), "/1/tasks", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TaskCreateResponse CreateTaskV1(TaskCreateV1 taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CreateTaskV1Async(taskCreate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TransformationCreateResponse> CreateTransformationAsync(TransformationCreate transformationCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (transformationCreate == null)
      throw new ArgumentException("Parameter `transformationCreate` is required when calling `CreateTransformation`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = transformationCreate;
    return await _transport.ExecuteRequestAsync<TransformationCreateResponse>(new HttpMethod("POST"), "/1/transformations", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TransformationCreateResponse CreateTransformation(TransformationCreate transformationCreate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CreateTransformationAsync(transformationCreate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<object> CustomDeleteAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomDelete`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", QueryStringHelper.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("DELETE"), "/{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public object CustomDelete(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CustomDeleteAsync(path, parameters, options, cancellationToken));


  /// <inheritdoc />
  public async Task<object> CustomGetAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomGet`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", QueryStringHelper.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("GET"), "/{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public object CustomGet(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CustomGetAsync(path, parameters, options, cancellationToken));


  /// <inheritdoc />
  public async Task<object> CustomPostAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomPost`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", QueryStringHelper.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    requestOptions.Data = body;
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("POST"), "/{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public object CustomPost(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CustomPostAsync(path, parameters, body, options, cancellationToken));


  /// <inheritdoc />
  public async Task<object> CustomPutAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomPut`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", QueryStringHelper.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    requestOptions.Data = body;
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("PUT"), "/{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public object CustomPut(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => CustomPutAsync(path, parameters, body, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DeleteResponse> DeleteAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationID == null)
      throw new ArgumentException("Parameter `authenticationID` is required when calling `DeleteAuthentication`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("authenticationID", QueryStringHelper.ParameterToString(authenticationID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DeleteResponse DeleteAuthentication(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DeleteAuthenticationAsync(authenticationID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DeleteResponse> DeleteDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationID == null)
      throw new ArgumentException("Parameter `destinationID` is required when calling `DeleteDestination`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("destinationID", QueryStringHelper.ParameterToString(destinationID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DeleteResponse DeleteDestination(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DeleteDestinationAsync(destinationID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DeleteResponse> DeleteSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `DeleteSource`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", QueryStringHelper.ParameterToString(sourceID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DeleteResponse DeleteSource(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DeleteSourceAsync(sourceID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DeleteResponse> DeleteTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `DeleteTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/2/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DeleteResponse DeleteTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DeleteTaskAsync(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DeleteResponse> DeleteTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `DeleteTaskV1`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DeleteResponse DeleteTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DeleteTaskV1Async(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DeleteResponse> DeleteTransformationAsync(string transformationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (transformationID == null)
      throw new ArgumentException("Parameter `transformationID` is required when calling `DeleteTransformation`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("transformationID", QueryStringHelper.ParameterToString(transformationID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/transformations/{transformationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DeleteResponse DeleteTransformation(string transformationID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DeleteTransformationAsync(transformationID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TaskUpdateResponse> DisableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `DisableTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PUT"), "/2/tasks/{taskID}/disable", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TaskUpdateResponse DisableTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DisableTaskAsync(taskID, options, cancellationToken));


  /// <inheritdoc />
  [Obsolete]
  public async Task<TaskUpdateResponse> DisableTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `DisableTaskV1`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PUT"), "/1/tasks/{taskID}/disable", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  [Obsolete]
  public TaskUpdateResponse DisableTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => DisableTaskV1Async(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TaskUpdateResponse> EnableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `EnableTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PUT"), "/2/tasks/{taskID}/enable", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TaskUpdateResponse EnableTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => EnableTaskAsync(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TaskUpdateResponse> EnableTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `EnableTaskV1`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PUT"), "/1/tasks/{taskID}/enable", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TaskUpdateResponse EnableTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => EnableTaskV1Async(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<Authentication> GetAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationID == null)
      throw new ArgumentException("Parameter `authenticationID` is required when calling `GetAuthentication`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("authenticationID", QueryStringHelper.ParameterToString(authenticationID));

    return await _transport.ExecuteRequestAsync<Authentication>(new HttpMethod("GET"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public Authentication GetAuthentication(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetAuthenticationAsync(authenticationID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<Destination> GetDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationID == null)
      throw new ArgumentException("Parameter `destinationID` is required when calling `GetDestination`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("destinationID", QueryStringHelper.ParameterToString(destinationID));

    return await _transport.ExecuteRequestAsync<Destination>(new HttpMethod("GET"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public Destination GetDestination(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetDestinationAsync(destinationID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<Event> GetEventAsync(string runID, string eventID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (runID == null)
      throw new ArgumentException("Parameter `runID` is required when calling `GetEvent`.");


    if (eventID == null)
      throw new ArgumentException("Parameter `eventID` is required when calling `GetEvent`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("runID", QueryStringHelper.ParameterToString(runID));
    requestOptions.PathParameters.Add("eventID", QueryStringHelper.ParameterToString(eventID));

    return await _transport.ExecuteRequestAsync<Event>(new HttpMethod("GET"), "/1/runs/{runID}/events/{eventID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public Event GetEvent(string runID, string eventID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetEventAsync(runID, eventID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<Run> GetRunAsync(string runID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (runID == null)
      throw new ArgumentException("Parameter `runID` is required when calling `GetRun`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("runID", QueryStringHelper.ParameterToString(runID));

    return await _transport.ExecuteRequestAsync<Run>(new HttpMethod("GET"), "/1/runs/{runID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public Run GetRun(string runID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetRunAsync(runID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<Source> GetSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `GetSource`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", QueryStringHelper.ParameterToString(sourceID));

    return await _transport.ExecuteRequestAsync<Source>(new HttpMethod("GET"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public Source GetSource(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetSourceAsync(sourceID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<IngestionTask> GetTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `GetTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<IngestionTask>(new HttpMethod("GET"), "/2/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public IngestionTask GetTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetTaskAsync(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TaskV1> GetTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `GetTaskV1`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<TaskV1>(new HttpMethod("GET"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TaskV1 GetTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetTaskV1Async(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<Transformation> GetTransformationAsync(string transformationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (transformationID == null)
      throw new ArgumentException("Parameter `transformationID` is required when calling `GetTransformation`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("transformationID", QueryStringHelper.ParameterToString(transformationID));

    return await _transport.ExecuteRequestAsync<Transformation>(new HttpMethod("GET"), "/1/transformations/{transformationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public Transformation GetTransformation(string transformationID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => GetTransformationAsync(transformationID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<ListAuthenticationsResponse> ListAuthenticationsAsync(int? itemsPerPage = default, int? page = default, List<AuthenticationType> type = default, List<PlatformWithNone> platform = default, AuthenticationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("platform", platform);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListAuthenticationsResponse>(new HttpMethod("GET"), "/1/authentications", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public ListAuthenticationsResponse ListAuthentications(int? itemsPerPage = default, int? page = default, List<AuthenticationType> type = default, List<PlatformWithNone> platform = default, AuthenticationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ListAuthenticationsAsync(itemsPerPage, page, type, platform, sort, order, options, cancellationToken));


  /// <inheritdoc />
  public async Task<ListDestinationsResponse> ListDestinationsAsync(int? itemsPerPage = default, int? page = default, List<DestinationType> type = default, List<string> authenticationID = default, string transformationID = default, DestinationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("authenticationID", authenticationID);
    requestOptions.AddQueryParameter("transformationID", transformationID);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListDestinationsResponse>(new HttpMethod("GET"), "/1/destinations", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public ListDestinationsResponse ListDestinations(int? itemsPerPage = default, int? page = default, List<DestinationType> type = default, List<string> authenticationID = default, string transformationID = default, DestinationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ListDestinationsAsync(itemsPerPage, page, type, authenticationID, transformationID, sort, order, options, cancellationToken));


  /// <inheritdoc />
  public async Task<ListEventsResponse> ListEventsAsync(string runID, int? itemsPerPage = default, int? page = default, List<EventStatus> status = default, List<EventType> type = default, EventSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (runID == null)
      throw new ArgumentException("Parameter `runID` is required when calling `ListEvents`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("runID", QueryStringHelper.ParameterToString(runID));

    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("status", status);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    requestOptions.AddQueryParameter("startDate", startDate);
    requestOptions.AddQueryParameter("endDate", endDate);
    return await _transport.ExecuteRequestAsync<ListEventsResponse>(new HttpMethod("GET"), "/1/runs/{runID}/events", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public ListEventsResponse ListEvents(string runID, int? itemsPerPage = default, int? page = default, List<EventStatus> status = default, List<EventType> type = default, EventSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ListEventsAsync(runID, itemsPerPage, page, status, type, sort, order, startDate, endDate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<RunListResponse> ListRunsAsync(int? itemsPerPage = default, int? page = default, List<RunStatus> status = default, List<RunType> type = default, string taskID = default, RunSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("status", status);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("taskID", taskID);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    requestOptions.AddQueryParameter("startDate", startDate);
    requestOptions.AddQueryParameter("endDate", endDate);
    return await _transport.ExecuteRequestAsync<RunListResponse>(new HttpMethod("GET"), "/1/runs", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public RunListResponse ListRuns(int? itemsPerPage = default, int? page = default, List<RunStatus> status = default, List<RunType> type = default, string taskID = default, RunSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ListRunsAsync(itemsPerPage, page, status, type, taskID, sort, order, startDate, endDate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<ListSourcesResponse> ListSourcesAsync(int? itemsPerPage = default, int? page = default, List<SourceType> type = default, List<string> authenticationID = default, SourceSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("authenticationID", authenticationID);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListSourcesResponse>(new HttpMethod("GET"), "/1/sources", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public ListSourcesResponse ListSources(int? itemsPerPage = default, int? page = default, List<SourceType> type = default, List<string> authenticationID = default, SourceSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ListSourcesAsync(itemsPerPage, page, type, authenticationID, sort, order, options, cancellationToken));


  /// <inheritdoc />
  public async Task<ListTasksResponse> ListTasksAsync(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<SourceType> sourceType = default, List<string> destinationID = default, List<TriggerType> triggerType = default, bool? withEmailNotifications = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("action", action);
    requestOptions.AddQueryParameter("enabled", enabled);
    requestOptions.AddQueryParameter("sourceID", sourceID);
    requestOptions.AddQueryParameter("sourceType", sourceType);
    requestOptions.AddQueryParameter("destinationID", destinationID);
    requestOptions.AddQueryParameter("triggerType", triggerType);
    requestOptions.AddQueryParameter("withEmailNotifications", withEmailNotifications);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListTasksResponse>(new HttpMethod("GET"), "/2/tasks", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public ListTasksResponse ListTasks(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<SourceType> sourceType = default, List<string> destinationID = default, List<TriggerType> triggerType = default, bool? withEmailNotifications = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ListTasksAsync(itemsPerPage, page, action, enabled, sourceID, sourceType, destinationID, triggerType, withEmailNotifications, sort, order, options, cancellationToken));


  /// <inheritdoc />
  public async Task<ListTasksResponseV1> ListTasksV1Async(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<string> destinationID = default, List<TriggerType> triggerType = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("action", action);
    requestOptions.AddQueryParameter("enabled", enabled);
    requestOptions.AddQueryParameter("sourceID", sourceID);
    requestOptions.AddQueryParameter("destinationID", destinationID);
    requestOptions.AddQueryParameter("triggerType", triggerType);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListTasksResponseV1>(new HttpMethod("GET"), "/1/tasks", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public ListTasksResponseV1 ListTasksV1(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<string> destinationID = default, List<TriggerType> triggerType = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ListTasksV1Async(itemsPerPage, page, action, enabled, sourceID, destinationID, triggerType, sort, order, options, cancellationToken));


  /// <inheritdoc />
  public async Task<ListTransformationsResponse> ListTransformationsAsync(int? itemsPerPage = default, int? page = default, TransformationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListTransformationsResponse>(new HttpMethod("GET"), "/1/transformations", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public ListTransformationsResponse ListTransformations(int? itemsPerPage = default, int? page = default, TransformationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ListTransformationsAsync(itemsPerPage, page, sort, order, options, cancellationToken));


  /// <inheritdoc />
  public async Task<WatchResponse> PushTaskAsync(string taskID, PushTaskPayload pushTaskPayload, bool? watch = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `PushTask`.");


    if (pushTaskPayload == null)
      throw new ArgumentException("Parameter `pushTaskPayload` is required when calling `PushTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    requestOptions.AddQueryParameter("watch", watch);
    requestOptions.Data = pushTaskPayload;
    requestOptions.ReadTimeout ??= TimeSpan.FromMilliseconds(180000);
    requestOptions.WriteTimeout ??= TimeSpan.FromMilliseconds(180000);
    requestOptions.ConnectTimeout ??= TimeSpan.FromMilliseconds(180000);
    return await _transport.ExecuteRequestAsync<WatchResponse>(new HttpMethod("POST"), "/2/tasks/{taskID}/push", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public WatchResponse PushTask(string taskID, PushTaskPayload pushTaskPayload, bool? watch = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => PushTaskAsync(taskID, pushTaskPayload, watch, options, cancellationToken));


  /// <inheritdoc />
  public async Task<RunSourceResponse> RunSourceAsync(string sourceID, RunSourcePayload runSourcePayload = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `RunSource`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", QueryStringHelper.ParameterToString(sourceID));

    requestOptions.Data = runSourcePayload;
    return await _transport.ExecuteRequestAsync<RunSourceResponse>(new HttpMethod("POST"), "/1/sources/{sourceID}/run", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public RunSourceResponse RunSource(string sourceID, RunSourcePayload runSourcePayload = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => RunSourceAsync(sourceID, runSourcePayload, options, cancellationToken));


  /// <inheritdoc />
  public async Task<RunResponse> RunTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `RunTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<RunResponse>(new HttpMethod("POST"), "/2/tasks/{taskID}/run", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public RunResponse RunTask(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => RunTaskAsync(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<RunResponse> RunTaskV1Async(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `RunTaskV1`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<RunResponse>(new HttpMethod("POST"), "/1/tasks/{taskID}/run", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public RunResponse RunTaskV1(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => RunTaskV1Async(taskID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<List<Authentication>> SearchAuthenticationsAsync(AuthenticationSearch authenticationSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationSearch == null)
      throw new ArgumentException("Parameter `authenticationSearch` is required when calling `SearchAuthentications`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = authenticationSearch;
    return await _transport.ExecuteRequestAsync<List<Authentication>>(new HttpMethod("POST"), "/1/authentications/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public List<Authentication> SearchAuthentications(AuthenticationSearch authenticationSearch, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => SearchAuthenticationsAsync(authenticationSearch, options, cancellationToken));


  /// <inheritdoc />
  public async Task<List<Destination>> SearchDestinationsAsync(DestinationSearch destinationSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationSearch == null)
      throw new ArgumentException("Parameter `destinationSearch` is required when calling `SearchDestinations`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = destinationSearch;
    return await _transport.ExecuteRequestAsync<List<Destination>>(new HttpMethod("POST"), "/1/destinations/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public List<Destination> SearchDestinations(DestinationSearch destinationSearch, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => SearchDestinationsAsync(destinationSearch, options, cancellationToken));


  /// <inheritdoc />
  public async Task<List<Source>> SearchSourcesAsync(SourceSearch sourceSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceSearch == null)
      throw new ArgumentException("Parameter `sourceSearch` is required when calling `SearchSources`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = sourceSearch;
    return await _transport.ExecuteRequestAsync<List<Source>>(new HttpMethod("POST"), "/1/sources/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public List<Source> SearchSources(SourceSearch sourceSearch, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => SearchSourcesAsync(sourceSearch, options, cancellationToken));


  /// <inheritdoc />
  public async Task<List<IngestionTask>> SearchTasksAsync(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskSearch == null)
      throw new ArgumentException("Parameter `taskSearch` is required when calling `SearchTasks`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = taskSearch;
    return await _transport.ExecuteRequestAsync<List<IngestionTask>>(new HttpMethod("POST"), "/2/tasks/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public List<IngestionTask> SearchTasks(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => SearchTasksAsync(taskSearch, options, cancellationToken));


  /// <inheritdoc />
  public async Task<List<TaskV1>> SearchTasksV1Async(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskSearch == null)
      throw new ArgumentException("Parameter `taskSearch` is required when calling `SearchTasksV1`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = taskSearch;
    return await _transport.ExecuteRequestAsync<List<TaskV1>>(new HttpMethod("POST"), "/1/tasks/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public List<TaskV1> SearchTasksV1(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => SearchTasksV1Async(taskSearch, options, cancellationToken));


  /// <inheritdoc />
  public async Task<List<Transformation>> SearchTransformationsAsync(TransformationSearch transformationSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (transformationSearch == null)
      throw new ArgumentException("Parameter `transformationSearch` is required when calling `SearchTransformations`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = transformationSearch;
    return await _transport.ExecuteRequestAsync<List<Transformation>>(new HttpMethod("POST"), "/1/transformations/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public List<Transformation> SearchTransformations(TransformationSearch transformationSearch, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => SearchTransformationsAsync(transformationSearch, options, cancellationToken));


  /// <inheritdoc />
  public async Task<WatchResponse> TriggerDockerSourceDiscoverAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `TriggerDockerSourceDiscover`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", QueryStringHelper.ParameterToString(sourceID));

    requestOptions.ReadTimeout ??= TimeSpan.FromMilliseconds(180000);
    requestOptions.WriteTimeout ??= TimeSpan.FromMilliseconds(180000);
    requestOptions.ConnectTimeout ??= TimeSpan.FromMilliseconds(180000);
    return await _transport.ExecuteRequestAsync<WatchResponse>(new HttpMethod("POST"), "/1/sources/{sourceID}/discover", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public WatchResponse TriggerDockerSourceDiscover(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => TriggerDockerSourceDiscoverAsync(sourceID, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TransformationTryResponse> TryTransformationAsync(TransformationTry transformationTry, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (transformationTry == null)
      throw new ArgumentException("Parameter `transformationTry` is required when calling `TryTransformation`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = transformationTry;
    return await _transport.ExecuteRequestAsync<TransformationTryResponse>(new HttpMethod("POST"), "/1/transformations/try", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TransformationTryResponse TryTransformation(TransformationTry transformationTry, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => TryTransformationAsync(transformationTry, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TransformationTryResponse> TryTransformationBeforeUpdateAsync(string transformationID, TransformationTry transformationTry, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (transformationID == null)
      throw new ArgumentException("Parameter `transformationID` is required when calling `TryTransformationBeforeUpdate`.");


    if (transformationTry == null)
      throw new ArgumentException("Parameter `transformationTry` is required when calling `TryTransformationBeforeUpdate`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("transformationID", QueryStringHelper.ParameterToString(transformationID));

    requestOptions.Data = transformationTry;
    return await _transport.ExecuteRequestAsync<TransformationTryResponse>(new HttpMethod("POST"), "/1/transformations/{transformationID}/try", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TransformationTryResponse TryTransformationBeforeUpdate(string transformationID, TransformationTry transformationTry, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => TryTransformationBeforeUpdateAsync(transformationID, transformationTry, options, cancellationToken));


  /// <inheritdoc />
  public async Task<AuthenticationUpdateResponse> UpdateAuthenticationAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationID == null)
      throw new ArgumentException("Parameter `authenticationID` is required when calling `UpdateAuthentication`.");


    if (authenticationUpdate == null)
      throw new ArgumentException("Parameter `authenticationUpdate` is required when calling `UpdateAuthentication`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("authenticationID", QueryStringHelper.ParameterToString(authenticationID));

    requestOptions.Data = authenticationUpdate;
    return await _transport.ExecuteRequestAsync<AuthenticationUpdateResponse>(new HttpMethod("PATCH"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public AuthenticationUpdateResponse UpdateAuthentication(string authenticationID, AuthenticationUpdate authenticationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => UpdateAuthenticationAsync(authenticationID, authenticationUpdate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<DestinationUpdateResponse> UpdateDestinationAsync(string destinationID, DestinationUpdate destinationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationID == null)
      throw new ArgumentException("Parameter `destinationID` is required when calling `UpdateDestination`.");


    if (destinationUpdate == null)
      throw new ArgumentException("Parameter `destinationUpdate` is required when calling `UpdateDestination`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("destinationID", QueryStringHelper.ParameterToString(destinationID));

    requestOptions.Data = destinationUpdate;
    return await _transport.ExecuteRequestAsync<DestinationUpdateResponse>(new HttpMethod("PATCH"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public DestinationUpdateResponse UpdateDestination(string destinationID, DestinationUpdate destinationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => UpdateDestinationAsync(destinationID, destinationUpdate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<SourceUpdateResponse> UpdateSourceAsync(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `UpdateSource`.");


    if (sourceUpdate == null)
      throw new ArgumentException("Parameter `sourceUpdate` is required when calling `UpdateSource`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", QueryStringHelper.ParameterToString(sourceID));

    requestOptions.Data = sourceUpdate;
    return await _transport.ExecuteRequestAsync<SourceUpdateResponse>(new HttpMethod("PATCH"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public SourceUpdateResponse UpdateSource(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => UpdateSourceAsync(sourceID, sourceUpdate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TaskUpdateResponse> UpdateTaskAsync(string taskID, TaskUpdate taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `UpdateTask`.");


    if (taskUpdate == null)
      throw new ArgumentException("Parameter `taskUpdate` is required when calling `UpdateTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    requestOptions.Data = taskUpdate;
    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PATCH"), "/2/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TaskUpdateResponse UpdateTask(string taskID, TaskUpdate taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => UpdateTaskAsync(taskID, taskUpdate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TaskUpdateResponse> UpdateTaskV1Async(string taskID, TaskUpdateV1 taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `UpdateTaskV1`.");


    if (taskUpdate == null)
      throw new ArgumentException("Parameter `taskUpdate` is required when calling `UpdateTaskV1`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", QueryStringHelper.ParameterToString(taskID));

    requestOptions.Data = taskUpdate;
    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PATCH"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TaskUpdateResponse UpdateTaskV1(string taskID, TaskUpdateV1 taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => UpdateTaskV1Async(taskID, taskUpdate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<TransformationUpdateResponse> UpdateTransformationAsync(string transformationID, TransformationCreate transformationCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (transformationID == null)
      throw new ArgumentException("Parameter `transformationID` is required when calling `UpdateTransformation`.");


    if (transformationCreate == null)
      throw new ArgumentException("Parameter `transformationCreate` is required when calling `UpdateTransformation`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("transformationID", QueryStringHelper.ParameterToString(transformationID));

    requestOptions.Data = transformationCreate;
    return await _transport.ExecuteRequestAsync<TransformationUpdateResponse>(new HttpMethod("PUT"), "/1/transformations/{transformationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public TransformationUpdateResponse UpdateTransformation(string transformationID, TransformationCreate transformationCreate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => UpdateTransformationAsync(transformationID, transformationCreate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<WatchResponse> ValidateSourceAsync(SourceCreate sourceCreate = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = sourceCreate;
    requestOptions.ReadTimeout ??= TimeSpan.FromMilliseconds(180000);
    requestOptions.WriteTimeout ??= TimeSpan.FromMilliseconds(180000);
    requestOptions.ConnectTimeout ??= TimeSpan.FromMilliseconds(180000);
    return await _transport.ExecuteRequestAsync<WatchResponse>(new HttpMethod("POST"), "/1/sources/validate", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public WatchResponse ValidateSource(SourceCreate sourceCreate = default, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ValidateSourceAsync(sourceCreate, options, cancellationToken));


  /// <inheritdoc />
  public async Task<WatchResponse> ValidateSourceBeforeUpdateAsync(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `ValidateSourceBeforeUpdate`.");


    if (sourceUpdate == null)
      throw new ArgumentException("Parameter `sourceUpdate` is required when calling `ValidateSourceBeforeUpdate`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", QueryStringHelper.ParameterToString(sourceID));

    requestOptions.Data = sourceUpdate;
    requestOptions.ReadTimeout ??= TimeSpan.FromMilliseconds(180000);
    requestOptions.WriteTimeout ??= TimeSpan.FromMilliseconds(180000);
    requestOptions.ConnectTimeout ??= TimeSpan.FromMilliseconds(180000);
    return await _transport.ExecuteRequestAsync<WatchResponse>(new HttpMethod("POST"), "/1/sources/{sourceID}/validate", requestOptions, cancellationToken).ConfigureAwait(false);
  }


  /// <inheritdoc />
  public WatchResponse ValidateSourceBeforeUpdate(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default) =>
    AsyncHelper.RunSync(() => ValidateSourceBeforeUpdateAsync(sourceID, sourceUpdate, options, cancellationToken));

}
