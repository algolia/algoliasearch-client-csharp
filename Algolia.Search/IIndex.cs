using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Models;
using Newtonsoft.Json.Linq;

namespace Algolia.Search
{
    public interface IIndex
    {
        JObject AddObject(object content);
        JObject AddObject(object content, RequestOptions requestOptions);
        Task<JObject> AddObjectAsync(object content, CancellationToken token = default(CancellationToken));
        Task<JObject> AddObjectAsync(object content, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject AddObjects(IEnumerable<object> objects);
        JObject AddObjects(IEnumerable<object> objects, RequestOptions requestOptions);
        Task<JObject> AddObjectsAsync(IEnumerable<object> objects, CancellationToken token = default(CancellationToken));
        Task<JObject> AddObjectsAsync(IEnumerable<object> objects, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject BatchRules(IEnumerable<JObject> queryRules, bool forwardToReplicas = false, bool clearExistingRules = false);
        JObject BatchRules(IEnumerable<JObject> queryRules, RequestOptions requestOptions, bool forwardToReplicas = false, bool clearExistingRules = false);
        Task<JObject> BatchRulesAsync(IEnumerable<JObject> queryRules, bool forwardToReplicas = false, bool clearExistingRules = false, CancellationToken token = default(CancellationToken));
        Task<JObject> BatchRulesAsync(IEnumerable<JObject> queryRules, RequestOptions requestOptions, bool forwardToReplicas = false, bool clearExistingRules = false, CancellationToken token = default(CancellationToken));
        JObject BatchSynonyms(IEnumerable<object> objects, bool forwardToReplicas = false, bool replaceExistingSynonyms = false);
        JObject BatchSynonyms(IEnumerable<object> objects, RequestOptions requestOptions, bool forwardToReplicas = false, bool replaceExistingSynonyms = false);
        Task<JObject> BatchSynonymsAsync(IEnumerable<object> objects, bool forwardToReplicas = false, bool replaceExistingSynonyms = false, CancellationToken token = default(CancellationToken));
        Task<JObject> BatchSynonymsAsync(IEnumerable<object> objects, RequestOptions requestOptions, bool forwardToReplicas = false, bool replaceExistingSynonyms = false, CancellationToken token = default(CancellationToken));
        JObject Browse(int page = 0, int hitsPerPage = 1000);
        JObject Browse(RequestOptions requestOptions, int page = 0, int hitsPerPage = 1000);
        Index.IndexIterator BrowseAll(Query q);
        Index.IndexIterator BrowseAll(Query q, RequestOptions requestOptions);
        Task<JObject> BrowseAsync(int page = 0, int hitsPerPage = 1000, CancellationToken token = default(CancellationToken));
        Task<JObject> BrowseAsync(RequestOptions requestOptions, int page = 0, int hitsPerPage = 1000, CancellationToken token = default(CancellationToken));
        JObject BrowseFrom(Query q, string cursor, RequestOptions requestOptions);
        Task<JObject> BrowseFromAsync(Query q, string cursor, CancellationToken token = default(CancellationToken));
        Task<JObject> BrowseFromAsync(Query q, string cursor, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject ClearIndex();
        JObject ClearIndex(RequestOptions requestOptions);
        Task<JObject> ClearIndexAsync(CancellationToken token = default(CancellationToken));
        Task<JObject> ClearIndexAsync(RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject ClearRules(bool forwardToReplicas = false);
        JObject ClearRules(RequestOptions requestOptions, bool forwardToReplicas = false);
        Task<JObject> ClearRulesAsync(bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        Task<JObject> ClearRulesAsync(RequestOptions requestOptions, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        JObject ClearSynonyms(bool forwardToReplicas = false);
        JObject ClearSynonyms(RequestOptions requestOptions, bool forwardToReplicas = false);
        Task<JObject> ClearSynonymsAsync(bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        Task<JObject> ClearSynonymsAsync(RequestOptions requestOptions, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        JObject DeleteBy(Query query, RequestOptions requestOptions = null, CancellationToken token = default(CancellationToken));
        Task<JObject> DeleteByAsync(Query query, RequestOptions requestOptions = null, CancellationToken token = default(CancellationToken));
        JObject DeleteObject(string objectID);
        JObject DeleteObject(string objectID, RequestOptions requestOptions);
        Task<JObject> DeleteObjectAsync(string objectID, CancellationToken token = default(CancellationToken));
        Task<JObject> DeleteObjectAsync(string objectID, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject DeleteObjects(IEnumerable<string> objects);
        JObject DeleteObjects(IEnumerable<string> objects, RequestOptions requestOptions);
        Task<JObject> DeleteObjectsAsync(IEnumerable<string> objects, CancellationToken token = default(CancellationToken));
        Task<JObject> DeleteObjectsAsync(IEnumerable<string> objects, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject DeleteRule(string objectID, bool forwardToReplicas = false);
        JObject DeleteRule(string objectID, RequestOptions requestOptions, bool forwardToReplicas = false);
        Task<JObject> DeleteRuleAsync(string objectID, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        Task<JObject> DeleteRuleAsync(string objectID, RequestOptions requestOptions, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        JObject DeleteSynonym(string objectID, bool forwardToReplicas = false);
        JObject DeleteSynonym(string objectID, RequestOptions requestOptions, bool forwardToReplicas = false);
        Task<JObject> DeleteSynonymAsync(string objectID, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        Task<JObject> DeleteSynonymAsync(string objectID, RequestOptions requestOptions, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        JObject GetObject(string objectID, IEnumerable<string> attributesToRetrieve = null);
        JObject GetObject(string objectID, RequestOptions requestOptions, IEnumerable<string> attributesToRetrieve = null);
        Task<JObject> GetObjectAsync(string objectID, IEnumerable<string> attributesToRetrieve = null, CancellationToken token = default(CancellationToken));
        Task<JObject> GetObjectAsync(string objectID, RequestOptions requestOptions, IEnumerable<string> attributesToRetrieve = null, CancellationToken token = default(CancellationToken));
        JObject GetObjects(IEnumerable<string> objectIDs);
        JObject GetObjects(IEnumerable<string> objectIDs, IEnumerable<string> attributesToRetrieve);
        JObject GetObjects(IEnumerable<string> objectIDs, IEnumerable<string> attributesToRetrieve, RequestOptions requestOptions);
        JObject GetObjects(IEnumerable<string> objectIDs, RequestOptions requestOptions);
        Task<JObject> GetObjectsAsync(IEnumerable<string> objectIDs, CancellationToken token = default(CancellationToken));
        Task<JObject> GetObjectsAsync(IEnumerable<string> objectIDs, IEnumerable<string> attributesToRetrieve, CancellationToken token = default(CancellationToken));
        Task<JObject> GetObjectsAsync(IEnumerable<string> objectIDs, IEnumerable<string> attributesToRetrieve, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        Task<JObject> GetObjectsAsync(IEnumerable<string> objectIDs, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject GetRule(string objectID);
        JObject GetRule(string objectID, RequestOptions requestOptions);
        Task<JObject> GetRuleAsync(string objectID, CancellationToken token = default(CancellationToken));
        Task<JObject> GetRuleAsync(string objectID, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject GetSettings();
        JObject GetSettings(RequestOptions requestOptions);
        Task<JObject> GetSettingsAsync(CancellationToken token = default(CancellationToken));
        Task<JObject> GetSettingsAsync(RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject GetSynonym(string objectID);
        JObject GetSynonym(string objectID, RequestOptions requestOptions);
        Task<JObject> GetSynonymAsync(string objectID, CancellationToken token = default(CancellationToken));
        Task<JObject> GetSynonymAsync(string objectID, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject PartialUpdateObject(JObject partialObject, bool createIfNotExists = true);
        JObject PartialUpdateObject(JObject partialObject, RequestOptions requestOptions, bool createIfNotExists = true);
        Task<JObject> PartialUpdateObjectAsync(JObject partialObject, bool createIfNotExists = true, CancellationToken token = default(CancellationToken));
        Task<JObject> PartialUpdateObjectAsync(JObject partialObject, RequestOptions requestOptions, bool createIfNotExists = true, CancellationToken token = default(CancellationToken));
        JObject PartialUpdateObjects(IEnumerable<JObject> objects, bool createIfNotExists = true);
        JObject PartialUpdateObjects(IEnumerable<JObject> objects, RequestOptions requestOptions, bool createIfNotExists = true);
        Task<JObject> PartialUpdateObjectsAsync(IEnumerable<JObject> objects, bool createIfNotExists = true, CancellationToken token = default(CancellationToken));
        Task<JObject> PartialUpdateObjectsAsync(IEnumerable<JObject> objects, RequestOptions requestOptions, bool createIfNotExists = true, CancellationToken token = default(CancellationToken));
        JObject SaveObject(JObject obj);
        JObject SaveObject(JObject obj, RequestOptions requestOptions);
        Task<JObject> SaveObjectAsync(JObject obj, CancellationToken token = default(CancellationToken));
        Task<JObject> SaveObjectAsync(JObject obj, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject SaveObjects(IEnumerable<JObject> objects);
        JObject SaveObjects(IEnumerable<JObject> objects, RequestOptions requestOptions);
        Task<JObject> SaveObjectsAsync(IEnumerable<JObject> objects, CancellationToken token = default(CancellationToken));
        Task<JObject> SaveObjectsAsync(IEnumerable<JObject> objects, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject SaveRule(JObject queryRule, bool forwardToReplicas = false);
        JObject SaveRule(JObject queryRule, RequestOptions requestOptions, bool forwardToReplicas = false);
        Task<JObject> SaveRuleAsync(JObject queryRule, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        Task<JObject> SaveRuleAsync(JObject queryRule, RequestOptions requestOptions, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        JObject SaveSynonym(string objectID, object content, bool forwardToReplicas = false);
        JObject SaveSynonym(string objectID, object content, RequestOptions requestOptions, bool forwardToReplicas = false);
        Task<JObject> SaveSynonymAsync(string objectID, object content, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        Task<JObject> SaveSynonymAsync(string objectID, object content, RequestOptions requestOptions, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        JObject Search(Query q);
        JObject Search(Query q, RequestOptions requestOptions);
        Task<JObject> SearchAsync(Query q, CancellationToken token = default(CancellationToken));
        Task<JObject> SearchAsync(Query q, RequestOptions requestOptions, CancellationToken token = default(CancellationToken));
        JObject SearchDisjunctiveFaceting(Query query, IEnumerable<string> disjunctiveFacets, Dictionary<string, IEnumerable<string>> refinements = null);
        JObject SearchDisjunctiveFaceting(Query query, IEnumerable<string> disjunctiveFacets, RequestOptions requestOptions, Dictionary<string, IEnumerable<string>> refinements = null);
        Task<JObject> SearchDisjunctiveFacetingAsync(Query query, IEnumerable<string> disjunctiveFacets, Dictionary<string, IEnumerable<string>> refinements = null);
        Task<JObject> SearchDisjunctiveFacetingAsync(Query query, IEnumerable<string> disjunctiveFacets, RequestOptions requestOptions, Dictionary<string, IEnumerable<string>> refinements = null);
        JObject SearchFacet(string facetName, string facetQuery, Query queryParams = null);
        JObject SearchFacet(string facetName, string facetQuery, RequestOptions requestOptions, Query queryParams = null);
        Task<JObject> SearchFacetAsync(string facetName, string facetQuery, Query queryParams = null, CancellationToken token = default(CancellationToken));
        Task<JObject> SearchFacetAsync(string facetName, string facetQuery, RequestOptions requestOptions, Query queryParams = null, CancellationToken token = default(CancellationToken));
        JObject SearchForFacetValues(string facetName, string facetQuery, Query queryParams = null);
        JObject SearchForFacetValues(string facetName, string facetQuery, RequestOptions requestOptions, Query queryParams = null);
        Task<JObject> SearchForFacetValuesAsync(string facetName, string facetQuery, Query queryParams = null, CancellationToken token = default(CancellationToken));
        Task<JObject> SearchForFacetValuesAsync(string facetName, string facetQuery, RequestOptions requestOptions, Query queryParams = null, CancellationToken token = default(CancellationToken));
        JObject SearchRules(RuleQuery query = null);
        JObject SearchRules(RequestOptions requestOptions, RuleQuery query = null);
        Task<JObject> SearchRulesAsync(RuleQuery query = null, CancellationToken token = default(CancellationToken));
        Task<JObject> SearchRulesAsync(RequestOptions requestOptions, RuleQuery query = null, CancellationToken token = default(CancellationToken));
        JObject SearchSynonyms(string query, IEnumerable<string> types = null, int? page = null, int? hitsPerPage = null);
        JObject SearchSynonyms(string query, IEnumerable<Index.SynonymType> types = null, int? page = null, int? hitsPerPage = null);
        JObject SearchSynonyms(string query, RequestOptions requestOptions, IEnumerable<string> types = null, int? page = null, int? hitsPerPage = null);
        JObject SearchSynonyms(string query, RequestOptions requestOptions, IEnumerable<Index.SynonymType> types = null, int? page = null, int? hitsPerPage = null);
        Task<JObject> SearchSynonymsAsync(string query, IEnumerable<string> types = null, int? page = null, int? hitsPerPage = null, CancellationToken token = default(CancellationToken));
        Task<JObject> SearchSynonymsAsync(string query, IEnumerable<Index.SynonymType> types = null, int? page = null, int? hitsPerPage = null, CancellationToken token = default(CancellationToken));
        Task<JObject> SearchSynonymsAsync(string query, RequestOptions requestOptions, IEnumerable<string> types = null, int? page = null, int? hitsPerPage = null, CancellationToken token = default(CancellationToken));
        Task<JObject> SearchSynonymsAsync(string query, RequestOptions requestOptions, IEnumerable<Index.SynonymType> types = null, int? page = null, int? hitsPerPage = null, CancellationToken token = default(CancellationToken));
        JObject SetSettings(JObject settings, bool forwardToReplicas = false);
        JObject SetSettings(JObject settings, RequestOptions requestOptions, bool forwardToReplicas = false);
        Task<JObject> SetSettingsAsync(JObject settings, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        Task<JObject> SetSettingsAsync(JObject settings, RequestOptions requestOptions, bool forwardToReplicas = false, CancellationToken token = default(CancellationToken));
        void WaitTask(string taskID, int timeToWait = 100);
        void WaitTask(string taskID, RequestOptions requestOptions, int timeToWait = 100);
        Task WaitTaskAsync(string taskID, int timeToWait = 100, CancellationToken token = default(CancellationToken));
        Task WaitTaskAsync(string taskID, RequestOptions requestOptions, int timeToWait = 100, CancellationToken token = default(CancellationToken));
    }
}